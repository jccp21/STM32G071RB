
Teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d64  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007e20  08007e20  00008e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008288  08008288  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008288  08008288  0000a1d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008288  08008288  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008288  08008288  00009288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800828c  0800828c  0000928c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008290  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001d8  08008468  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08008468  0000a414  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008922  00000000  00000000  0000a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001664  00000000  00000000  00012b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00014188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f0  00000000  00000000  00014bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017212  00000000  00000000  000153e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7ff  00000000  00000000  0002c5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000938f7  00000000  00000000  00037df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb6e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c4  00000000  00000000  000cb72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000ceef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001d8 	.word	0x200001d8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007e04 	.word	0x08007e04

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001dc 	.word	0x200001dc
 80000fc:	08007e04 	.word	0x08007e04

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 f869 	bl	800150c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ffa9 	bl	800139c <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f85b 	bl	800150c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f851 	bl	800150c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ffd3 	bl	8001424 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 ffc9 	bl	8001424 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 f8ab 	bl	8000604 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f82b 	bl	8000514 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 f89d 	bl	8000604 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 f893 	bl	8000604 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 f839 	bl	8000564 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 f82f 	bl	8000564 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__eqsf2>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	0042      	lsls	r2, r0, #1
 8000518:	024e      	lsls	r6, r1, #9
 800051a:	004c      	lsls	r4, r1, #1
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	0a6d      	lsrs	r5, r5, #9
 8000520:	0e12      	lsrs	r2, r2, #24
 8000522:	0fc3      	lsrs	r3, r0, #31
 8000524:	0a76      	lsrs	r6, r6, #9
 8000526:	0e24      	lsrs	r4, r4, #24
 8000528:	0fc9      	lsrs	r1, r1, #31
 800052a:	2aff      	cmp	r2, #255	@ 0xff
 800052c:	d010      	beq.n	8000550 <__eqsf2+0x3c>
 800052e:	2cff      	cmp	r4, #255	@ 0xff
 8000530:	d00c      	beq.n	800054c <__eqsf2+0x38>
 8000532:	2001      	movs	r0, #1
 8000534:	42a2      	cmp	r2, r4
 8000536:	d10a      	bne.n	800054e <__eqsf2+0x3a>
 8000538:	42b5      	cmp	r5, r6
 800053a:	d108      	bne.n	800054e <__eqsf2+0x3a>
 800053c:	428b      	cmp	r3, r1
 800053e:	d00f      	beq.n	8000560 <__eqsf2+0x4c>
 8000540:	2a00      	cmp	r2, #0
 8000542:	d104      	bne.n	800054e <__eqsf2+0x3a>
 8000544:	0028      	movs	r0, r5
 8000546:	1e43      	subs	r3, r0, #1
 8000548:	4198      	sbcs	r0, r3
 800054a:	e000      	b.n	800054e <__eqsf2+0x3a>
 800054c:	2001      	movs	r0, #1
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	2001      	movs	r0, #1
 8000552:	2cff      	cmp	r4, #255	@ 0xff
 8000554:	d1fb      	bne.n	800054e <__eqsf2+0x3a>
 8000556:	4335      	orrs	r5, r6
 8000558:	d1f9      	bne.n	800054e <__eqsf2+0x3a>
 800055a:	404b      	eors	r3, r1
 800055c:	0018      	movs	r0, r3
 800055e:	e7f6      	b.n	800054e <__eqsf2+0x3a>
 8000560:	2000      	movs	r0, #0
 8000562:	e7f4      	b.n	800054e <__eqsf2+0x3a>

08000564 <__gesf2>:
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	0042      	lsls	r2, r0, #1
 8000568:	0244      	lsls	r4, r0, #9
 800056a:	024d      	lsls	r5, r1, #9
 800056c:	0fc3      	lsrs	r3, r0, #31
 800056e:	0048      	lsls	r0, r1, #1
 8000570:	0a64      	lsrs	r4, r4, #9
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	0a6d      	lsrs	r5, r5, #9
 8000576:	0e00      	lsrs	r0, r0, #24
 8000578:	0fc9      	lsrs	r1, r1, #31
 800057a:	2aff      	cmp	r2, #255	@ 0xff
 800057c:	d019      	beq.n	80005b2 <__gesf2+0x4e>
 800057e:	28ff      	cmp	r0, #255	@ 0xff
 8000580:	d00b      	beq.n	800059a <__gesf2+0x36>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d11e      	bne.n	80005c4 <__gesf2+0x60>
 8000586:	2800      	cmp	r0, #0
 8000588:	d10b      	bne.n	80005a2 <__gesf2+0x3e>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d027      	beq.n	80005de <__gesf2+0x7a>
 800058e:	2c00      	cmp	r4, #0
 8000590:	d134      	bne.n	80005fc <__gesf2+0x98>
 8000592:	2900      	cmp	r1, #0
 8000594:	d02f      	beq.n	80005f6 <__gesf2+0x92>
 8000596:	0008      	movs	r0, r1
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	2d00      	cmp	r5, #0
 800059c:	d128      	bne.n	80005f0 <__gesf2+0x8c>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	d101      	bne.n	80005a6 <__gesf2+0x42>
 80005a2:	2c00      	cmp	r4, #0
 80005a4:	d0f5      	beq.n	8000592 <__gesf2+0x2e>
 80005a6:	428b      	cmp	r3, r1
 80005a8:	d107      	bne.n	80005ba <__gesf2+0x56>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d023      	beq.n	80005f6 <__gesf2+0x92>
 80005ae:	0018      	movs	r0, r3
 80005b0:	e7f2      	b.n	8000598 <__gesf2+0x34>
 80005b2:	2c00      	cmp	r4, #0
 80005b4:	d11c      	bne.n	80005f0 <__gesf2+0x8c>
 80005b6:	28ff      	cmp	r0, #255	@ 0xff
 80005b8:	d014      	beq.n	80005e4 <__gesf2+0x80>
 80005ba:	1e58      	subs	r0, r3, #1
 80005bc:	2302      	movs	r3, #2
 80005be:	4018      	ands	r0, r3
 80005c0:	3801      	subs	r0, #1
 80005c2:	e7e9      	b.n	8000598 <__gesf2+0x34>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d0f8      	beq.n	80005ba <__gesf2+0x56>
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d1f6      	bne.n	80005ba <__gesf2+0x56>
 80005cc:	4282      	cmp	r2, r0
 80005ce:	dcf4      	bgt.n	80005ba <__gesf2+0x56>
 80005d0:	dbeb      	blt.n	80005aa <__gesf2+0x46>
 80005d2:	42ac      	cmp	r4, r5
 80005d4:	d8f1      	bhi.n	80005ba <__gesf2+0x56>
 80005d6:	2000      	movs	r0, #0
 80005d8:	42ac      	cmp	r4, r5
 80005da:	d2dd      	bcs.n	8000598 <__gesf2+0x34>
 80005dc:	e7e5      	b.n	80005aa <__gesf2+0x46>
 80005de:	2c00      	cmp	r4, #0
 80005e0:	d0da      	beq.n	8000598 <__gesf2+0x34>
 80005e2:	e7ea      	b.n	80005ba <__gesf2+0x56>
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d103      	bne.n	80005f0 <__gesf2+0x8c>
 80005e8:	428b      	cmp	r3, r1
 80005ea:	d1e6      	bne.n	80005ba <__gesf2+0x56>
 80005ec:	2000      	movs	r0, #0
 80005ee:	e7d3      	b.n	8000598 <__gesf2+0x34>
 80005f0:	2002      	movs	r0, #2
 80005f2:	4240      	negs	r0, r0
 80005f4:	e7d0      	b.n	8000598 <__gesf2+0x34>
 80005f6:	2001      	movs	r0, #1
 80005f8:	4240      	negs	r0, r0
 80005fa:	e7cd      	b.n	8000598 <__gesf2+0x34>
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d0e8      	beq.n	80005d2 <__gesf2+0x6e>
 8000600:	e7db      	b.n	80005ba <__gesf2+0x56>
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__lesf2>:
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	0042      	lsls	r2, r0, #1
 8000608:	0244      	lsls	r4, r0, #9
 800060a:	024d      	lsls	r5, r1, #9
 800060c:	0fc3      	lsrs	r3, r0, #31
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a64      	lsrs	r4, r4, #9
 8000612:	0e12      	lsrs	r2, r2, #24
 8000614:	0a6d      	lsrs	r5, r5, #9
 8000616:	0e00      	lsrs	r0, r0, #24
 8000618:	0fc9      	lsrs	r1, r1, #31
 800061a:	2aff      	cmp	r2, #255	@ 0xff
 800061c:	d01a      	beq.n	8000654 <__lesf2+0x50>
 800061e:	28ff      	cmp	r0, #255	@ 0xff
 8000620:	d00e      	beq.n	8000640 <__lesf2+0x3c>
 8000622:	2a00      	cmp	r2, #0
 8000624:	d11e      	bne.n	8000664 <__lesf2+0x60>
 8000626:	2800      	cmp	r0, #0
 8000628:	d10e      	bne.n	8000648 <__lesf2+0x44>
 800062a:	2d00      	cmp	r5, #0
 800062c:	d02a      	beq.n	8000684 <__lesf2+0x80>
 800062e:	2c00      	cmp	r4, #0
 8000630:	d00c      	beq.n	800064c <__lesf2+0x48>
 8000632:	428b      	cmp	r3, r1
 8000634:	d01d      	beq.n	8000672 <__lesf2+0x6e>
 8000636:	1e58      	subs	r0, r3, #1
 8000638:	2302      	movs	r3, #2
 800063a:	4018      	ands	r0, r3
 800063c:	3801      	subs	r0, #1
 800063e:	e010      	b.n	8000662 <__lesf2+0x5e>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d10d      	bne.n	8000660 <__lesf2+0x5c>
 8000644:	2a00      	cmp	r2, #0
 8000646:	d120      	bne.n	800068a <__lesf2+0x86>
 8000648:	2c00      	cmp	r4, #0
 800064a:	d11e      	bne.n	800068a <__lesf2+0x86>
 800064c:	2900      	cmp	r1, #0
 800064e:	d023      	beq.n	8000698 <__lesf2+0x94>
 8000650:	0008      	movs	r0, r1
 8000652:	e006      	b.n	8000662 <__lesf2+0x5e>
 8000654:	2c00      	cmp	r4, #0
 8000656:	d103      	bne.n	8000660 <__lesf2+0x5c>
 8000658:	28ff      	cmp	r0, #255	@ 0xff
 800065a:	d1ec      	bne.n	8000636 <__lesf2+0x32>
 800065c:	2d00      	cmp	r5, #0
 800065e:	d017      	beq.n	8000690 <__lesf2+0x8c>
 8000660:	2002      	movs	r0, #2
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	2800      	cmp	r0, #0
 8000666:	d0e6      	beq.n	8000636 <__lesf2+0x32>
 8000668:	428b      	cmp	r3, r1
 800066a:	d1e4      	bne.n	8000636 <__lesf2+0x32>
 800066c:	4282      	cmp	r2, r0
 800066e:	dce2      	bgt.n	8000636 <__lesf2+0x32>
 8000670:	db04      	blt.n	800067c <__lesf2+0x78>
 8000672:	42ac      	cmp	r4, r5
 8000674:	d8df      	bhi.n	8000636 <__lesf2+0x32>
 8000676:	2000      	movs	r0, #0
 8000678:	42ac      	cmp	r4, r5
 800067a:	d2f2      	bcs.n	8000662 <__lesf2+0x5e>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00b      	beq.n	8000698 <__lesf2+0x94>
 8000680:	0018      	movs	r0, r3
 8000682:	e7ee      	b.n	8000662 <__lesf2+0x5e>
 8000684:	2c00      	cmp	r4, #0
 8000686:	d0ec      	beq.n	8000662 <__lesf2+0x5e>
 8000688:	e7d5      	b.n	8000636 <__lesf2+0x32>
 800068a:	428b      	cmp	r3, r1
 800068c:	d1d3      	bne.n	8000636 <__lesf2+0x32>
 800068e:	e7f5      	b.n	800067c <__lesf2+0x78>
 8000690:	2000      	movs	r0, #0
 8000692:	428b      	cmp	r3, r1
 8000694:	d0e5      	beq.n	8000662 <__lesf2+0x5e>
 8000696:	e7ce      	b.n	8000636 <__lesf2+0x32>
 8000698:	2001      	movs	r0, #1
 800069a:	4240      	negs	r0, r0
 800069c:	e7e1      	b.n	8000662 <__lesf2+0x5e>
 800069e:	46c0      	nop			@ (mov r8, r8)

080006a0 <__aeabi_dadd>:
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	4657      	mov	r7, sl
 80006a4:	464e      	mov	r6, r9
 80006a6:	4645      	mov	r5, r8
 80006a8:	46de      	mov	lr, fp
 80006aa:	b5e0      	push	{r5, r6, r7, lr}
 80006ac:	b083      	sub	sp, #12
 80006ae:	9000      	str	r0, [sp, #0]
 80006b0:	9101      	str	r1, [sp, #4]
 80006b2:	030c      	lsls	r4, r1, #12
 80006b4:	004f      	lsls	r7, r1, #1
 80006b6:	0fce      	lsrs	r6, r1, #31
 80006b8:	0a61      	lsrs	r1, r4, #9
 80006ba:	9c00      	ldr	r4, [sp, #0]
 80006bc:	031d      	lsls	r5, r3, #12
 80006be:	0f64      	lsrs	r4, r4, #29
 80006c0:	430c      	orrs	r4, r1
 80006c2:	9900      	ldr	r1, [sp, #0]
 80006c4:	9200      	str	r2, [sp, #0]
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	00c8      	lsls	r0, r1, #3
 80006ca:	0059      	lsls	r1, r3, #1
 80006cc:	0d4b      	lsrs	r3, r1, #21
 80006ce:	4699      	mov	r9, r3
 80006d0:	9a00      	ldr	r2, [sp, #0]
 80006d2:	9b01      	ldr	r3, [sp, #4]
 80006d4:	0a6d      	lsrs	r5, r5, #9
 80006d6:	0fd9      	lsrs	r1, r3, #31
 80006d8:	0f53      	lsrs	r3, r2, #29
 80006da:	432b      	orrs	r3, r5
 80006dc:	469a      	mov	sl, r3
 80006de:	9b00      	ldr	r3, [sp, #0]
 80006e0:	0d7f      	lsrs	r7, r7, #21
 80006e2:	00da      	lsls	r2, r3, #3
 80006e4:	4694      	mov	ip, r2
 80006e6:	464a      	mov	r2, r9
 80006e8:	46b0      	mov	r8, r6
 80006ea:	1aba      	subs	r2, r7, r2
 80006ec:	428e      	cmp	r6, r1
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x52>
 80006f0:	e0b0      	b.n	8000854 <__aeabi_dadd+0x1b4>
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	dc00      	bgt.n	80006f8 <__aeabi_dadd+0x58>
 80006f6:	e078      	b.n	80007ea <__aeabi_dadd+0x14a>
 80006f8:	4649      	mov	r1, r9
 80006fa:	2900      	cmp	r1, #0
 80006fc:	d100      	bne.n	8000700 <__aeabi_dadd+0x60>
 80006fe:	e0e9      	b.n	80008d4 <__aeabi_dadd+0x234>
 8000700:	49c9      	ldr	r1, [pc, #804]	@ (8000a28 <__aeabi_dadd+0x388>)
 8000702:	428f      	cmp	r7, r1
 8000704:	d100      	bne.n	8000708 <__aeabi_dadd+0x68>
 8000706:	e195      	b.n	8000a34 <__aeabi_dadd+0x394>
 8000708:	2501      	movs	r5, #1
 800070a:	2a38      	cmp	r2, #56	@ 0x38
 800070c:	dc16      	bgt.n	800073c <__aeabi_dadd+0x9c>
 800070e:	2180      	movs	r1, #128	@ 0x80
 8000710:	4653      	mov	r3, sl
 8000712:	0409      	lsls	r1, r1, #16
 8000714:	430b      	orrs	r3, r1
 8000716:	469a      	mov	sl, r3
 8000718:	2a1f      	cmp	r2, #31
 800071a:	dd00      	ble.n	800071e <__aeabi_dadd+0x7e>
 800071c:	e1e7      	b.n	8000aee <__aeabi_dadd+0x44e>
 800071e:	2120      	movs	r1, #32
 8000720:	4655      	mov	r5, sl
 8000722:	1a8b      	subs	r3, r1, r2
 8000724:	4661      	mov	r1, ip
 8000726:	409d      	lsls	r5, r3
 8000728:	40d1      	lsrs	r1, r2
 800072a:	430d      	orrs	r5, r1
 800072c:	4661      	mov	r1, ip
 800072e:	4099      	lsls	r1, r3
 8000730:	1e4b      	subs	r3, r1, #1
 8000732:	4199      	sbcs	r1, r3
 8000734:	4653      	mov	r3, sl
 8000736:	40d3      	lsrs	r3, r2
 8000738:	430d      	orrs	r5, r1
 800073a:	1ae4      	subs	r4, r4, r3
 800073c:	1b45      	subs	r5, r0, r5
 800073e:	42a8      	cmp	r0, r5
 8000740:	4180      	sbcs	r0, r0
 8000742:	4240      	negs	r0, r0
 8000744:	1a24      	subs	r4, r4, r0
 8000746:	0223      	lsls	r3, r4, #8
 8000748:	d400      	bmi.n	800074c <__aeabi_dadd+0xac>
 800074a:	e10f      	b.n	800096c <__aeabi_dadd+0x2cc>
 800074c:	0264      	lsls	r4, r4, #9
 800074e:	0a64      	lsrs	r4, r4, #9
 8000750:	2c00      	cmp	r4, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0xb6>
 8000754:	e139      	b.n	80009ca <__aeabi_dadd+0x32a>
 8000756:	0020      	movs	r0, r4
 8000758:	f001 ff2a 	bl	80025b0 <__clzsi2>
 800075c:	0003      	movs	r3, r0
 800075e:	3b08      	subs	r3, #8
 8000760:	2120      	movs	r1, #32
 8000762:	0028      	movs	r0, r5
 8000764:	1aca      	subs	r2, r1, r3
 8000766:	40d0      	lsrs	r0, r2
 8000768:	409c      	lsls	r4, r3
 800076a:	0002      	movs	r2, r0
 800076c:	409d      	lsls	r5, r3
 800076e:	4322      	orrs	r2, r4
 8000770:	429f      	cmp	r7, r3
 8000772:	dd00      	ble.n	8000776 <__aeabi_dadd+0xd6>
 8000774:	e173      	b.n	8000a5e <__aeabi_dadd+0x3be>
 8000776:	1bd8      	subs	r0, r3, r7
 8000778:	3001      	adds	r0, #1
 800077a:	1a09      	subs	r1, r1, r0
 800077c:	002c      	movs	r4, r5
 800077e:	408d      	lsls	r5, r1
 8000780:	40c4      	lsrs	r4, r0
 8000782:	1e6b      	subs	r3, r5, #1
 8000784:	419d      	sbcs	r5, r3
 8000786:	0013      	movs	r3, r2
 8000788:	40c2      	lsrs	r2, r0
 800078a:	408b      	lsls	r3, r1
 800078c:	4325      	orrs	r5, r4
 800078e:	2700      	movs	r7, #0
 8000790:	0014      	movs	r4, r2
 8000792:	431d      	orrs	r5, r3
 8000794:	076b      	lsls	r3, r5, #29
 8000796:	d009      	beq.n	80007ac <__aeabi_dadd+0x10c>
 8000798:	230f      	movs	r3, #15
 800079a:	402b      	ands	r3, r5
 800079c:	2b04      	cmp	r3, #4
 800079e:	d005      	beq.n	80007ac <__aeabi_dadd+0x10c>
 80007a0:	1d2b      	adds	r3, r5, #4
 80007a2:	42ab      	cmp	r3, r5
 80007a4:	41ad      	sbcs	r5, r5
 80007a6:	426d      	negs	r5, r5
 80007a8:	1964      	adds	r4, r4, r5
 80007aa:	001d      	movs	r5, r3
 80007ac:	0223      	lsls	r3, r4, #8
 80007ae:	d400      	bmi.n	80007b2 <__aeabi_dadd+0x112>
 80007b0:	e12d      	b.n	8000a0e <__aeabi_dadd+0x36e>
 80007b2:	4a9d      	ldr	r2, [pc, #628]	@ (8000a28 <__aeabi_dadd+0x388>)
 80007b4:	3701      	adds	r7, #1
 80007b6:	4297      	cmp	r7, r2
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x11c>
 80007ba:	e0d3      	b.n	8000964 <__aeabi_dadd+0x2c4>
 80007bc:	4646      	mov	r6, r8
 80007be:	499b      	ldr	r1, [pc, #620]	@ (8000a2c <__aeabi_dadd+0x38c>)
 80007c0:	08ed      	lsrs	r5, r5, #3
 80007c2:	4021      	ands	r1, r4
 80007c4:	074a      	lsls	r2, r1, #29
 80007c6:	432a      	orrs	r2, r5
 80007c8:	057c      	lsls	r4, r7, #21
 80007ca:	024d      	lsls	r5, r1, #9
 80007cc:	0b2d      	lsrs	r5, r5, #12
 80007ce:	0d64      	lsrs	r4, r4, #21
 80007d0:	0524      	lsls	r4, r4, #20
 80007d2:	432c      	orrs	r4, r5
 80007d4:	07f6      	lsls	r6, r6, #31
 80007d6:	4334      	orrs	r4, r6
 80007d8:	0010      	movs	r0, r2
 80007da:	0021      	movs	r1, r4
 80007dc:	b003      	add	sp, #12
 80007de:	bcf0      	pop	{r4, r5, r6, r7}
 80007e0:	46bb      	mov	fp, r7
 80007e2:	46b2      	mov	sl, r6
 80007e4:	46a9      	mov	r9, r5
 80007e6:	46a0      	mov	r8, r4
 80007e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	d100      	bne.n	80007f0 <__aeabi_dadd+0x150>
 80007ee:	e084      	b.n	80008fa <__aeabi_dadd+0x25a>
 80007f0:	464a      	mov	r2, r9
 80007f2:	1bd2      	subs	r2, r2, r7
 80007f4:	2f00      	cmp	r7, #0
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x15a>
 80007f8:	e16d      	b.n	8000ad6 <__aeabi_dadd+0x436>
 80007fa:	0025      	movs	r5, r4
 80007fc:	4305      	orrs	r5, r0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x162>
 8000800:	e127      	b.n	8000a52 <__aeabi_dadd+0x3b2>
 8000802:	1e56      	subs	r6, r2, #1
 8000804:	2a01      	cmp	r2, #1
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x16a>
 8000808:	e23b      	b.n	8000c82 <__aeabi_dadd+0x5e2>
 800080a:	4d87      	ldr	r5, [pc, #540]	@ (8000a28 <__aeabi_dadd+0x388>)
 800080c:	42aa      	cmp	r2, r5
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x172>
 8000810:	e26a      	b.n	8000ce8 <__aeabi_dadd+0x648>
 8000812:	2501      	movs	r5, #1
 8000814:	2e38      	cmp	r6, #56	@ 0x38
 8000816:	dc12      	bgt.n	800083e <__aeabi_dadd+0x19e>
 8000818:	0032      	movs	r2, r6
 800081a:	2a1f      	cmp	r2, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x180>
 800081e:	e1f8      	b.n	8000c12 <__aeabi_dadd+0x572>
 8000820:	2620      	movs	r6, #32
 8000822:	0025      	movs	r5, r4
 8000824:	1ab6      	subs	r6, r6, r2
 8000826:	0007      	movs	r7, r0
 8000828:	4653      	mov	r3, sl
 800082a:	40b0      	lsls	r0, r6
 800082c:	40d4      	lsrs	r4, r2
 800082e:	40b5      	lsls	r5, r6
 8000830:	40d7      	lsrs	r7, r2
 8000832:	1e46      	subs	r6, r0, #1
 8000834:	41b0      	sbcs	r0, r6
 8000836:	1b1b      	subs	r3, r3, r4
 8000838:	469a      	mov	sl, r3
 800083a:	433d      	orrs	r5, r7
 800083c:	4305      	orrs	r5, r0
 800083e:	4662      	mov	r2, ip
 8000840:	1b55      	subs	r5, r2, r5
 8000842:	45ac      	cmp	ip, r5
 8000844:	4192      	sbcs	r2, r2
 8000846:	4653      	mov	r3, sl
 8000848:	4252      	negs	r2, r2
 800084a:	000e      	movs	r6, r1
 800084c:	464f      	mov	r7, r9
 800084e:	4688      	mov	r8, r1
 8000850:	1a9c      	subs	r4, r3, r2
 8000852:	e778      	b.n	8000746 <__aeabi_dadd+0xa6>
 8000854:	2a00      	cmp	r2, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x1ba>
 8000858:	e08e      	b.n	8000978 <__aeabi_dadd+0x2d8>
 800085a:	4649      	mov	r1, r9
 800085c:	2900      	cmp	r1, #0
 800085e:	d175      	bne.n	800094c <__aeabi_dadd+0x2ac>
 8000860:	4661      	mov	r1, ip
 8000862:	4653      	mov	r3, sl
 8000864:	4319      	orrs	r1, r3
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x1ca>
 8000868:	e0f6      	b.n	8000a58 <__aeabi_dadd+0x3b8>
 800086a:	1e51      	subs	r1, r2, #1
 800086c:	2a01      	cmp	r2, #1
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0x1d2>
 8000870:	e191      	b.n	8000b96 <__aeabi_dadd+0x4f6>
 8000872:	4d6d      	ldr	r5, [pc, #436]	@ (8000a28 <__aeabi_dadd+0x388>)
 8000874:	42aa      	cmp	r2, r5
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1da>
 8000878:	e0dc      	b.n	8000a34 <__aeabi_dadd+0x394>
 800087a:	2501      	movs	r5, #1
 800087c:	2938      	cmp	r1, #56	@ 0x38
 800087e:	dc14      	bgt.n	80008aa <__aeabi_dadd+0x20a>
 8000880:	000a      	movs	r2, r1
 8000882:	2a1f      	cmp	r2, #31
 8000884:	dd00      	ble.n	8000888 <__aeabi_dadd+0x1e8>
 8000886:	e1a2      	b.n	8000bce <__aeabi_dadd+0x52e>
 8000888:	2120      	movs	r1, #32
 800088a:	4653      	mov	r3, sl
 800088c:	1a89      	subs	r1, r1, r2
 800088e:	408b      	lsls	r3, r1
 8000890:	001d      	movs	r5, r3
 8000892:	4663      	mov	r3, ip
 8000894:	40d3      	lsrs	r3, r2
 8000896:	431d      	orrs	r5, r3
 8000898:	4663      	mov	r3, ip
 800089a:	408b      	lsls	r3, r1
 800089c:	0019      	movs	r1, r3
 800089e:	1e4b      	subs	r3, r1, #1
 80008a0:	4199      	sbcs	r1, r3
 80008a2:	4653      	mov	r3, sl
 80008a4:	40d3      	lsrs	r3, r2
 80008a6:	430d      	orrs	r5, r1
 80008a8:	18e4      	adds	r4, r4, r3
 80008aa:	182d      	adds	r5, r5, r0
 80008ac:	4285      	cmp	r5, r0
 80008ae:	4180      	sbcs	r0, r0
 80008b0:	4240      	negs	r0, r0
 80008b2:	1824      	adds	r4, r4, r0
 80008b4:	0223      	lsls	r3, r4, #8
 80008b6:	d559      	bpl.n	800096c <__aeabi_dadd+0x2cc>
 80008b8:	4b5b      	ldr	r3, [pc, #364]	@ (8000a28 <__aeabi_dadd+0x388>)
 80008ba:	3701      	adds	r7, #1
 80008bc:	429f      	cmp	r7, r3
 80008be:	d051      	beq.n	8000964 <__aeabi_dadd+0x2c4>
 80008c0:	2101      	movs	r1, #1
 80008c2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a2c <__aeabi_dadd+0x38c>)
 80008c4:	086a      	lsrs	r2, r5, #1
 80008c6:	401c      	ands	r4, r3
 80008c8:	4029      	ands	r1, r5
 80008ca:	430a      	orrs	r2, r1
 80008cc:	07e5      	lsls	r5, r4, #31
 80008ce:	4315      	orrs	r5, r2
 80008d0:	0864      	lsrs	r4, r4, #1
 80008d2:	e75f      	b.n	8000794 <__aeabi_dadd+0xf4>
 80008d4:	4661      	mov	r1, ip
 80008d6:	4653      	mov	r3, sl
 80008d8:	4319      	orrs	r1, r3
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x23e>
 80008dc:	e0bc      	b.n	8000a58 <__aeabi_dadd+0x3b8>
 80008de:	1e51      	subs	r1, r2, #1
 80008e0:	2a01      	cmp	r2, #1
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x246>
 80008e4:	e164      	b.n	8000bb0 <__aeabi_dadd+0x510>
 80008e6:	4d50      	ldr	r5, [pc, #320]	@ (8000a28 <__aeabi_dadd+0x388>)
 80008e8:	42aa      	cmp	r2, r5
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x24e>
 80008ec:	e16a      	b.n	8000bc4 <__aeabi_dadd+0x524>
 80008ee:	2501      	movs	r5, #1
 80008f0:	2938      	cmp	r1, #56	@ 0x38
 80008f2:	dd00      	ble.n	80008f6 <__aeabi_dadd+0x256>
 80008f4:	e722      	b.n	800073c <__aeabi_dadd+0x9c>
 80008f6:	000a      	movs	r2, r1
 80008f8:	e70e      	b.n	8000718 <__aeabi_dadd+0x78>
 80008fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000a30 <__aeabi_dadd+0x390>)
 80008fc:	1c7d      	adds	r5, r7, #1
 80008fe:	4215      	tst	r5, r2
 8000900:	d000      	beq.n	8000904 <__aeabi_dadd+0x264>
 8000902:	e0d0      	b.n	8000aa6 <__aeabi_dadd+0x406>
 8000904:	0025      	movs	r5, r4
 8000906:	4662      	mov	r2, ip
 8000908:	4653      	mov	r3, sl
 800090a:	4305      	orrs	r5, r0
 800090c:	431a      	orrs	r2, r3
 800090e:	2f00      	cmp	r7, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_dadd+0x274>
 8000912:	e137      	b.n	8000b84 <__aeabi_dadd+0x4e4>
 8000914:	2d00      	cmp	r5, #0
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x27a>
 8000918:	e1a8      	b.n	8000c6c <__aeabi_dadd+0x5cc>
 800091a:	2a00      	cmp	r2, #0
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x280>
 800091e:	e16a      	b.n	8000bf6 <__aeabi_dadd+0x556>
 8000920:	4663      	mov	r3, ip
 8000922:	1ac5      	subs	r5, r0, r3
 8000924:	4653      	mov	r3, sl
 8000926:	1ae2      	subs	r2, r4, r3
 8000928:	42a8      	cmp	r0, r5
 800092a:	419b      	sbcs	r3, r3
 800092c:	425b      	negs	r3, r3
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	021a      	lsls	r2, r3, #8
 8000932:	d400      	bmi.n	8000936 <__aeabi_dadd+0x296>
 8000934:	e203      	b.n	8000d3e <__aeabi_dadd+0x69e>
 8000936:	4663      	mov	r3, ip
 8000938:	1a1d      	subs	r5, r3, r0
 800093a:	45ac      	cmp	ip, r5
 800093c:	4192      	sbcs	r2, r2
 800093e:	4653      	mov	r3, sl
 8000940:	4252      	negs	r2, r2
 8000942:	1b1c      	subs	r4, r3, r4
 8000944:	000e      	movs	r6, r1
 8000946:	4688      	mov	r8, r1
 8000948:	1aa4      	subs	r4, r4, r2
 800094a:	e723      	b.n	8000794 <__aeabi_dadd+0xf4>
 800094c:	4936      	ldr	r1, [pc, #216]	@ (8000a28 <__aeabi_dadd+0x388>)
 800094e:	428f      	cmp	r7, r1
 8000950:	d070      	beq.n	8000a34 <__aeabi_dadd+0x394>
 8000952:	2501      	movs	r5, #1
 8000954:	2a38      	cmp	r2, #56	@ 0x38
 8000956:	dca8      	bgt.n	80008aa <__aeabi_dadd+0x20a>
 8000958:	2180      	movs	r1, #128	@ 0x80
 800095a:	4653      	mov	r3, sl
 800095c:	0409      	lsls	r1, r1, #16
 800095e:	430b      	orrs	r3, r1
 8000960:	469a      	mov	sl, r3
 8000962:	e78e      	b.n	8000882 <__aeabi_dadd+0x1e2>
 8000964:	003c      	movs	r4, r7
 8000966:	2500      	movs	r5, #0
 8000968:	2200      	movs	r2, #0
 800096a:	e731      	b.n	80007d0 <__aeabi_dadd+0x130>
 800096c:	2307      	movs	r3, #7
 800096e:	402b      	ands	r3, r5
 8000970:	2b00      	cmp	r3, #0
 8000972:	d000      	beq.n	8000976 <__aeabi_dadd+0x2d6>
 8000974:	e710      	b.n	8000798 <__aeabi_dadd+0xf8>
 8000976:	e093      	b.n	8000aa0 <__aeabi_dadd+0x400>
 8000978:	2a00      	cmp	r2, #0
 800097a:	d074      	beq.n	8000a66 <__aeabi_dadd+0x3c6>
 800097c:	464a      	mov	r2, r9
 800097e:	1bd2      	subs	r2, r2, r7
 8000980:	2f00      	cmp	r7, #0
 8000982:	d100      	bne.n	8000986 <__aeabi_dadd+0x2e6>
 8000984:	e0c7      	b.n	8000b16 <__aeabi_dadd+0x476>
 8000986:	4928      	ldr	r1, [pc, #160]	@ (8000a28 <__aeabi_dadd+0x388>)
 8000988:	4589      	cmp	r9, r1
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x2ee>
 800098c:	e185      	b.n	8000c9a <__aeabi_dadd+0x5fa>
 800098e:	2501      	movs	r5, #1
 8000990:	2a38      	cmp	r2, #56	@ 0x38
 8000992:	dc12      	bgt.n	80009ba <__aeabi_dadd+0x31a>
 8000994:	2180      	movs	r1, #128	@ 0x80
 8000996:	0409      	lsls	r1, r1, #16
 8000998:	430c      	orrs	r4, r1
 800099a:	2a1f      	cmp	r2, #31
 800099c:	dd00      	ble.n	80009a0 <__aeabi_dadd+0x300>
 800099e:	e1ab      	b.n	8000cf8 <__aeabi_dadd+0x658>
 80009a0:	2120      	movs	r1, #32
 80009a2:	0025      	movs	r5, r4
 80009a4:	1a89      	subs	r1, r1, r2
 80009a6:	0007      	movs	r7, r0
 80009a8:	4088      	lsls	r0, r1
 80009aa:	408d      	lsls	r5, r1
 80009ac:	40d7      	lsrs	r7, r2
 80009ae:	1e41      	subs	r1, r0, #1
 80009b0:	4188      	sbcs	r0, r1
 80009b2:	40d4      	lsrs	r4, r2
 80009b4:	433d      	orrs	r5, r7
 80009b6:	4305      	orrs	r5, r0
 80009b8:	44a2      	add	sl, r4
 80009ba:	4465      	add	r5, ip
 80009bc:	4565      	cmp	r5, ip
 80009be:	4192      	sbcs	r2, r2
 80009c0:	4252      	negs	r2, r2
 80009c2:	4452      	add	r2, sl
 80009c4:	0014      	movs	r4, r2
 80009c6:	464f      	mov	r7, r9
 80009c8:	e774      	b.n	80008b4 <__aeabi_dadd+0x214>
 80009ca:	0028      	movs	r0, r5
 80009cc:	f001 fdf0 	bl	80025b0 <__clzsi2>
 80009d0:	0003      	movs	r3, r0
 80009d2:	3318      	adds	r3, #24
 80009d4:	2b1f      	cmp	r3, #31
 80009d6:	dc00      	bgt.n	80009da <__aeabi_dadd+0x33a>
 80009d8:	e6c2      	b.n	8000760 <__aeabi_dadd+0xc0>
 80009da:	002a      	movs	r2, r5
 80009dc:	3808      	subs	r0, #8
 80009de:	4082      	lsls	r2, r0
 80009e0:	429f      	cmp	r7, r3
 80009e2:	dd00      	ble.n	80009e6 <__aeabi_dadd+0x346>
 80009e4:	e0a9      	b.n	8000b3a <__aeabi_dadd+0x49a>
 80009e6:	1bdb      	subs	r3, r3, r7
 80009e8:	1c58      	adds	r0, r3, #1
 80009ea:	281f      	cmp	r0, #31
 80009ec:	dc00      	bgt.n	80009f0 <__aeabi_dadd+0x350>
 80009ee:	e1ac      	b.n	8000d4a <__aeabi_dadd+0x6aa>
 80009f0:	0015      	movs	r5, r2
 80009f2:	3b1f      	subs	r3, #31
 80009f4:	40dd      	lsrs	r5, r3
 80009f6:	2820      	cmp	r0, #32
 80009f8:	d005      	beq.n	8000a06 <__aeabi_dadd+0x366>
 80009fa:	2340      	movs	r3, #64	@ 0x40
 80009fc:	1a1b      	subs	r3, r3, r0
 80009fe:	409a      	lsls	r2, r3
 8000a00:	1e53      	subs	r3, r2, #1
 8000a02:	419a      	sbcs	r2, r3
 8000a04:	4315      	orrs	r5, r2
 8000a06:	2307      	movs	r3, #7
 8000a08:	2700      	movs	r7, #0
 8000a0a:	402b      	ands	r3, r5
 8000a0c:	e7b0      	b.n	8000970 <__aeabi_dadd+0x2d0>
 8000a0e:	08ed      	lsrs	r5, r5, #3
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <__aeabi_dadd+0x388>)
 8000a12:	0762      	lsls	r2, r4, #29
 8000a14:	432a      	orrs	r2, r5
 8000a16:	08e4      	lsrs	r4, r4, #3
 8000a18:	429f      	cmp	r7, r3
 8000a1a:	d00f      	beq.n	8000a3c <__aeabi_dadd+0x39c>
 8000a1c:	0324      	lsls	r4, r4, #12
 8000a1e:	0b25      	lsrs	r5, r4, #12
 8000a20:	057c      	lsls	r4, r7, #21
 8000a22:	0d64      	lsrs	r4, r4, #21
 8000a24:	e6d4      	b.n	80007d0 <__aeabi_dadd+0x130>
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	000007ff 	.word	0x000007ff
 8000a2c:	ff7fffff 	.word	0xff7fffff
 8000a30:	000007fe 	.word	0x000007fe
 8000a34:	08c0      	lsrs	r0, r0, #3
 8000a36:	0762      	lsls	r2, r4, #29
 8000a38:	4302      	orrs	r2, r0
 8000a3a:	08e4      	lsrs	r4, r4, #3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	4323      	orrs	r3, r4
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x3a4>
 8000a42:	e186      	b.n	8000d52 <__aeabi_dadd+0x6b2>
 8000a44:	2580      	movs	r5, #128	@ 0x80
 8000a46:	032d      	lsls	r5, r5, #12
 8000a48:	4325      	orrs	r5, r4
 8000a4a:	032d      	lsls	r5, r5, #12
 8000a4c:	4cc3      	ldr	r4, [pc, #780]	@ (8000d5c <__aeabi_dadd+0x6bc>)
 8000a4e:	0b2d      	lsrs	r5, r5, #12
 8000a50:	e6be      	b.n	80007d0 <__aeabi_dadd+0x130>
 8000a52:	4660      	mov	r0, ip
 8000a54:	4654      	mov	r4, sl
 8000a56:	000e      	movs	r6, r1
 8000a58:	0017      	movs	r7, r2
 8000a5a:	08c5      	lsrs	r5, r0, #3
 8000a5c:	e7d8      	b.n	8000a10 <__aeabi_dadd+0x370>
 8000a5e:	4cc0      	ldr	r4, [pc, #768]	@ (8000d60 <__aeabi_dadd+0x6c0>)
 8000a60:	1aff      	subs	r7, r7, r3
 8000a62:	4014      	ands	r4, r2
 8000a64:	e696      	b.n	8000794 <__aeabi_dadd+0xf4>
 8000a66:	4abf      	ldr	r2, [pc, #764]	@ (8000d64 <__aeabi_dadd+0x6c4>)
 8000a68:	1c79      	adds	r1, r7, #1
 8000a6a:	4211      	tst	r1, r2
 8000a6c:	d16b      	bne.n	8000b46 <__aeabi_dadd+0x4a6>
 8000a6e:	0022      	movs	r2, r4
 8000a70:	4302      	orrs	r2, r0
 8000a72:	2f00      	cmp	r7, #0
 8000a74:	d000      	beq.n	8000a78 <__aeabi_dadd+0x3d8>
 8000a76:	e0db      	b.n	8000c30 <__aeabi_dadd+0x590>
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dadd+0x3de>
 8000a7c:	e12d      	b.n	8000cda <__aeabi_dadd+0x63a>
 8000a7e:	4662      	mov	r2, ip
 8000a80:	4653      	mov	r3, sl
 8000a82:	431a      	orrs	r2, r3
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0x3e8>
 8000a86:	e0b6      	b.n	8000bf6 <__aeabi_dadd+0x556>
 8000a88:	4663      	mov	r3, ip
 8000a8a:	18c5      	adds	r5, r0, r3
 8000a8c:	4285      	cmp	r5, r0
 8000a8e:	4180      	sbcs	r0, r0
 8000a90:	4454      	add	r4, sl
 8000a92:	4240      	negs	r0, r0
 8000a94:	1824      	adds	r4, r4, r0
 8000a96:	0223      	lsls	r3, r4, #8
 8000a98:	d502      	bpl.n	8000aa0 <__aeabi_dadd+0x400>
 8000a9a:	000f      	movs	r7, r1
 8000a9c:	4bb0      	ldr	r3, [pc, #704]	@ (8000d60 <__aeabi_dadd+0x6c0>)
 8000a9e:	401c      	ands	r4, r3
 8000aa0:	003a      	movs	r2, r7
 8000aa2:	0028      	movs	r0, r5
 8000aa4:	e7d8      	b.n	8000a58 <__aeabi_dadd+0x3b8>
 8000aa6:	4662      	mov	r2, ip
 8000aa8:	1a85      	subs	r5, r0, r2
 8000aaa:	42a8      	cmp	r0, r5
 8000aac:	4192      	sbcs	r2, r2
 8000aae:	4653      	mov	r3, sl
 8000ab0:	4252      	negs	r2, r2
 8000ab2:	4691      	mov	r9, r2
 8000ab4:	1ae3      	subs	r3, r4, r3
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	464b      	mov	r3, r9
 8000aba:	1ad2      	subs	r2, r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	4691      	mov	r9, r2
 8000ac0:	021a      	lsls	r2, r3, #8
 8000ac2:	d454      	bmi.n	8000b6e <__aeabi_dadd+0x4ce>
 8000ac4:	464a      	mov	r2, r9
 8000ac6:	464c      	mov	r4, r9
 8000ac8:	432a      	orrs	r2, r5
 8000aca:	d000      	beq.n	8000ace <__aeabi_dadd+0x42e>
 8000acc:	e640      	b.n	8000750 <__aeabi_dadd+0xb0>
 8000ace:	2600      	movs	r6, #0
 8000ad0:	2400      	movs	r4, #0
 8000ad2:	2500      	movs	r5, #0
 8000ad4:	e67c      	b.n	80007d0 <__aeabi_dadd+0x130>
 8000ad6:	4da1      	ldr	r5, [pc, #644]	@ (8000d5c <__aeabi_dadd+0x6bc>)
 8000ad8:	45a9      	cmp	r9, r5
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x43e>
 8000adc:	e090      	b.n	8000c00 <__aeabi_dadd+0x560>
 8000ade:	2501      	movs	r5, #1
 8000ae0:	2a38      	cmp	r2, #56	@ 0x38
 8000ae2:	dd00      	ble.n	8000ae6 <__aeabi_dadd+0x446>
 8000ae4:	e6ab      	b.n	800083e <__aeabi_dadd+0x19e>
 8000ae6:	2580      	movs	r5, #128	@ 0x80
 8000ae8:	042d      	lsls	r5, r5, #16
 8000aea:	432c      	orrs	r4, r5
 8000aec:	e695      	b.n	800081a <__aeabi_dadd+0x17a>
 8000aee:	0011      	movs	r1, r2
 8000af0:	4655      	mov	r5, sl
 8000af2:	3920      	subs	r1, #32
 8000af4:	40cd      	lsrs	r5, r1
 8000af6:	46a9      	mov	r9, r5
 8000af8:	2a20      	cmp	r2, #32
 8000afa:	d006      	beq.n	8000b0a <__aeabi_dadd+0x46a>
 8000afc:	2140      	movs	r1, #64	@ 0x40
 8000afe:	4653      	mov	r3, sl
 8000b00:	1a8a      	subs	r2, r1, r2
 8000b02:	4093      	lsls	r3, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	431a      	orrs	r2, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	4665      	mov	r5, ip
 8000b0c:	1e6b      	subs	r3, r5, #1
 8000b0e:	419d      	sbcs	r5, r3
 8000b10:	464b      	mov	r3, r9
 8000b12:	431d      	orrs	r5, r3
 8000b14:	e612      	b.n	800073c <__aeabi_dadd+0x9c>
 8000b16:	0021      	movs	r1, r4
 8000b18:	4301      	orrs	r1, r0
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x47e>
 8000b1c:	e0c4      	b.n	8000ca8 <__aeabi_dadd+0x608>
 8000b1e:	1e51      	subs	r1, r2, #1
 8000b20:	2a01      	cmp	r2, #1
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x486>
 8000b24:	e0fb      	b.n	8000d1e <__aeabi_dadd+0x67e>
 8000b26:	4d8d      	ldr	r5, [pc, #564]	@ (8000d5c <__aeabi_dadd+0x6bc>)
 8000b28:	42aa      	cmp	r2, r5
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x48e>
 8000b2c:	e0b5      	b.n	8000c9a <__aeabi_dadd+0x5fa>
 8000b2e:	2501      	movs	r5, #1
 8000b30:	2938      	cmp	r1, #56	@ 0x38
 8000b32:	dd00      	ble.n	8000b36 <__aeabi_dadd+0x496>
 8000b34:	e741      	b.n	80009ba <__aeabi_dadd+0x31a>
 8000b36:	000a      	movs	r2, r1
 8000b38:	e72f      	b.n	800099a <__aeabi_dadd+0x2fa>
 8000b3a:	4c89      	ldr	r4, [pc, #548]	@ (8000d60 <__aeabi_dadd+0x6c0>)
 8000b3c:	1aff      	subs	r7, r7, r3
 8000b3e:	4014      	ands	r4, r2
 8000b40:	0762      	lsls	r2, r4, #29
 8000b42:	08e4      	lsrs	r4, r4, #3
 8000b44:	e76a      	b.n	8000a1c <__aeabi_dadd+0x37c>
 8000b46:	4a85      	ldr	r2, [pc, #532]	@ (8000d5c <__aeabi_dadd+0x6bc>)
 8000b48:	4291      	cmp	r1, r2
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x4ae>
 8000b4c:	e0e3      	b.n	8000d16 <__aeabi_dadd+0x676>
 8000b4e:	4663      	mov	r3, ip
 8000b50:	18c2      	adds	r2, r0, r3
 8000b52:	4282      	cmp	r2, r0
 8000b54:	4180      	sbcs	r0, r0
 8000b56:	0023      	movs	r3, r4
 8000b58:	4240      	negs	r0, r0
 8000b5a:	4453      	add	r3, sl
 8000b5c:	181b      	adds	r3, r3, r0
 8000b5e:	07dd      	lsls	r5, r3, #31
 8000b60:	085c      	lsrs	r4, r3, #1
 8000b62:	2307      	movs	r3, #7
 8000b64:	0852      	lsrs	r2, r2, #1
 8000b66:	4315      	orrs	r5, r2
 8000b68:	000f      	movs	r7, r1
 8000b6a:	402b      	ands	r3, r5
 8000b6c:	e700      	b.n	8000970 <__aeabi_dadd+0x2d0>
 8000b6e:	4663      	mov	r3, ip
 8000b70:	1a1d      	subs	r5, r3, r0
 8000b72:	45ac      	cmp	ip, r5
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	4653      	mov	r3, sl
 8000b78:	4252      	negs	r2, r2
 8000b7a:	1b1c      	subs	r4, r3, r4
 8000b7c:	000e      	movs	r6, r1
 8000b7e:	4688      	mov	r8, r1
 8000b80:	1aa4      	subs	r4, r4, r2
 8000b82:	e5e5      	b.n	8000750 <__aeabi_dadd+0xb0>
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x4ea>
 8000b88:	e091      	b.n	8000cae <__aeabi_dadd+0x60e>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d138      	bne.n	8000c00 <__aeabi_dadd+0x560>
 8000b8e:	2480      	movs	r4, #128	@ 0x80
 8000b90:	2600      	movs	r6, #0
 8000b92:	0324      	lsls	r4, r4, #12
 8000b94:	e756      	b.n	8000a44 <__aeabi_dadd+0x3a4>
 8000b96:	4663      	mov	r3, ip
 8000b98:	18c5      	adds	r5, r0, r3
 8000b9a:	4285      	cmp	r5, r0
 8000b9c:	4180      	sbcs	r0, r0
 8000b9e:	4454      	add	r4, sl
 8000ba0:	4240      	negs	r0, r0
 8000ba2:	1824      	adds	r4, r4, r0
 8000ba4:	2701      	movs	r7, #1
 8000ba6:	0223      	lsls	r3, r4, #8
 8000ba8:	d400      	bmi.n	8000bac <__aeabi_dadd+0x50c>
 8000baa:	e6df      	b.n	800096c <__aeabi_dadd+0x2cc>
 8000bac:	2702      	movs	r7, #2
 8000bae:	e687      	b.n	80008c0 <__aeabi_dadd+0x220>
 8000bb0:	4663      	mov	r3, ip
 8000bb2:	1ac5      	subs	r5, r0, r3
 8000bb4:	42a8      	cmp	r0, r5
 8000bb6:	4180      	sbcs	r0, r0
 8000bb8:	4653      	mov	r3, sl
 8000bba:	4240      	negs	r0, r0
 8000bbc:	1ae4      	subs	r4, r4, r3
 8000bbe:	2701      	movs	r7, #1
 8000bc0:	1a24      	subs	r4, r4, r0
 8000bc2:	e5c0      	b.n	8000746 <__aeabi_dadd+0xa6>
 8000bc4:	0762      	lsls	r2, r4, #29
 8000bc6:	08c0      	lsrs	r0, r0, #3
 8000bc8:	4302      	orrs	r2, r0
 8000bca:	08e4      	lsrs	r4, r4, #3
 8000bcc:	e736      	b.n	8000a3c <__aeabi_dadd+0x39c>
 8000bce:	0011      	movs	r1, r2
 8000bd0:	4653      	mov	r3, sl
 8000bd2:	3920      	subs	r1, #32
 8000bd4:	40cb      	lsrs	r3, r1
 8000bd6:	4699      	mov	r9, r3
 8000bd8:	2a20      	cmp	r2, #32
 8000bda:	d006      	beq.n	8000bea <__aeabi_dadd+0x54a>
 8000bdc:	2140      	movs	r1, #64	@ 0x40
 8000bde:	4653      	mov	r3, sl
 8000be0:	1a8a      	subs	r2, r1, r2
 8000be2:	4093      	lsls	r3, r2
 8000be4:	4662      	mov	r2, ip
 8000be6:	431a      	orrs	r2, r3
 8000be8:	4694      	mov	ip, r2
 8000bea:	4665      	mov	r5, ip
 8000bec:	1e6b      	subs	r3, r5, #1
 8000bee:	419d      	sbcs	r5, r3
 8000bf0:	464b      	mov	r3, r9
 8000bf2:	431d      	orrs	r5, r3
 8000bf4:	e659      	b.n	80008aa <__aeabi_dadd+0x20a>
 8000bf6:	0762      	lsls	r2, r4, #29
 8000bf8:	08c0      	lsrs	r0, r0, #3
 8000bfa:	4302      	orrs	r2, r0
 8000bfc:	08e4      	lsrs	r4, r4, #3
 8000bfe:	e70d      	b.n	8000a1c <__aeabi_dadd+0x37c>
 8000c00:	4653      	mov	r3, sl
 8000c02:	075a      	lsls	r2, r3, #29
 8000c04:	4663      	mov	r3, ip
 8000c06:	08d8      	lsrs	r0, r3, #3
 8000c08:	4653      	mov	r3, sl
 8000c0a:	000e      	movs	r6, r1
 8000c0c:	4302      	orrs	r2, r0
 8000c0e:	08dc      	lsrs	r4, r3, #3
 8000c10:	e714      	b.n	8000a3c <__aeabi_dadd+0x39c>
 8000c12:	0015      	movs	r5, r2
 8000c14:	0026      	movs	r6, r4
 8000c16:	3d20      	subs	r5, #32
 8000c18:	40ee      	lsrs	r6, r5
 8000c1a:	2a20      	cmp	r2, #32
 8000c1c:	d003      	beq.n	8000c26 <__aeabi_dadd+0x586>
 8000c1e:	2540      	movs	r5, #64	@ 0x40
 8000c20:	1aaa      	subs	r2, r5, r2
 8000c22:	4094      	lsls	r4, r2
 8000c24:	4320      	orrs	r0, r4
 8000c26:	1e42      	subs	r2, r0, #1
 8000c28:	4190      	sbcs	r0, r2
 8000c2a:	0005      	movs	r5, r0
 8000c2c:	4335      	orrs	r5, r6
 8000c2e:	e606      	b.n	800083e <__aeabi_dadd+0x19e>
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	d07c      	beq.n	8000d2e <__aeabi_dadd+0x68e>
 8000c34:	4662      	mov	r2, ip
 8000c36:	4653      	mov	r3, sl
 8000c38:	08c0      	lsrs	r0, r0, #3
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dadd+0x5a0>
 8000c3e:	e6fa      	b.n	8000a36 <__aeabi_dadd+0x396>
 8000c40:	0762      	lsls	r2, r4, #29
 8000c42:	4310      	orrs	r0, r2
 8000c44:	2280      	movs	r2, #128	@ 0x80
 8000c46:	08e4      	lsrs	r4, r4, #3
 8000c48:	0312      	lsls	r2, r2, #12
 8000c4a:	4214      	tst	r4, r2
 8000c4c:	d008      	beq.n	8000c60 <__aeabi_dadd+0x5c0>
 8000c4e:	08d9      	lsrs	r1, r3, #3
 8000c50:	4211      	tst	r1, r2
 8000c52:	d105      	bne.n	8000c60 <__aeabi_dadd+0x5c0>
 8000c54:	4663      	mov	r3, ip
 8000c56:	08d8      	lsrs	r0, r3, #3
 8000c58:	4653      	mov	r3, sl
 8000c5a:	000c      	movs	r4, r1
 8000c5c:	075b      	lsls	r3, r3, #29
 8000c5e:	4318      	orrs	r0, r3
 8000c60:	0f42      	lsrs	r2, r0, #29
 8000c62:	00c0      	lsls	r0, r0, #3
 8000c64:	08c0      	lsrs	r0, r0, #3
 8000c66:	0752      	lsls	r2, r2, #29
 8000c68:	4302      	orrs	r2, r0
 8000c6a:	e6e7      	b.n	8000a3c <__aeabi_dadd+0x39c>
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dadd+0x5d2>
 8000c70:	e72d      	b.n	8000ace <__aeabi_dadd+0x42e>
 8000c72:	4663      	mov	r3, ip
 8000c74:	08d8      	lsrs	r0, r3, #3
 8000c76:	4653      	mov	r3, sl
 8000c78:	075a      	lsls	r2, r3, #29
 8000c7a:	000e      	movs	r6, r1
 8000c7c:	4302      	orrs	r2, r0
 8000c7e:	08dc      	lsrs	r4, r3, #3
 8000c80:	e6cc      	b.n	8000a1c <__aeabi_dadd+0x37c>
 8000c82:	4663      	mov	r3, ip
 8000c84:	1a1d      	subs	r5, r3, r0
 8000c86:	45ac      	cmp	ip, r5
 8000c88:	4192      	sbcs	r2, r2
 8000c8a:	4653      	mov	r3, sl
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	1b1c      	subs	r4, r3, r4
 8000c90:	000e      	movs	r6, r1
 8000c92:	4688      	mov	r8, r1
 8000c94:	1aa4      	subs	r4, r4, r2
 8000c96:	3701      	adds	r7, #1
 8000c98:	e555      	b.n	8000746 <__aeabi_dadd+0xa6>
 8000c9a:	4663      	mov	r3, ip
 8000c9c:	08d9      	lsrs	r1, r3, #3
 8000c9e:	4653      	mov	r3, sl
 8000ca0:	075a      	lsls	r2, r3, #29
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	08dc      	lsrs	r4, r3, #3
 8000ca6:	e6c9      	b.n	8000a3c <__aeabi_dadd+0x39c>
 8000ca8:	4660      	mov	r0, ip
 8000caa:	4654      	mov	r4, sl
 8000cac:	e6d4      	b.n	8000a58 <__aeabi_dadd+0x3b8>
 8000cae:	08c0      	lsrs	r0, r0, #3
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x616>
 8000cb4:	e6bf      	b.n	8000a36 <__aeabi_dadd+0x396>
 8000cb6:	0762      	lsls	r2, r4, #29
 8000cb8:	4310      	orrs	r0, r2
 8000cba:	2280      	movs	r2, #128	@ 0x80
 8000cbc:	08e4      	lsrs	r4, r4, #3
 8000cbe:	0312      	lsls	r2, r2, #12
 8000cc0:	4214      	tst	r4, r2
 8000cc2:	d0cd      	beq.n	8000c60 <__aeabi_dadd+0x5c0>
 8000cc4:	08dd      	lsrs	r5, r3, #3
 8000cc6:	4215      	tst	r5, r2
 8000cc8:	d1ca      	bne.n	8000c60 <__aeabi_dadd+0x5c0>
 8000cca:	4663      	mov	r3, ip
 8000ccc:	08d8      	lsrs	r0, r3, #3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	075b      	lsls	r3, r3, #29
 8000cd2:	000e      	movs	r6, r1
 8000cd4:	002c      	movs	r4, r5
 8000cd6:	4318      	orrs	r0, r3
 8000cd8:	e7c2      	b.n	8000c60 <__aeabi_dadd+0x5c0>
 8000cda:	4663      	mov	r3, ip
 8000cdc:	08d9      	lsrs	r1, r3, #3
 8000cde:	4653      	mov	r3, sl
 8000ce0:	075a      	lsls	r2, r3, #29
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	08dc      	lsrs	r4, r3, #3
 8000ce6:	e699      	b.n	8000a1c <__aeabi_dadd+0x37c>
 8000ce8:	4663      	mov	r3, ip
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	4653      	mov	r3, sl
 8000cee:	075a      	lsls	r2, r3, #29
 8000cf0:	000e      	movs	r6, r1
 8000cf2:	4302      	orrs	r2, r0
 8000cf4:	08dc      	lsrs	r4, r3, #3
 8000cf6:	e6a1      	b.n	8000a3c <__aeabi_dadd+0x39c>
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	0027      	movs	r7, r4
 8000cfc:	3920      	subs	r1, #32
 8000cfe:	40cf      	lsrs	r7, r1
 8000d00:	2a20      	cmp	r2, #32
 8000d02:	d003      	beq.n	8000d0c <__aeabi_dadd+0x66c>
 8000d04:	2140      	movs	r1, #64	@ 0x40
 8000d06:	1a8a      	subs	r2, r1, r2
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	4320      	orrs	r0, r4
 8000d0c:	1e42      	subs	r2, r0, #1
 8000d0e:	4190      	sbcs	r0, r2
 8000d10:	0005      	movs	r5, r0
 8000d12:	433d      	orrs	r5, r7
 8000d14:	e651      	b.n	80009ba <__aeabi_dadd+0x31a>
 8000d16:	000c      	movs	r4, r1
 8000d18:	2500      	movs	r5, #0
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	e558      	b.n	80007d0 <__aeabi_dadd+0x130>
 8000d1e:	4460      	add	r0, ip
 8000d20:	4560      	cmp	r0, ip
 8000d22:	4192      	sbcs	r2, r2
 8000d24:	4454      	add	r4, sl
 8000d26:	4252      	negs	r2, r2
 8000d28:	0005      	movs	r5, r0
 8000d2a:	18a4      	adds	r4, r4, r2
 8000d2c:	e73a      	b.n	8000ba4 <__aeabi_dadd+0x504>
 8000d2e:	4653      	mov	r3, sl
 8000d30:	075a      	lsls	r2, r3, #29
 8000d32:	4663      	mov	r3, ip
 8000d34:	08d9      	lsrs	r1, r3, #3
 8000d36:	4653      	mov	r3, sl
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	08dc      	lsrs	r4, r3, #3
 8000d3c:	e67e      	b.n	8000a3c <__aeabi_dadd+0x39c>
 8000d3e:	001a      	movs	r2, r3
 8000d40:	001c      	movs	r4, r3
 8000d42:	432a      	orrs	r2, r5
 8000d44:	d000      	beq.n	8000d48 <__aeabi_dadd+0x6a8>
 8000d46:	e6ab      	b.n	8000aa0 <__aeabi_dadd+0x400>
 8000d48:	e6c1      	b.n	8000ace <__aeabi_dadd+0x42e>
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	2500      	movs	r5, #0
 8000d4e:	1a09      	subs	r1, r1, r0
 8000d50:	e519      	b.n	8000786 <__aeabi_dadd+0xe6>
 8000d52:	2200      	movs	r2, #0
 8000d54:	2500      	movs	r5, #0
 8000d56:	4c01      	ldr	r4, [pc, #4]	@ (8000d5c <__aeabi_dadd+0x6bc>)
 8000d58:	e53a      	b.n	80007d0 <__aeabi_dadd+0x130>
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	000007ff 	.word	0x000007ff
 8000d60:	ff7fffff 	.word	0xff7fffff
 8000d64:	000007fe 	.word	0x000007fe

08000d68 <__aeabi_ddiv>:
 8000d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6a:	46de      	mov	lr, fp
 8000d6c:	4645      	mov	r5, r8
 8000d6e:	4657      	mov	r7, sl
 8000d70:	464e      	mov	r6, r9
 8000d72:	b5e0      	push	{r5, r6, r7, lr}
 8000d74:	b087      	sub	sp, #28
 8000d76:	9200      	str	r2, [sp, #0]
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	030b      	lsls	r3, r1, #12
 8000d7c:	0b1b      	lsrs	r3, r3, #12
 8000d7e:	469b      	mov	fp, r3
 8000d80:	0fca      	lsrs	r2, r1, #31
 8000d82:	004b      	lsls	r3, r1, #1
 8000d84:	0004      	movs	r4, r0
 8000d86:	4680      	mov	r8, r0
 8000d88:	0d5b      	lsrs	r3, r3, #21
 8000d8a:	9202      	str	r2, [sp, #8]
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_ddiv+0x28>
 8000d8e:	e16a      	b.n	8001066 <__aeabi_ddiv+0x2fe>
 8000d90:	4ad4      	ldr	r2, [pc, #848]	@ (80010e4 <__aeabi_ddiv+0x37c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x30>
 8000d96:	e18c      	b.n	80010b2 <__aeabi_ddiv+0x34a>
 8000d98:	4659      	mov	r1, fp
 8000d9a:	0f42      	lsrs	r2, r0, #29
 8000d9c:	00c9      	lsls	r1, r1, #3
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	2180      	movs	r1, #128	@ 0x80
 8000da2:	0409      	lsls	r1, r1, #16
 8000da4:	4311      	orrs	r1, r2
 8000da6:	00c2      	lsls	r2, r0, #3
 8000da8:	4690      	mov	r8, r2
 8000daa:	4acf      	ldr	r2, [pc, #828]	@ (80010e8 <__aeabi_ddiv+0x380>)
 8000dac:	4689      	mov	r9, r1
 8000dae:	4692      	mov	sl, r2
 8000db0:	449a      	add	sl, r3
 8000db2:	2300      	movs	r3, #0
 8000db4:	2400      	movs	r4, #0
 8000db6:	9303      	str	r3, [sp, #12]
 8000db8:	9e00      	ldr	r6, [sp, #0]
 8000dba:	9f01      	ldr	r7, [sp, #4]
 8000dbc:	033b      	lsls	r3, r7, #12
 8000dbe:	0b1b      	lsrs	r3, r3, #12
 8000dc0:	469b      	mov	fp, r3
 8000dc2:	007b      	lsls	r3, r7, #1
 8000dc4:	0030      	movs	r0, r6
 8000dc6:	0d5b      	lsrs	r3, r3, #21
 8000dc8:	0ffd      	lsrs	r5, r7, #31
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0x68>
 8000dce:	e128      	b.n	8001022 <__aeabi_ddiv+0x2ba>
 8000dd0:	4ac4      	ldr	r2, [pc, #784]	@ (80010e4 <__aeabi_ddiv+0x37c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_ddiv+0x70>
 8000dd6:	e177      	b.n	80010c8 <__aeabi_ddiv+0x360>
 8000dd8:	4659      	mov	r1, fp
 8000dda:	0f72      	lsrs	r2, r6, #29
 8000ddc:	00c9      	lsls	r1, r1, #3
 8000dde:	430a      	orrs	r2, r1
 8000de0:	2180      	movs	r1, #128	@ 0x80
 8000de2:	0409      	lsls	r1, r1, #16
 8000de4:	4311      	orrs	r1, r2
 8000de6:	468b      	mov	fp, r1
 8000de8:	49bf      	ldr	r1, [pc, #764]	@ (80010e8 <__aeabi_ddiv+0x380>)
 8000dea:	00f2      	lsls	r2, r6, #3
 8000dec:	468c      	mov	ip, r1
 8000dee:	4651      	mov	r1, sl
 8000df0:	4463      	add	r3, ip
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	469a      	mov	sl, r3
 8000df6:	2300      	movs	r3, #0
 8000df8:	9e02      	ldr	r6, [sp, #8]
 8000dfa:	406e      	eors	r6, r5
 8000dfc:	2c0f      	cmp	r4, #15
 8000dfe:	d827      	bhi.n	8000e50 <__aeabi_ddiv+0xe8>
 8000e00:	49ba      	ldr	r1, [pc, #744]	@ (80010ec <__aeabi_ddiv+0x384>)
 8000e02:	00a4      	lsls	r4, r4, #2
 8000e04:	5909      	ldr	r1, [r1, r4]
 8000e06:	468f      	mov	pc, r1
 8000e08:	46cb      	mov	fp, r9
 8000e0a:	4642      	mov	r2, r8
 8000e0c:	9e02      	ldr	r6, [sp, #8]
 8000e0e:	9b03      	ldr	r3, [sp, #12]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d016      	beq.n	8000e42 <__aeabi_ddiv+0xda>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d100      	bne.n	8000e1a <__aeabi_ddiv+0xb2>
 8000e18:	e2a6      	b.n	8001368 <__aeabi_ddiv+0x600>
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d000      	beq.n	8000e20 <__aeabi_ddiv+0xb8>
 8000e1e:	e0df      	b.n	8000fe0 <__aeabi_ddiv+0x278>
 8000e20:	2200      	movs	r2, #0
 8000e22:	2300      	movs	r3, #0
 8000e24:	2400      	movs	r4, #0
 8000e26:	4690      	mov	r8, r2
 8000e28:	051b      	lsls	r3, r3, #20
 8000e2a:	4323      	orrs	r3, r4
 8000e2c:	07f6      	lsls	r6, r6, #31
 8000e2e:	4333      	orrs	r3, r6
 8000e30:	4640      	mov	r0, r8
 8000e32:	0019      	movs	r1, r3
 8000e34:	b007      	add	sp, #28
 8000e36:	bcf0      	pop	{r4, r5, r6, r7}
 8000e38:	46bb      	mov	fp, r7
 8000e3a:	46b2      	mov	sl, r6
 8000e3c:	46a9      	mov	r9, r5
 8000e3e:	46a0      	mov	r8, r4
 8000e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e42:	2200      	movs	r2, #0
 8000e44:	2400      	movs	r4, #0
 8000e46:	4690      	mov	r8, r2
 8000e48:	4ba6      	ldr	r3, [pc, #664]	@ (80010e4 <__aeabi_ddiv+0x37c>)
 8000e4a:	e7ed      	b.n	8000e28 <__aeabi_ddiv+0xc0>
 8000e4c:	002e      	movs	r6, r5
 8000e4e:	e7df      	b.n	8000e10 <__aeabi_ddiv+0xa8>
 8000e50:	45cb      	cmp	fp, r9
 8000e52:	d200      	bcs.n	8000e56 <__aeabi_ddiv+0xee>
 8000e54:	e1d4      	b.n	8001200 <__aeabi_ddiv+0x498>
 8000e56:	d100      	bne.n	8000e5a <__aeabi_ddiv+0xf2>
 8000e58:	e1cf      	b.n	80011fa <__aeabi_ddiv+0x492>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	469c      	mov	ip, r3
 8000e60:	4644      	mov	r4, r8
 8000e62:	4648      	mov	r0, r9
 8000e64:	2700      	movs	r7, #0
 8000e66:	44e2      	add	sl, ip
 8000e68:	465b      	mov	r3, fp
 8000e6a:	0e15      	lsrs	r5, r2, #24
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	431d      	orrs	r5, r3
 8000e70:	0c19      	lsrs	r1, r3, #16
 8000e72:	042b      	lsls	r3, r5, #16
 8000e74:	0212      	lsls	r2, r2, #8
 8000e76:	9500      	str	r5, [sp, #0]
 8000e78:	0c1d      	lsrs	r5, r3, #16
 8000e7a:	4691      	mov	r9, r2
 8000e7c:	9102      	str	r1, [sp, #8]
 8000e7e:	9503      	str	r5, [sp, #12]
 8000e80:	f7ff f9e0 	bl	8000244 <__aeabi_uidivmod>
 8000e84:	0002      	movs	r2, r0
 8000e86:	436a      	muls	r2, r5
 8000e88:	040b      	lsls	r3, r1, #16
 8000e8a:	0c21      	lsrs	r1, r4, #16
 8000e8c:	4680      	mov	r8, r0
 8000e8e:	4319      	orrs	r1, r3
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d909      	bls.n	8000ea8 <__aeabi_ddiv+0x140>
 8000e94:	9d00      	ldr	r5, [sp, #0]
 8000e96:	2301      	movs	r3, #1
 8000e98:	46ac      	mov	ip, r5
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	4461      	add	r1, ip
 8000e9e:	469c      	mov	ip, r3
 8000ea0:	44e0      	add	r8, ip
 8000ea2:	428d      	cmp	r5, r1
 8000ea4:	d800      	bhi.n	8000ea8 <__aeabi_ddiv+0x140>
 8000ea6:	e1fb      	b.n	80012a0 <__aeabi_ddiv+0x538>
 8000ea8:	1a88      	subs	r0, r1, r2
 8000eaa:	9902      	ldr	r1, [sp, #8]
 8000eac:	f7ff f9ca 	bl	8000244 <__aeabi_uidivmod>
 8000eb0:	9a03      	ldr	r2, [sp, #12]
 8000eb2:	0424      	lsls	r4, r4, #16
 8000eb4:	4342      	muls	r2, r0
 8000eb6:	0409      	lsls	r1, r1, #16
 8000eb8:	0c24      	lsrs	r4, r4, #16
 8000eba:	0003      	movs	r3, r0
 8000ebc:	430c      	orrs	r4, r1
 8000ebe:	42a2      	cmp	r2, r4
 8000ec0:	d906      	bls.n	8000ed0 <__aeabi_ddiv+0x168>
 8000ec2:	9900      	ldr	r1, [sp, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	4464      	add	r4, ip
 8000eca:	42a1      	cmp	r1, r4
 8000ecc:	d800      	bhi.n	8000ed0 <__aeabi_ddiv+0x168>
 8000ece:	e1e1      	b.n	8001294 <__aeabi_ddiv+0x52c>
 8000ed0:	1aa0      	subs	r0, r4, r2
 8000ed2:	4642      	mov	r2, r8
 8000ed4:	0412      	lsls	r2, r2, #16
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	4693      	mov	fp, r2
 8000eda:	464b      	mov	r3, r9
 8000edc:	4659      	mov	r1, fp
 8000ede:	0c1b      	lsrs	r3, r3, #16
 8000ee0:	001d      	movs	r5, r3
 8000ee2:	9304      	str	r3, [sp, #16]
 8000ee4:	040b      	lsls	r3, r1, #16
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	0409      	lsls	r1, r1, #16
 8000eea:	0c09      	lsrs	r1, r1, #16
 8000eec:	000c      	movs	r4, r1
 8000eee:	0c1b      	lsrs	r3, r3, #16
 8000ef0:	435c      	muls	r4, r3
 8000ef2:	0c12      	lsrs	r2, r2, #16
 8000ef4:	436b      	muls	r3, r5
 8000ef6:	4688      	mov	r8, r1
 8000ef8:	4351      	muls	r1, r2
 8000efa:	436a      	muls	r2, r5
 8000efc:	0c25      	lsrs	r5, r4, #16
 8000efe:	46ac      	mov	ip, r5
 8000f00:	185b      	adds	r3, r3, r1
 8000f02:	4463      	add	r3, ip
 8000f04:	4299      	cmp	r1, r3
 8000f06:	d903      	bls.n	8000f10 <__aeabi_ddiv+0x1a8>
 8000f08:	2180      	movs	r1, #128	@ 0x80
 8000f0a:	0249      	lsls	r1, r1, #9
 8000f0c:	468c      	mov	ip, r1
 8000f0e:	4462      	add	r2, ip
 8000f10:	0c19      	lsrs	r1, r3, #16
 8000f12:	0424      	lsls	r4, r4, #16
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	0c24      	lsrs	r4, r4, #16
 8000f18:	188a      	adds	r2, r1, r2
 8000f1a:	191c      	adds	r4, r3, r4
 8000f1c:	4290      	cmp	r0, r2
 8000f1e:	d302      	bcc.n	8000f26 <__aeabi_ddiv+0x1be>
 8000f20:	d116      	bne.n	8000f50 <__aeabi_ddiv+0x1e8>
 8000f22:	42a7      	cmp	r7, r4
 8000f24:	d214      	bcs.n	8000f50 <__aeabi_ddiv+0x1e8>
 8000f26:	465b      	mov	r3, fp
 8000f28:	9d00      	ldr	r5, [sp, #0]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	444f      	add	r7, r9
 8000f2e:	9305      	str	r3, [sp, #20]
 8000f30:	454f      	cmp	r7, r9
 8000f32:	419b      	sbcs	r3, r3
 8000f34:	46ac      	mov	ip, r5
 8000f36:	425b      	negs	r3, r3
 8000f38:	4463      	add	r3, ip
 8000f3a:	18c0      	adds	r0, r0, r3
 8000f3c:	4285      	cmp	r5, r0
 8000f3e:	d300      	bcc.n	8000f42 <__aeabi_ddiv+0x1da>
 8000f40:	e1a1      	b.n	8001286 <__aeabi_ddiv+0x51e>
 8000f42:	4282      	cmp	r2, r0
 8000f44:	d900      	bls.n	8000f48 <__aeabi_ddiv+0x1e0>
 8000f46:	e1f6      	b.n	8001336 <__aeabi_ddiv+0x5ce>
 8000f48:	d100      	bne.n	8000f4c <__aeabi_ddiv+0x1e4>
 8000f4a:	e1f1      	b.n	8001330 <__aeabi_ddiv+0x5c8>
 8000f4c:	9b05      	ldr	r3, [sp, #20]
 8000f4e:	469b      	mov	fp, r3
 8000f50:	1b3c      	subs	r4, r7, r4
 8000f52:	42a7      	cmp	r7, r4
 8000f54:	41bf      	sbcs	r7, r7
 8000f56:	9d00      	ldr	r5, [sp, #0]
 8000f58:	1a80      	subs	r0, r0, r2
 8000f5a:	427f      	negs	r7, r7
 8000f5c:	1bc0      	subs	r0, r0, r7
 8000f5e:	4285      	cmp	r5, r0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x1fc>
 8000f62:	e1d0      	b.n	8001306 <__aeabi_ddiv+0x59e>
 8000f64:	9902      	ldr	r1, [sp, #8]
 8000f66:	f7ff f96d 	bl	8000244 <__aeabi_uidivmod>
 8000f6a:	9a03      	ldr	r2, [sp, #12]
 8000f6c:	040b      	lsls	r3, r1, #16
 8000f6e:	4342      	muls	r2, r0
 8000f70:	0c21      	lsrs	r1, r4, #16
 8000f72:	0007      	movs	r7, r0
 8000f74:	4319      	orrs	r1, r3
 8000f76:	428a      	cmp	r2, r1
 8000f78:	d900      	bls.n	8000f7c <__aeabi_ddiv+0x214>
 8000f7a:	e178      	b.n	800126e <__aeabi_ddiv+0x506>
 8000f7c:	1a88      	subs	r0, r1, r2
 8000f7e:	9902      	ldr	r1, [sp, #8]
 8000f80:	f7ff f960 	bl	8000244 <__aeabi_uidivmod>
 8000f84:	9a03      	ldr	r2, [sp, #12]
 8000f86:	0424      	lsls	r4, r4, #16
 8000f88:	4342      	muls	r2, r0
 8000f8a:	0409      	lsls	r1, r1, #16
 8000f8c:	0c24      	lsrs	r4, r4, #16
 8000f8e:	0003      	movs	r3, r0
 8000f90:	430c      	orrs	r4, r1
 8000f92:	42a2      	cmp	r2, r4
 8000f94:	d900      	bls.n	8000f98 <__aeabi_ddiv+0x230>
 8000f96:	e15d      	b.n	8001254 <__aeabi_ddiv+0x4ec>
 8000f98:	4641      	mov	r1, r8
 8000f9a:	1aa4      	subs	r4, r4, r2
 8000f9c:	043a      	lsls	r2, r7, #16
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	9d04      	ldr	r5, [sp, #16]
 8000fa2:	0413      	lsls	r3, r2, #16
 8000fa4:	0c1b      	lsrs	r3, r3, #16
 8000fa6:	4359      	muls	r1, r3
 8000fa8:	4647      	mov	r7, r8
 8000faa:	436b      	muls	r3, r5
 8000fac:	469c      	mov	ip, r3
 8000fae:	0c10      	lsrs	r0, r2, #16
 8000fb0:	4347      	muls	r7, r0
 8000fb2:	0c0b      	lsrs	r3, r1, #16
 8000fb4:	44bc      	add	ip, r7
 8000fb6:	4463      	add	r3, ip
 8000fb8:	4368      	muls	r0, r5
 8000fba:	429f      	cmp	r7, r3
 8000fbc:	d903      	bls.n	8000fc6 <__aeabi_ddiv+0x25e>
 8000fbe:	2580      	movs	r5, #128	@ 0x80
 8000fc0:	026d      	lsls	r5, r5, #9
 8000fc2:	46ac      	mov	ip, r5
 8000fc4:	4460      	add	r0, ip
 8000fc6:	0c1f      	lsrs	r7, r3, #16
 8000fc8:	0409      	lsls	r1, r1, #16
 8000fca:	041b      	lsls	r3, r3, #16
 8000fcc:	0c09      	lsrs	r1, r1, #16
 8000fce:	183f      	adds	r7, r7, r0
 8000fd0:	185b      	adds	r3, r3, r1
 8000fd2:	42bc      	cmp	r4, r7
 8000fd4:	d200      	bcs.n	8000fd8 <__aeabi_ddiv+0x270>
 8000fd6:	e102      	b.n	80011de <__aeabi_ddiv+0x476>
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x274>
 8000fda:	e0fd      	b.n	80011d8 <__aeabi_ddiv+0x470>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	4b43      	ldr	r3, [pc, #268]	@ (80010f0 <__aeabi_ddiv+0x388>)
 8000fe2:	4453      	add	r3, sl
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dc00      	bgt.n	8000fea <__aeabi_ddiv+0x282>
 8000fe8:	e0ae      	b.n	8001148 <__aeabi_ddiv+0x3e0>
 8000fea:	0751      	lsls	r1, r2, #29
 8000fec:	d000      	beq.n	8000ff0 <__aeabi_ddiv+0x288>
 8000fee:	e198      	b.n	8001322 <__aeabi_ddiv+0x5ba>
 8000ff0:	4659      	mov	r1, fp
 8000ff2:	01c9      	lsls	r1, r1, #7
 8000ff4:	d506      	bpl.n	8001004 <__aeabi_ddiv+0x29c>
 8000ff6:	4659      	mov	r1, fp
 8000ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80010f4 <__aeabi_ddiv+0x38c>)
 8000ffa:	4019      	ands	r1, r3
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	468b      	mov	fp, r1
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4453      	add	r3, sl
 8001004:	493c      	ldr	r1, [pc, #240]	@ (80010f8 <__aeabi_ddiv+0x390>)
 8001006:	428b      	cmp	r3, r1
 8001008:	dd00      	ble.n	800100c <__aeabi_ddiv+0x2a4>
 800100a:	e71a      	b.n	8000e42 <__aeabi_ddiv+0xda>
 800100c:	4659      	mov	r1, fp
 800100e:	08d2      	lsrs	r2, r2, #3
 8001010:	0749      	lsls	r1, r1, #29
 8001012:	4311      	orrs	r1, r2
 8001014:	465a      	mov	r2, fp
 8001016:	055b      	lsls	r3, r3, #21
 8001018:	0254      	lsls	r4, r2, #9
 800101a:	4688      	mov	r8, r1
 800101c:	0b24      	lsrs	r4, r4, #12
 800101e:	0d5b      	lsrs	r3, r3, #21
 8001020:	e702      	b.n	8000e28 <__aeabi_ddiv+0xc0>
 8001022:	465a      	mov	r2, fp
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	431a      	orrs	r2, r3
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0x2c4>
 800102a:	e07e      	b.n	800112a <__aeabi_ddiv+0x3c2>
 800102c:	465b      	mov	r3, fp
 800102e:	2b00      	cmp	r3, #0
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x2cc>
 8001032:	e100      	b.n	8001236 <__aeabi_ddiv+0x4ce>
 8001034:	4658      	mov	r0, fp
 8001036:	f001 fabb 	bl	80025b0 <__clzsi2>
 800103a:	0002      	movs	r2, r0
 800103c:	0003      	movs	r3, r0
 800103e:	3a0b      	subs	r2, #11
 8001040:	271d      	movs	r7, #29
 8001042:	9e00      	ldr	r6, [sp, #0]
 8001044:	1aba      	subs	r2, r7, r2
 8001046:	0019      	movs	r1, r3
 8001048:	4658      	mov	r0, fp
 800104a:	40d6      	lsrs	r6, r2
 800104c:	3908      	subs	r1, #8
 800104e:	4088      	lsls	r0, r1
 8001050:	0032      	movs	r2, r6
 8001052:	4302      	orrs	r2, r0
 8001054:	4693      	mov	fp, r2
 8001056:	9a00      	ldr	r2, [sp, #0]
 8001058:	408a      	lsls	r2, r1
 800105a:	4928      	ldr	r1, [pc, #160]	@ (80010fc <__aeabi_ddiv+0x394>)
 800105c:	4453      	add	r3, sl
 800105e:	468a      	mov	sl, r1
 8001060:	449a      	add	sl, r3
 8001062:	2300      	movs	r3, #0
 8001064:	e6c8      	b.n	8000df8 <__aeabi_ddiv+0x90>
 8001066:	465b      	mov	r3, fp
 8001068:	4303      	orrs	r3, r0
 800106a:	4699      	mov	r9, r3
 800106c:	d056      	beq.n	800111c <__aeabi_ddiv+0x3b4>
 800106e:	465b      	mov	r3, fp
 8001070:	2b00      	cmp	r3, #0
 8001072:	d100      	bne.n	8001076 <__aeabi_ddiv+0x30e>
 8001074:	e0cd      	b.n	8001212 <__aeabi_ddiv+0x4aa>
 8001076:	4658      	mov	r0, fp
 8001078:	f001 fa9a 	bl	80025b0 <__clzsi2>
 800107c:	230b      	movs	r3, #11
 800107e:	425b      	negs	r3, r3
 8001080:	469c      	mov	ip, r3
 8001082:	0002      	movs	r2, r0
 8001084:	4484      	add	ip, r0
 8001086:	4666      	mov	r6, ip
 8001088:	231d      	movs	r3, #29
 800108a:	1b9b      	subs	r3, r3, r6
 800108c:	0026      	movs	r6, r4
 800108e:	0011      	movs	r1, r2
 8001090:	4658      	mov	r0, fp
 8001092:	40de      	lsrs	r6, r3
 8001094:	3908      	subs	r1, #8
 8001096:	4088      	lsls	r0, r1
 8001098:	0033      	movs	r3, r6
 800109a:	4303      	orrs	r3, r0
 800109c:	4699      	mov	r9, r3
 800109e:	0023      	movs	r3, r4
 80010a0:	408b      	lsls	r3, r1
 80010a2:	4698      	mov	r8, r3
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <__aeabi_ddiv+0x398>)
 80010a6:	2400      	movs	r4, #0
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	469a      	mov	sl, r3
 80010ac:	2300      	movs	r3, #0
 80010ae:	9303      	str	r3, [sp, #12]
 80010b0:	e682      	b.n	8000db8 <__aeabi_ddiv+0x50>
 80010b2:	465a      	mov	r2, fp
 80010b4:	4302      	orrs	r2, r0
 80010b6:	4691      	mov	r9, r2
 80010b8:	d12a      	bne.n	8001110 <__aeabi_ddiv+0x3a8>
 80010ba:	2200      	movs	r2, #0
 80010bc:	469a      	mov	sl, r3
 80010be:	2302      	movs	r3, #2
 80010c0:	4690      	mov	r8, r2
 80010c2:	2408      	movs	r4, #8
 80010c4:	9303      	str	r3, [sp, #12]
 80010c6:	e677      	b.n	8000db8 <__aeabi_ddiv+0x50>
 80010c8:	465a      	mov	r2, fp
 80010ca:	9b00      	ldr	r3, [sp, #0]
 80010cc:	431a      	orrs	r2, r3
 80010ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <__aeabi_ddiv+0x39c>)
 80010d0:	469c      	mov	ip, r3
 80010d2:	44e2      	add	sl, ip
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	d117      	bne.n	8001108 <__aeabi_ddiv+0x3a0>
 80010d8:	2302      	movs	r3, #2
 80010da:	431c      	orrs	r4, r3
 80010dc:	2300      	movs	r3, #0
 80010de:	469b      	mov	fp, r3
 80010e0:	3302      	adds	r3, #2
 80010e2:	e689      	b.n	8000df8 <__aeabi_ddiv+0x90>
 80010e4:	000007ff 	.word	0x000007ff
 80010e8:	fffffc01 	.word	0xfffffc01
 80010ec:	08007e84 	.word	0x08007e84
 80010f0:	000003ff 	.word	0x000003ff
 80010f4:	feffffff 	.word	0xfeffffff
 80010f8:	000007fe 	.word	0x000007fe
 80010fc:	000003f3 	.word	0x000003f3
 8001100:	fffffc0d 	.word	0xfffffc0d
 8001104:	fffff801 	.word	0xfffff801
 8001108:	2303      	movs	r3, #3
 800110a:	0032      	movs	r2, r6
 800110c:	431c      	orrs	r4, r3
 800110e:	e673      	b.n	8000df8 <__aeabi_ddiv+0x90>
 8001110:	469a      	mov	sl, r3
 8001112:	2303      	movs	r3, #3
 8001114:	46d9      	mov	r9, fp
 8001116:	240c      	movs	r4, #12
 8001118:	9303      	str	r3, [sp, #12]
 800111a:	e64d      	b.n	8000db8 <__aeabi_ddiv+0x50>
 800111c:	2300      	movs	r3, #0
 800111e:	4698      	mov	r8, r3
 8001120:	469a      	mov	sl, r3
 8001122:	3301      	adds	r3, #1
 8001124:	2404      	movs	r4, #4
 8001126:	9303      	str	r3, [sp, #12]
 8001128:	e646      	b.n	8000db8 <__aeabi_ddiv+0x50>
 800112a:	2301      	movs	r3, #1
 800112c:	431c      	orrs	r4, r3
 800112e:	2300      	movs	r3, #0
 8001130:	469b      	mov	fp, r3
 8001132:	3301      	adds	r3, #1
 8001134:	e660      	b.n	8000df8 <__aeabi_ddiv+0x90>
 8001136:	2300      	movs	r3, #0
 8001138:	2480      	movs	r4, #128	@ 0x80
 800113a:	4698      	mov	r8, r3
 800113c:	2600      	movs	r6, #0
 800113e:	4b92      	ldr	r3, [pc, #584]	@ (8001388 <__aeabi_ddiv+0x620>)
 8001140:	0324      	lsls	r4, r4, #12
 8001142:	e671      	b.n	8000e28 <__aeabi_ddiv+0xc0>
 8001144:	2201      	movs	r2, #1
 8001146:	4252      	negs	r2, r2
 8001148:	2101      	movs	r1, #1
 800114a:	1ac9      	subs	r1, r1, r3
 800114c:	2938      	cmp	r1, #56	@ 0x38
 800114e:	dd00      	ble.n	8001152 <__aeabi_ddiv+0x3ea>
 8001150:	e666      	b.n	8000e20 <__aeabi_ddiv+0xb8>
 8001152:	291f      	cmp	r1, #31
 8001154:	dc00      	bgt.n	8001158 <__aeabi_ddiv+0x3f0>
 8001156:	e0ab      	b.n	80012b0 <__aeabi_ddiv+0x548>
 8001158:	201f      	movs	r0, #31
 800115a:	4240      	negs	r0, r0
 800115c:	1ac3      	subs	r3, r0, r3
 800115e:	4658      	mov	r0, fp
 8001160:	40d8      	lsrs	r0, r3
 8001162:	0003      	movs	r3, r0
 8001164:	2920      	cmp	r1, #32
 8001166:	d004      	beq.n	8001172 <__aeabi_ddiv+0x40a>
 8001168:	4658      	mov	r0, fp
 800116a:	4988      	ldr	r1, [pc, #544]	@ (800138c <__aeabi_ddiv+0x624>)
 800116c:	4451      	add	r1, sl
 800116e:	4088      	lsls	r0, r1
 8001170:	4302      	orrs	r2, r0
 8001172:	1e51      	subs	r1, r2, #1
 8001174:	418a      	sbcs	r2, r1
 8001176:	431a      	orrs	r2, r3
 8001178:	2307      	movs	r3, #7
 800117a:	0019      	movs	r1, r3
 800117c:	2400      	movs	r4, #0
 800117e:	4011      	ands	r1, r2
 8001180:	4213      	tst	r3, r2
 8001182:	d00c      	beq.n	800119e <__aeabi_ddiv+0x436>
 8001184:	230f      	movs	r3, #15
 8001186:	4013      	ands	r3, r2
 8001188:	2b04      	cmp	r3, #4
 800118a:	d100      	bne.n	800118e <__aeabi_ddiv+0x426>
 800118c:	e0f9      	b.n	8001382 <__aeabi_ddiv+0x61a>
 800118e:	1d11      	adds	r1, r2, #4
 8001190:	4291      	cmp	r1, r2
 8001192:	419b      	sbcs	r3, r3
 8001194:	000a      	movs	r2, r1
 8001196:	425b      	negs	r3, r3
 8001198:	0759      	lsls	r1, r3, #29
 800119a:	025b      	lsls	r3, r3, #9
 800119c:	0b1c      	lsrs	r4, r3, #12
 800119e:	08d2      	lsrs	r2, r2, #3
 80011a0:	430a      	orrs	r2, r1
 80011a2:	4690      	mov	r8, r2
 80011a4:	2300      	movs	r3, #0
 80011a6:	e63f      	b.n	8000e28 <__aeabi_ddiv+0xc0>
 80011a8:	2480      	movs	r4, #128	@ 0x80
 80011aa:	464b      	mov	r3, r9
 80011ac:	0324      	lsls	r4, r4, #12
 80011ae:	4223      	tst	r3, r4
 80011b0:	d009      	beq.n	80011c6 <__aeabi_ddiv+0x45e>
 80011b2:	465b      	mov	r3, fp
 80011b4:	4223      	tst	r3, r4
 80011b6:	d106      	bne.n	80011c6 <__aeabi_ddiv+0x45e>
 80011b8:	431c      	orrs	r4, r3
 80011ba:	0324      	lsls	r4, r4, #12
 80011bc:	002e      	movs	r6, r5
 80011be:	4690      	mov	r8, r2
 80011c0:	4b71      	ldr	r3, [pc, #452]	@ (8001388 <__aeabi_ddiv+0x620>)
 80011c2:	0b24      	lsrs	r4, r4, #12
 80011c4:	e630      	b.n	8000e28 <__aeabi_ddiv+0xc0>
 80011c6:	2480      	movs	r4, #128	@ 0x80
 80011c8:	464b      	mov	r3, r9
 80011ca:	0324      	lsls	r4, r4, #12
 80011cc:	431c      	orrs	r4, r3
 80011ce:	0324      	lsls	r4, r4, #12
 80011d0:	9e02      	ldr	r6, [sp, #8]
 80011d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001388 <__aeabi_ddiv+0x620>)
 80011d4:	0b24      	lsrs	r4, r4, #12
 80011d6:	e627      	b.n	8000e28 <__aeabi_ddiv+0xc0>
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d100      	bne.n	80011de <__aeabi_ddiv+0x476>
 80011dc:	e700      	b.n	8000fe0 <__aeabi_ddiv+0x278>
 80011de:	9800      	ldr	r0, [sp, #0]
 80011e0:	1e51      	subs	r1, r2, #1
 80011e2:	4684      	mov	ip, r0
 80011e4:	4464      	add	r4, ip
 80011e6:	4284      	cmp	r4, r0
 80011e8:	d200      	bcs.n	80011ec <__aeabi_ddiv+0x484>
 80011ea:	e084      	b.n	80012f6 <__aeabi_ddiv+0x58e>
 80011ec:	42bc      	cmp	r4, r7
 80011ee:	d200      	bcs.n	80011f2 <__aeabi_ddiv+0x48a>
 80011f0:	e0ae      	b.n	8001350 <__aeabi_ddiv+0x5e8>
 80011f2:	d100      	bne.n	80011f6 <__aeabi_ddiv+0x48e>
 80011f4:	e0c1      	b.n	800137a <__aeabi_ddiv+0x612>
 80011f6:	000a      	movs	r2, r1
 80011f8:	e6f0      	b.n	8000fdc <__aeabi_ddiv+0x274>
 80011fa:	4542      	cmp	r2, r8
 80011fc:	d900      	bls.n	8001200 <__aeabi_ddiv+0x498>
 80011fe:	e62c      	b.n	8000e5a <__aeabi_ddiv+0xf2>
 8001200:	464b      	mov	r3, r9
 8001202:	07dc      	lsls	r4, r3, #31
 8001204:	0858      	lsrs	r0, r3, #1
 8001206:	4643      	mov	r3, r8
 8001208:	085b      	lsrs	r3, r3, #1
 800120a:	431c      	orrs	r4, r3
 800120c:	4643      	mov	r3, r8
 800120e:	07df      	lsls	r7, r3, #31
 8001210:	e62a      	b.n	8000e68 <__aeabi_ddiv+0x100>
 8001212:	f001 f9cd 	bl	80025b0 <__clzsi2>
 8001216:	2315      	movs	r3, #21
 8001218:	469c      	mov	ip, r3
 800121a:	4484      	add	ip, r0
 800121c:	0002      	movs	r2, r0
 800121e:	4663      	mov	r3, ip
 8001220:	3220      	adds	r2, #32
 8001222:	2b1c      	cmp	r3, #28
 8001224:	dc00      	bgt.n	8001228 <__aeabi_ddiv+0x4c0>
 8001226:	e72e      	b.n	8001086 <__aeabi_ddiv+0x31e>
 8001228:	0023      	movs	r3, r4
 800122a:	3808      	subs	r0, #8
 800122c:	4083      	lsls	r3, r0
 800122e:	4699      	mov	r9, r3
 8001230:	2300      	movs	r3, #0
 8001232:	4698      	mov	r8, r3
 8001234:	e736      	b.n	80010a4 <__aeabi_ddiv+0x33c>
 8001236:	f001 f9bb 	bl	80025b0 <__clzsi2>
 800123a:	0002      	movs	r2, r0
 800123c:	0003      	movs	r3, r0
 800123e:	3215      	adds	r2, #21
 8001240:	3320      	adds	r3, #32
 8001242:	2a1c      	cmp	r2, #28
 8001244:	dc00      	bgt.n	8001248 <__aeabi_ddiv+0x4e0>
 8001246:	e6fb      	b.n	8001040 <__aeabi_ddiv+0x2d8>
 8001248:	9900      	ldr	r1, [sp, #0]
 800124a:	3808      	subs	r0, #8
 800124c:	4081      	lsls	r1, r0
 800124e:	2200      	movs	r2, #0
 8001250:	468b      	mov	fp, r1
 8001252:	e702      	b.n	800105a <__aeabi_ddiv+0x2f2>
 8001254:	9900      	ldr	r1, [sp, #0]
 8001256:	3b01      	subs	r3, #1
 8001258:	468c      	mov	ip, r1
 800125a:	4464      	add	r4, ip
 800125c:	42a1      	cmp	r1, r4
 800125e:	d900      	bls.n	8001262 <__aeabi_ddiv+0x4fa>
 8001260:	e69a      	b.n	8000f98 <__aeabi_ddiv+0x230>
 8001262:	42a2      	cmp	r2, r4
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x500>
 8001266:	e697      	b.n	8000f98 <__aeabi_ddiv+0x230>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	4464      	add	r4, ip
 800126c:	e694      	b.n	8000f98 <__aeabi_ddiv+0x230>
 800126e:	46ac      	mov	ip, r5
 8001270:	4461      	add	r1, ip
 8001272:	3f01      	subs	r7, #1
 8001274:	428d      	cmp	r5, r1
 8001276:	d900      	bls.n	800127a <__aeabi_ddiv+0x512>
 8001278:	e680      	b.n	8000f7c <__aeabi_ddiv+0x214>
 800127a:	428a      	cmp	r2, r1
 800127c:	d800      	bhi.n	8001280 <__aeabi_ddiv+0x518>
 800127e:	e67d      	b.n	8000f7c <__aeabi_ddiv+0x214>
 8001280:	1e87      	subs	r7, r0, #2
 8001282:	4461      	add	r1, ip
 8001284:	e67a      	b.n	8000f7c <__aeabi_ddiv+0x214>
 8001286:	4285      	cmp	r5, r0
 8001288:	d000      	beq.n	800128c <__aeabi_ddiv+0x524>
 800128a:	e65f      	b.n	8000f4c <__aeabi_ddiv+0x1e4>
 800128c:	45b9      	cmp	r9, r7
 800128e:	d900      	bls.n	8001292 <__aeabi_ddiv+0x52a>
 8001290:	e65c      	b.n	8000f4c <__aeabi_ddiv+0x1e4>
 8001292:	e656      	b.n	8000f42 <__aeabi_ddiv+0x1da>
 8001294:	42a2      	cmp	r2, r4
 8001296:	d800      	bhi.n	800129a <__aeabi_ddiv+0x532>
 8001298:	e61a      	b.n	8000ed0 <__aeabi_ddiv+0x168>
 800129a:	1e83      	subs	r3, r0, #2
 800129c:	4464      	add	r4, ip
 800129e:	e617      	b.n	8000ed0 <__aeabi_ddiv+0x168>
 80012a0:	428a      	cmp	r2, r1
 80012a2:	d800      	bhi.n	80012a6 <__aeabi_ddiv+0x53e>
 80012a4:	e600      	b.n	8000ea8 <__aeabi_ddiv+0x140>
 80012a6:	46ac      	mov	ip, r5
 80012a8:	1e83      	subs	r3, r0, #2
 80012aa:	4698      	mov	r8, r3
 80012ac:	4461      	add	r1, ip
 80012ae:	e5fb      	b.n	8000ea8 <__aeabi_ddiv+0x140>
 80012b0:	4837      	ldr	r0, [pc, #220]	@ (8001390 <__aeabi_ddiv+0x628>)
 80012b2:	0014      	movs	r4, r2
 80012b4:	4450      	add	r0, sl
 80012b6:	4082      	lsls	r2, r0
 80012b8:	465b      	mov	r3, fp
 80012ba:	0017      	movs	r7, r2
 80012bc:	4083      	lsls	r3, r0
 80012be:	40cc      	lsrs	r4, r1
 80012c0:	1e7a      	subs	r2, r7, #1
 80012c2:	4197      	sbcs	r7, r2
 80012c4:	4323      	orrs	r3, r4
 80012c6:	433b      	orrs	r3, r7
 80012c8:	001a      	movs	r2, r3
 80012ca:	465b      	mov	r3, fp
 80012cc:	40cb      	lsrs	r3, r1
 80012ce:	0751      	lsls	r1, r2, #29
 80012d0:	d009      	beq.n	80012e6 <__aeabi_ddiv+0x57e>
 80012d2:	210f      	movs	r1, #15
 80012d4:	4011      	ands	r1, r2
 80012d6:	2904      	cmp	r1, #4
 80012d8:	d005      	beq.n	80012e6 <__aeabi_ddiv+0x57e>
 80012da:	1d11      	adds	r1, r2, #4
 80012dc:	4291      	cmp	r1, r2
 80012de:	4192      	sbcs	r2, r2
 80012e0:	4252      	negs	r2, r2
 80012e2:	189b      	adds	r3, r3, r2
 80012e4:	000a      	movs	r2, r1
 80012e6:	0219      	lsls	r1, r3, #8
 80012e8:	d400      	bmi.n	80012ec <__aeabi_ddiv+0x584>
 80012ea:	e755      	b.n	8001198 <__aeabi_ddiv+0x430>
 80012ec:	2200      	movs	r2, #0
 80012ee:	2301      	movs	r3, #1
 80012f0:	2400      	movs	r4, #0
 80012f2:	4690      	mov	r8, r2
 80012f4:	e598      	b.n	8000e28 <__aeabi_ddiv+0xc0>
 80012f6:	000a      	movs	r2, r1
 80012f8:	42bc      	cmp	r4, r7
 80012fa:	d000      	beq.n	80012fe <__aeabi_ddiv+0x596>
 80012fc:	e66e      	b.n	8000fdc <__aeabi_ddiv+0x274>
 80012fe:	454b      	cmp	r3, r9
 8001300:	d000      	beq.n	8001304 <__aeabi_ddiv+0x59c>
 8001302:	e66b      	b.n	8000fdc <__aeabi_ddiv+0x274>
 8001304:	e66c      	b.n	8000fe0 <__aeabi_ddiv+0x278>
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <__aeabi_ddiv+0x62c>)
 8001308:	4a23      	ldr	r2, [pc, #140]	@ (8001398 <__aeabi_ddiv+0x630>)
 800130a:	4453      	add	r3, sl
 800130c:	4592      	cmp	sl, r2
 800130e:	da00      	bge.n	8001312 <__aeabi_ddiv+0x5aa>
 8001310:	e718      	b.n	8001144 <__aeabi_ddiv+0x3dc>
 8001312:	2101      	movs	r1, #1
 8001314:	4249      	negs	r1, r1
 8001316:	1d0a      	adds	r2, r1, #4
 8001318:	428a      	cmp	r2, r1
 800131a:	4189      	sbcs	r1, r1
 800131c:	4249      	negs	r1, r1
 800131e:	448b      	add	fp, r1
 8001320:	e666      	b.n	8000ff0 <__aeabi_ddiv+0x288>
 8001322:	210f      	movs	r1, #15
 8001324:	4011      	ands	r1, r2
 8001326:	2904      	cmp	r1, #4
 8001328:	d100      	bne.n	800132c <__aeabi_ddiv+0x5c4>
 800132a:	e661      	b.n	8000ff0 <__aeabi_ddiv+0x288>
 800132c:	0011      	movs	r1, r2
 800132e:	e7f2      	b.n	8001316 <__aeabi_ddiv+0x5ae>
 8001330:	42bc      	cmp	r4, r7
 8001332:	d800      	bhi.n	8001336 <__aeabi_ddiv+0x5ce>
 8001334:	e60a      	b.n	8000f4c <__aeabi_ddiv+0x1e4>
 8001336:	2302      	movs	r3, #2
 8001338:	425b      	negs	r3, r3
 800133a:	469c      	mov	ip, r3
 800133c:	9900      	ldr	r1, [sp, #0]
 800133e:	444f      	add	r7, r9
 8001340:	454f      	cmp	r7, r9
 8001342:	419b      	sbcs	r3, r3
 8001344:	44e3      	add	fp, ip
 8001346:	468c      	mov	ip, r1
 8001348:	425b      	negs	r3, r3
 800134a:	4463      	add	r3, ip
 800134c:	18c0      	adds	r0, r0, r3
 800134e:	e5ff      	b.n	8000f50 <__aeabi_ddiv+0x1e8>
 8001350:	4649      	mov	r1, r9
 8001352:	9d00      	ldr	r5, [sp, #0]
 8001354:	0048      	lsls	r0, r1, #1
 8001356:	4548      	cmp	r0, r9
 8001358:	4189      	sbcs	r1, r1
 800135a:	46ac      	mov	ip, r5
 800135c:	4249      	negs	r1, r1
 800135e:	4461      	add	r1, ip
 8001360:	4681      	mov	r9, r0
 8001362:	3a02      	subs	r2, #2
 8001364:	1864      	adds	r4, r4, r1
 8001366:	e7c7      	b.n	80012f8 <__aeabi_ddiv+0x590>
 8001368:	2480      	movs	r4, #128	@ 0x80
 800136a:	465b      	mov	r3, fp
 800136c:	0324      	lsls	r4, r4, #12
 800136e:	431c      	orrs	r4, r3
 8001370:	0324      	lsls	r4, r4, #12
 8001372:	4690      	mov	r8, r2
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <__aeabi_ddiv+0x620>)
 8001376:	0b24      	lsrs	r4, r4, #12
 8001378:	e556      	b.n	8000e28 <__aeabi_ddiv+0xc0>
 800137a:	4599      	cmp	r9, r3
 800137c:	d3e8      	bcc.n	8001350 <__aeabi_ddiv+0x5e8>
 800137e:	000a      	movs	r2, r1
 8001380:	e7bd      	b.n	80012fe <__aeabi_ddiv+0x596>
 8001382:	2300      	movs	r3, #0
 8001384:	e708      	b.n	8001198 <__aeabi_ddiv+0x430>
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	000007ff 	.word	0x000007ff
 800138c:	0000043e 	.word	0x0000043e
 8001390:	0000041e 	.word	0x0000041e
 8001394:	000003ff 	.word	0x000003ff
 8001398:	fffffc02 	.word	0xfffffc02

0800139c <__eqdf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	4657      	mov	r7, sl
 80013a0:	46de      	mov	lr, fp
 80013a2:	464e      	mov	r6, r9
 80013a4:	4645      	mov	r5, r8
 80013a6:	b5e0      	push	{r5, r6, r7, lr}
 80013a8:	000d      	movs	r5, r1
 80013aa:	0004      	movs	r4, r0
 80013ac:	0fe8      	lsrs	r0, r5, #31
 80013ae:	4683      	mov	fp, r0
 80013b0:	0309      	lsls	r1, r1, #12
 80013b2:	0fd8      	lsrs	r0, r3, #31
 80013b4:	0b09      	lsrs	r1, r1, #12
 80013b6:	4682      	mov	sl, r0
 80013b8:	4819      	ldr	r0, [pc, #100]	@ (8001420 <__eqdf2+0x84>)
 80013ba:	468c      	mov	ip, r1
 80013bc:	031f      	lsls	r7, r3, #12
 80013be:	0069      	lsls	r1, r5, #1
 80013c0:	005e      	lsls	r6, r3, #1
 80013c2:	0d49      	lsrs	r1, r1, #21
 80013c4:	0b3f      	lsrs	r7, r7, #12
 80013c6:	0d76      	lsrs	r6, r6, #21
 80013c8:	4281      	cmp	r1, r0
 80013ca:	d018      	beq.n	80013fe <__eqdf2+0x62>
 80013cc:	4286      	cmp	r6, r0
 80013ce:	d00f      	beq.n	80013f0 <__eqdf2+0x54>
 80013d0:	2001      	movs	r0, #1
 80013d2:	42b1      	cmp	r1, r6
 80013d4:	d10d      	bne.n	80013f2 <__eqdf2+0x56>
 80013d6:	45bc      	cmp	ip, r7
 80013d8:	d10b      	bne.n	80013f2 <__eqdf2+0x56>
 80013da:	4294      	cmp	r4, r2
 80013dc:	d109      	bne.n	80013f2 <__eqdf2+0x56>
 80013de:	45d3      	cmp	fp, sl
 80013e0:	d01c      	beq.n	800141c <__eqdf2+0x80>
 80013e2:	2900      	cmp	r1, #0
 80013e4:	d105      	bne.n	80013f2 <__eqdf2+0x56>
 80013e6:	4660      	mov	r0, ip
 80013e8:	4320      	orrs	r0, r4
 80013ea:	1e43      	subs	r3, r0, #1
 80013ec:	4198      	sbcs	r0, r3
 80013ee:	e000      	b.n	80013f2 <__eqdf2+0x56>
 80013f0:	2001      	movs	r0, #1
 80013f2:	bcf0      	pop	{r4, r5, r6, r7}
 80013f4:	46bb      	mov	fp, r7
 80013f6:	46b2      	mov	sl, r6
 80013f8:	46a9      	mov	r9, r5
 80013fa:	46a0      	mov	r8, r4
 80013fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fe:	2001      	movs	r0, #1
 8001400:	428e      	cmp	r6, r1
 8001402:	d1f6      	bne.n	80013f2 <__eqdf2+0x56>
 8001404:	4661      	mov	r1, ip
 8001406:	4339      	orrs	r1, r7
 8001408:	000f      	movs	r7, r1
 800140a:	4317      	orrs	r7, r2
 800140c:	4327      	orrs	r7, r4
 800140e:	d1f0      	bne.n	80013f2 <__eqdf2+0x56>
 8001410:	465b      	mov	r3, fp
 8001412:	4652      	mov	r2, sl
 8001414:	1a98      	subs	r0, r3, r2
 8001416:	1e43      	subs	r3, r0, #1
 8001418:	4198      	sbcs	r0, r3
 800141a:	e7ea      	b.n	80013f2 <__eqdf2+0x56>
 800141c:	2000      	movs	r0, #0
 800141e:	e7e8      	b.n	80013f2 <__eqdf2+0x56>
 8001420:	000007ff 	.word	0x000007ff

08001424 <__gedf2>:
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001426:	4657      	mov	r7, sl
 8001428:	464e      	mov	r6, r9
 800142a:	4645      	mov	r5, r8
 800142c:	46de      	mov	lr, fp
 800142e:	b5e0      	push	{r5, r6, r7, lr}
 8001430:	000d      	movs	r5, r1
 8001432:	030f      	lsls	r7, r1, #12
 8001434:	0b39      	lsrs	r1, r7, #12
 8001436:	b083      	sub	sp, #12
 8001438:	0004      	movs	r4, r0
 800143a:	4680      	mov	r8, r0
 800143c:	9101      	str	r1, [sp, #4]
 800143e:	0058      	lsls	r0, r3, #1
 8001440:	0fe9      	lsrs	r1, r5, #31
 8001442:	4f31      	ldr	r7, [pc, #196]	@ (8001508 <__gedf2+0xe4>)
 8001444:	0d40      	lsrs	r0, r0, #21
 8001446:	468c      	mov	ip, r1
 8001448:	006e      	lsls	r6, r5, #1
 800144a:	0319      	lsls	r1, r3, #12
 800144c:	4682      	mov	sl, r0
 800144e:	4691      	mov	r9, r2
 8001450:	0d76      	lsrs	r6, r6, #21
 8001452:	0b09      	lsrs	r1, r1, #12
 8001454:	0fd8      	lsrs	r0, r3, #31
 8001456:	42be      	cmp	r6, r7
 8001458:	d01f      	beq.n	800149a <__gedf2+0x76>
 800145a:	45ba      	cmp	sl, r7
 800145c:	d00f      	beq.n	800147e <__gedf2+0x5a>
 800145e:	2e00      	cmp	r6, #0
 8001460:	d12f      	bne.n	80014c2 <__gedf2+0x9e>
 8001462:	4655      	mov	r5, sl
 8001464:	9e01      	ldr	r6, [sp, #4]
 8001466:	4334      	orrs	r4, r6
 8001468:	2d00      	cmp	r5, #0
 800146a:	d127      	bne.n	80014bc <__gedf2+0x98>
 800146c:	430a      	orrs	r2, r1
 800146e:	d03a      	beq.n	80014e6 <__gedf2+0xc2>
 8001470:	2c00      	cmp	r4, #0
 8001472:	d145      	bne.n	8001500 <__gedf2+0xdc>
 8001474:	2800      	cmp	r0, #0
 8001476:	d11a      	bne.n	80014ae <__gedf2+0x8a>
 8001478:	2001      	movs	r0, #1
 800147a:	4240      	negs	r0, r0
 800147c:	e017      	b.n	80014ae <__gedf2+0x8a>
 800147e:	4311      	orrs	r1, r2
 8001480:	d13b      	bne.n	80014fa <__gedf2+0xd6>
 8001482:	2e00      	cmp	r6, #0
 8001484:	d102      	bne.n	800148c <__gedf2+0x68>
 8001486:	9f01      	ldr	r7, [sp, #4]
 8001488:	4327      	orrs	r7, r4
 800148a:	d0f3      	beq.n	8001474 <__gedf2+0x50>
 800148c:	4584      	cmp	ip, r0
 800148e:	d109      	bne.n	80014a4 <__gedf2+0x80>
 8001490:	4663      	mov	r3, ip
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <__gedf2+0x54>
 8001496:	4660      	mov	r0, ip
 8001498:	e009      	b.n	80014ae <__gedf2+0x8a>
 800149a:	9f01      	ldr	r7, [sp, #4]
 800149c:	4327      	orrs	r7, r4
 800149e:	d12c      	bne.n	80014fa <__gedf2+0xd6>
 80014a0:	45b2      	cmp	sl, r6
 80014a2:	d024      	beq.n	80014ee <__gedf2+0xca>
 80014a4:	4663      	mov	r3, ip
 80014a6:	2002      	movs	r0, #2
 80014a8:	3b01      	subs	r3, #1
 80014aa:	4018      	ands	r0, r3
 80014ac:	3801      	subs	r0, #1
 80014ae:	b003      	add	sp, #12
 80014b0:	bcf0      	pop	{r4, r5, r6, r7}
 80014b2:	46bb      	mov	fp, r7
 80014b4:	46b2      	mov	sl, r6
 80014b6:	46a9      	mov	r9, r5
 80014b8:	46a0      	mov	r8, r4
 80014ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014bc:	2c00      	cmp	r4, #0
 80014be:	d0d9      	beq.n	8001474 <__gedf2+0x50>
 80014c0:	e7e4      	b.n	800148c <__gedf2+0x68>
 80014c2:	4654      	mov	r4, sl
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d0ed      	beq.n	80014a4 <__gedf2+0x80>
 80014c8:	4584      	cmp	ip, r0
 80014ca:	d1eb      	bne.n	80014a4 <__gedf2+0x80>
 80014cc:	4556      	cmp	r6, sl
 80014ce:	dce9      	bgt.n	80014a4 <__gedf2+0x80>
 80014d0:	dbde      	blt.n	8001490 <__gedf2+0x6c>
 80014d2:	9b01      	ldr	r3, [sp, #4]
 80014d4:	428b      	cmp	r3, r1
 80014d6:	d8e5      	bhi.n	80014a4 <__gedf2+0x80>
 80014d8:	d1da      	bne.n	8001490 <__gedf2+0x6c>
 80014da:	45c8      	cmp	r8, r9
 80014dc:	d8e2      	bhi.n	80014a4 <__gedf2+0x80>
 80014de:	2000      	movs	r0, #0
 80014e0:	45c8      	cmp	r8, r9
 80014e2:	d2e4      	bcs.n	80014ae <__gedf2+0x8a>
 80014e4:	e7d4      	b.n	8001490 <__gedf2+0x6c>
 80014e6:	2000      	movs	r0, #0
 80014e8:	2c00      	cmp	r4, #0
 80014ea:	d0e0      	beq.n	80014ae <__gedf2+0x8a>
 80014ec:	e7da      	b.n	80014a4 <__gedf2+0x80>
 80014ee:	4311      	orrs	r1, r2
 80014f0:	d103      	bne.n	80014fa <__gedf2+0xd6>
 80014f2:	4584      	cmp	ip, r0
 80014f4:	d1d6      	bne.n	80014a4 <__gedf2+0x80>
 80014f6:	2000      	movs	r0, #0
 80014f8:	e7d9      	b.n	80014ae <__gedf2+0x8a>
 80014fa:	2002      	movs	r0, #2
 80014fc:	4240      	negs	r0, r0
 80014fe:	e7d6      	b.n	80014ae <__gedf2+0x8a>
 8001500:	4584      	cmp	ip, r0
 8001502:	d0e6      	beq.n	80014d2 <__gedf2+0xae>
 8001504:	e7ce      	b.n	80014a4 <__gedf2+0x80>
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	000007ff 	.word	0x000007ff

0800150c <__ledf2>:
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	4657      	mov	r7, sl
 8001510:	464e      	mov	r6, r9
 8001512:	4645      	mov	r5, r8
 8001514:	46de      	mov	lr, fp
 8001516:	b5e0      	push	{r5, r6, r7, lr}
 8001518:	000d      	movs	r5, r1
 800151a:	030f      	lsls	r7, r1, #12
 800151c:	0004      	movs	r4, r0
 800151e:	4680      	mov	r8, r0
 8001520:	0fe8      	lsrs	r0, r5, #31
 8001522:	0b39      	lsrs	r1, r7, #12
 8001524:	4684      	mov	ip, r0
 8001526:	b083      	sub	sp, #12
 8001528:	0058      	lsls	r0, r3, #1
 800152a:	4f30      	ldr	r7, [pc, #192]	@ (80015ec <__ledf2+0xe0>)
 800152c:	0d40      	lsrs	r0, r0, #21
 800152e:	9101      	str	r1, [sp, #4]
 8001530:	031e      	lsls	r6, r3, #12
 8001532:	0069      	lsls	r1, r5, #1
 8001534:	4682      	mov	sl, r0
 8001536:	4691      	mov	r9, r2
 8001538:	0d49      	lsrs	r1, r1, #21
 800153a:	0b36      	lsrs	r6, r6, #12
 800153c:	0fd8      	lsrs	r0, r3, #31
 800153e:	42b9      	cmp	r1, r7
 8001540:	d020      	beq.n	8001584 <__ledf2+0x78>
 8001542:	45ba      	cmp	sl, r7
 8001544:	d00f      	beq.n	8001566 <__ledf2+0x5a>
 8001546:	2900      	cmp	r1, #0
 8001548:	d12b      	bne.n	80015a2 <__ledf2+0x96>
 800154a:	9901      	ldr	r1, [sp, #4]
 800154c:	430c      	orrs	r4, r1
 800154e:	4651      	mov	r1, sl
 8001550:	2900      	cmp	r1, #0
 8001552:	d137      	bne.n	80015c4 <__ledf2+0xb8>
 8001554:	4332      	orrs	r2, r6
 8001556:	d038      	beq.n	80015ca <__ledf2+0xbe>
 8001558:	2c00      	cmp	r4, #0
 800155a:	d144      	bne.n	80015e6 <__ledf2+0xda>
 800155c:	2800      	cmp	r0, #0
 800155e:	d119      	bne.n	8001594 <__ledf2+0x88>
 8001560:	2001      	movs	r0, #1
 8001562:	4240      	negs	r0, r0
 8001564:	e016      	b.n	8001594 <__ledf2+0x88>
 8001566:	4316      	orrs	r6, r2
 8001568:	d113      	bne.n	8001592 <__ledf2+0x86>
 800156a:	2900      	cmp	r1, #0
 800156c:	d102      	bne.n	8001574 <__ledf2+0x68>
 800156e:	9f01      	ldr	r7, [sp, #4]
 8001570:	4327      	orrs	r7, r4
 8001572:	d0f3      	beq.n	800155c <__ledf2+0x50>
 8001574:	4584      	cmp	ip, r0
 8001576:	d020      	beq.n	80015ba <__ledf2+0xae>
 8001578:	4663      	mov	r3, ip
 800157a:	2002      	movs	r0, #2
 800157c:	3b01      	subs	r3, #1
 800157e:	4018      	ands	r0, r3
 8001580:	3801      	subs	r0, #1
 8001582:	e007      	b.n	8001594 <__ledf2+0x88>
 8001584:	9f01      	ldr	r7, [sp, #4]
 8001586:	4327      	orrs	r7, r4
 8001588:	d103      	bne.n	8001592 <__ledf2+0x86>
 800158a:	458a      	cmp	sl, r1
 800158c:	d1f4      	bne.n	8001578 <__ledf2+0x6c>
 800158e:	4316      	orrs	r6, r2
 8001590:	d01f      	beq.n	80015d2 <__ledf2+0xc6>
 8001592:	2002      	movs	r0, #2
 8001594:	b003      	add	sp, #12
 8001596:	bcf0      	pop	{r4, r5, r6, r7}
 8001598:	46bb      	mov	fp, r7
 800159a:	46b2      	mov	sl, r6
 800159c:	46a9      	mov	r9, r5
 800159e:	46a0      	mov	r8, r4
 80015a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a2:	4654      	mov	r4, sl
 80015a4:	2c00      	cmp	r4, #0
 80015a6:	d0e7      	beq.n	8001578 <__ledf2+0x6c>
 80015a8:	4584      	cmp	ip, r0
 80015aa:	d1e5      	bne.n	8001578 <__ledf2+0x6c>
 80015ac:	4551      	cmp	r1, sl
 80015ae:	dce3      	bgt.n	8001578 <__ledf2+0x6c>
 80015b0:	db03      	blt.n	80015ba <__ledf2+0xae>
 80015b2:	9b01      	ldr	r3, [sp, #4]
 80015b4:	42b3      	cmp	r3, r6
 80015b6:	d8df      	bhi.n	8001578 <__ledf2+0x6c>
 80015b8:	d00f      	beq.n	80015da <__ledf2+0xce>
 80015ba:	4663      	mov	r3, ip
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0cf      	beq.n	8001560 <__ledf2+0x54>
 80015c0:	4660      	mov	r0, ip
 80015c2:	e7e7      	b.n	8001594 <__ledf2+0x88>
 80015c4:	2c00      	cmp	r4, #0
 80015c6:	d0c9      	beq.n	800155c <__ledf2+0x50>
 80015c8:	e7d4      	b.n	8001574 <__ledf2+0x68>
 80015ca:	2000      	movs	r0, #0
 80015cc:	2c00      	cmp	r4, #0
 80015ce:	d0e1      	beq.n	8001594 <__ledf2+0x88>
 80015d0:	e7d2      	b.n	8001578 <__ledf2+0x6c>
 80015d2:	4584      	cmp	ip, r0
 80015d4:	d1d0      	bne.n	8001578 <__ledf2+0x6c>
 80015d6:	2000      	movs	r0, #0
 80015d8:	e7dc      	b.n	8001594 <__ledf2+0x88>
 80015da:	45c8      	cmp	r8, r9
 80015dc:	d8cc      	bhi.n	8001578 <__ledf2+0x6c>
 80015de:	2000      	movs	r0, #0
 80015e0:	45c8      	cmp	r8, r9
 80015e2:	d2d7      	bcs.n	8001594 <__ledf2+0x88>
 80015e4:	e7e9      	b.n	80015ba <__ledf2+0xae>
 80015e6:	4584      	cmp	ip, r0
 80015e8:	d0e3      	beq.n	80015b2 <__ledf2+0xa6>
 80015ea:	e7c5      	b.n	8001578 <__ledf2+0x6c>
 80015ec:	000007ff 	.word	0x000007ff

080015f0 <__aeabi_dmul>:
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	4657      	mov	r7, sl
 80015f4:	46de      	mov	lr, fp
 80015f6:	464e      	mov	r6, r9
 80015f8:	4645      	mov	r5, r8
 80015fa:	b5e0      	push	{r5, r6, r7, lr}
 80015fc:	001f      	movs	r7, r3
 80015fe:	030b      	lsls	r3, r1, #12
 8001600:	0b1b      	lsrs	r3, r3, #12
 8001602:	0016      	movs	r6, r2
 8001604:	469a      	mov	sl, r3
 8001606:	0fca      	lsrs	r2, r1, #31
 8001608:	004b      	lsls	r3, r1, #1
 800160a:	0004      	movs	r4, r0
 800160c:	4693      	mov	fp, r2
 800160e:	b087      	sub	sp, #28
 8001610:	0d5b      	lsrs	r3, r3, #21
 8001612:	d100      	bne.n	8001616 <__aeabi_dmul+0x26>
 8001614:	e0d5      	b.n	80017c2 <__aeabi_dmul+0x1d2>
 8001616:	4abb      	ldr	r2, [pc, #748]	@ (8001904 <__aeabi_dmul+0x314>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d100      	bne.n	800161e <__aeabi_dmul+0x2e>
 800161c:	e0f8      	b.n	8001810 <__aeabi_dmul+0x220>
 800161e:	4651      	mov	r1, sl
 8001620:	0f42      	lsrs	r2, r0, #29
 8001622:	00c9      	lsls	r1, r1, #3
 8001624:	430a      	orrs	r2, r1
 8001626:	2180      	movs	r1, #128	@ 0x80
 8001628:	0409      	lsls	r1, r1, #16
 800162a:	4311      	orrs	r1, r2
 800162c:	00c2      	lsls	r2, r0, #3
 800162e:	4691      	mov	r9, r2
 8001630:	4ab5      	ldr	r2, [pc, #724]	@ (8001908 <__aeabi_dmul+0x318>)
 8001632:	468a      	mov	sl, r1
 8001634:	189d      	adds	r5, r3, r2
 8001636:	2300      	movs	r3, #0
 8001638:	4698      	mov	r8, r3
 800163a:	9302      	str	r3, [sp, #8]
 800163c:	033c      	lsls	r4, r7, #12
 800163e:	007b      	lsls	r3, r7, #1
 8001640:	0ffa      	lsrs	r2, r7, #31
 8001642:	0030      	movs	r0, r6
 8001644:	0b24      	lsrs	r4, r4, #12
 8001646:	0d5b      	lsrs	r3, r3, #21
 8001648:	9200      	str	r2, [sp, #0]
 800164a:	d100      	bne.n	800164e <__aeabi_dmul+0x5e>
 800164c:	e096      	b.n	800177c <__aeabi_dmul+0x18c>
 800164e:	4aad      	ldr	r2, [pc, #692]	@ (8001904 <__aeabi_dmul+0x314>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d031      	beq.n	80016b8 <__aeabi_dmul+0xc8>
 8001654:	0f72      	lsrs	r2, r6, #29
 8001656:	00e4      	lsls	r4, r4, #3
 8001658:	4322      	orrs	r2, r4
 800165a:	2480      	movs	r4, #128	@ 0x80
 800165c:	0424      	lsls	r4, r4, #16
 800165e:	4314      	orrs	r4, r2
 8001660:	4aa9      	ldr	r2, [pc, #676]	@ (8001908 <__aeabi_dmul+0x318>)
 8001662:	00f0      	lsls	r0, r6, #3
 8001664:	4694      	mov	ip, r2
 8001666:	4463      	add	r3, ip
 8001668:	195b      	adds	r3, r3, r5
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	9201      	str	r2, [sp, #4]
 800166e:	4642      	mov	r2, r8
 8001670:	2600      	movs	r6, #0
 8001672:	2a0a      	cmp	r2, #10
 8001674:	dc42      	bgt.n	80016fc <__aeabi_dmul+0x10c>
 8001676:	465a      	mov	r2, fp
 8001678:	9900      	ldr	r1, [sp, #0]
 800167a:	404a      	eors	r2, r1
 800167c:	4693      	mov	fp, r2
 800167e:	4642      	mov	r2, r8
 8001680:	2a02      	cmp	r2, #2
 8001682:	dc32      	bgt.n	80016ea <__aeabi_dmul+0xfa>
 8001684:	3a01      	subs	r2, #1
 8001686:	2a01      	cmp	r2, #1
 8001688:	d900      	bls.n	800168c <__aeabi_dmul+0x9c>
 800168a:	e149      	b.n	8001920 <__aeabi_dmul+0x330>
 800168c:	2e02      	cmp	r6, #2
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0xa2>
 8001690:	e0ca      	b.n	8001828 <__aeabi_dmul+0x238>
 8001692:	2e01      	cmp	r6, #1
 8001694:	d13d      	bne.n	8001712 <__aeabi_dmul+0x122>
 8001696:	2300      	movs	r3, #0
 8001698:	2400      	movs	r4, #0
 800169a:	2200      	movs	r2, #0
 800169c:	0010      	movs	r0, r2
 800169e:	465a      	mov	r2, fp
 80016a0:	051b      	lsls	r3, r3, #20
 80016a2:	4323      	orrs	r3, r4
 80016a4:	07d2      	lsls	r2, r2, #31
 80016a6:	4313      	orrs	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	b007      	add	sp, #28
 80016ac:	bcf0      	pop	{r4, r5, r6, r7}
 80016ae:	46bb      	mov	fp, r7
 80016b0:	46b2      	mov	sl, r6
 80016b2:	46a9      	mov	r9, r5
 80016b4:	46a0      	mov	r8, r4
 80016b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b8:	4b92      	ldr	r3, [pc, #584]	@ (8001904 <__aeabi_dmul+0x314>)
 80016ba:	4326      	orrs	r6, r4
 80016bc:	18eb      	adds	r3, r5, r3
 80016be:	2e00      	cmp	r6, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dmul+0xd4>
 80016c2:	e0bb      	b.n	800183c <__aeabi_dmul+0x24c>
 80016c4:	2203      	movs	r2, #3
 80016c6:	4641      	mov	r1, r8
 80016c8:	4311      	orrs	r1, r2
 80016ca:	465a      	mov	r2, fp
 80016cc:	4688      	mov	r8, r1
 80016ce:	9900      	ldr	r1, [sp, #0]
 80016d0:	404a      	eors	r2, r1
 80016d2:	2180      	movs	r1, #128	@ 0x80
 80016d4:	0109      	lsls	r1, r1, #4
 80016d6:	468c      	mov	ip, r1
 80016d8:	0029      	movs	r1, r5
 80016da:	4461      	add	r1, ip
 80016dc:	9101      	str	r1, [sp, #4]
 80016de:	4641      	mov	r1, r8
 80016e0:	290a      	cmp	r1, #10
 80016e2:	dd00      	ble.n	80016e6 <__aeabi_dmul+0xf6>
 80016e4:	e233      	b.n	8001b4e <__aeabi_dmul+0x55e>
 80016e6:	4693      	mov	fp, r2
 80016e8:	2603      	movs	r6, #3
 80016ea:	4642      	mov	r2, r8
 80016ec:	2701      	movs	r7, #1
 80016ee:	4097      	lsls	r7, r2
 80016f0:	21a6      	movs	r1, #166	@ 0xa6
 80016f2:	003a      	movs	r2, r7
 80016f4:	00c9      	lsls	r1, r1, #3
 80016f6:	400a      	ands	r2, r1
 80016f8:	420f      	tst	r7, r1
 80016fa:	d031      	beq.n	8001760 <__aeabi_dmul+0x170>
 80016fc:	9e02      	ldr	r6, [sp, #8]
 80016fe:	2e02      	cmp	r6, #2
 8001700:	d100      	bne.n	8001704 <__aeabi_dmul+0x114>
 8001702:	e235      	b.n	8001b70 <__aeabi_dmul+0x580>
 8001704:	2e03      	cmp	r6, #3
 8001706:	d100      	bne.n	800170a <__aeabi_dmul+0x11a>
 8001708:	e1d2      	b.n	8001ab0 <__aeabi_dmul+0x4c0>
 800170a:	4654      	mov	r4, sl
 800170c:	4648      	mov	r0, r9
 800170e:	2e01      	cmp	r6, #1
 8001710:	d0c1      	beq.n	8001696 <__aeabi_dmul+0xa6>
 8001712:	9a01      	ldr	r2, [sp, #4]
 8001714:	4b7d      	ldr	r3, [pc, #500]	@ (800190c <__aeabi_dmul+0x31c>)
 8001716:	4694      	mov	ip, r2
 8001718:	4463      	add	r3, ip
 800171a:	2b00      	cmp	r3, #0
 800171c:	dc00      	bgt.n	8001720 <__aeabi_dmul+0x130>
 800171e:	e0c0      	b.n	80018a2 <__aeabi_dmul+0x2b2>
 8001720:	0742      	lsls	r2, r0, #29
 8001722:	d009      	beq.n	8001738 <__aeabi_dmul+0x148>
 8001724:	220f      	movs	r2, #15
 8001726:	4002      	ands	r2, r0
 8001728:	2a04      	cmp	r2, #4
 800172a:	d005      	beq.n	8001738 <__aeabi_dmul+0x148>
 800172c:	1d02      	adds	r2, r0, #4
 800172e:	4282      	cmp	r2, r0
 8001730:	4180      	sbcs	r0, r0
 8001732:	4240      	negs	r0, r0
 8001734:	1824      	adds	r4, r4, r0
 8001736:	0010      	movs	r0, r2
 8001738:	01e2      	lsls	r2, r4, #7
 800173a:	d506      	bpl.n	800174a <__aeabi_dmul+0x15a>
 800173c:	4b74      	ldr	r3, [pc, #464]	@ (8001910 <__aeabi_dmul+0x320>)
 800173e:	9a01      	ldr	r2, [sp, #4]
 8001740:	401c      	ands	r4, r3
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	4694      	mov	ip, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4463      	add	r3, ip
 800174a:	4a72      	ldr	r2, [pc, #456]	@ (8001914 <__aeabi_dmul+0x324>)
 800174c:	4293      	cmp	r3, r2
 800174e:	dc6b      	bgt.n	8001828 <__aeabi_dmul+0x238>
 8001750:	0762      	lsls	r2, r4, #29
 8001752:	08c0      	lsrs	r0, r0, #3
 8001754:	0264      	lsls	r4, r4, #9
 8001756:	055b      	lsls	r3, r3, #21
 8001758:	4302      	orrs	r2, r0
 800175a:	0b24      	lsrs	r4, r4, #12
 800175c:	0d5b      	lsrs	r3, r3, #21
 800175e:	e79d      	b.n	800169c <__aeabi_dmul+0xac>
 8001760:	2190      	movs	r1, #144	@ 0x90
 8001762:	0089      	lsls	r1, r1, #2
 8001764:	420f      	tst	r7, r1
 8001766:	d163      	bne.n	8001830 <__aeabi_dmul+0x240>
 8001768:	2288      	movs	r2, #136	@ 0x88
 800176a:	423a      	tst	r2, r7
 800176c:	d100      	bne.n	8001770 <__aeabi_dmul+0x180>
 800176e:	e0d7      	b.n	8001920 <__aeabi_dmul+0x330>
 8001770:	9b00      	ldr	r3, [sp, #0]
 8001772:	46a2      	mov	sl, r4
 8001774:	469b      	mov	fp, r3
 8001776:	4681      	mov	r9, r0
 8001778:	9602      	str	r6, [sp, #8]
 800177a:	e7bf      	b.n	80016fc <__aeabi_dmul+0x10c>
 800177c:	0023      	movs	r3, r4
 800177e:	4333      	orrs	r3, r6
 8001780:	d100      	bne.n	8001784 <__aeabi_dmul+0x194>
 8001782:	e07f      	b.n	8001884 <__aeabi_dmul+0x294>
 8001784:	2c00      	cmp	r4, #0
 8001786:	d100      	bne.n	800178a <__aeabi_dmul+0x19a>
 8001788:	e1ad      	b.n	8001ae6 <__aeabi_dmul+0x4f6>
 800178a:	0020      	movs	r0, r4
 800178c:	f000 ff10 	bl	80025b0 <__clzsi2>
 8001790:	0002      	movs	r2, r0
 8001792:	0003      	movs	r3, r0
 8001794:	3a0b      	subs	r2, #11
 8001796:	201d      	movs	r0, #29
 8001798:	0019      	movs	r1, r3
 800179a:	1a82      	subs	r2, r0, r2
 800179c:	0030      	movs	r0, r6
 800179e:	3908      	subs	r1, #8
 80017a0:	40d0      	lsrs	r0, r2
 80017a2:	408c      	lsls	r4, r1
 80017a4:	4304      	orrs	r4, r0
 80017a6:	0030      	movs	r0, r6
 80017a8:	4088      	lsls	r0, r1
 80017aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001918 <__aeabi_dmul+0x328>)
 80017ac:	1aeb      	subs	r3, r5, r3
 80017ae:	4694      	mov	ip, r2
 80017b0:	4463      	add	r3, ip
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	9201      	str	r2, [sp, #4]
 80017b6:	4642      	mov	r2, r8
 80017b8:	2600      	movs	r6, #0
 80017ba:	2a0a      	cmp	r2, #10
 80017bc:	dc00      	bgt.n	80017c0 <__aeabi_dmul+0x1d0>
 80017be:	e75a      	b.n	8001676 <__aeabi_dmul+0x86>
 80017c0:	e79c      	b.n	80016fc <__aeabi_dmul+0x10c>
 80017c2:	4653      	mov	r3, sl
 80017c4:	4303      	orrs	r3, r0
 80017c6:	4699      	mov	r9, r3
 80017c8:	d054      	beq.n	8001874 <__aeabi_dmul+0x284>
 80017ca:	4653      	mov	r3, sl
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dmul+0x1e2>
 80017d0:	e177      	b.n	8001ac2 <__aeabi_dmul+0x4d2>
 80017d2:	4650      	mov	r0, sl
 80017d4:	f000 feec 	bl	80025b0 <__clzsi2>
 80017d8:	230b      	movs	r3, #11
 80017da:	425b      	negs	r3, r3
 80017dc:	469c      	mov	ip, r3
 80017de:	0002      	movs	r2, r0
 80017e0:	4484      	add	ip, r0
 80017e2:	0011      	movs	r1, r2
 80017e4:	4650      	mov	r0, sl
 80017e6:	3908      	subs	r1, #8
 80017e8:	4088      	lsls	r0, r1
 80017ea:	231d      	movs	r3, #29
 80017ec:	4680      	mov	r8, r0
 80017ee:	4660      	mov	r0, ip
 80017f0:	1a1b      	subs	r3, r3, r0
 80017f2:	0020      	movs	r0, r4
 80017f4:	40d8      	lsrs	r0, r3
 80017f6:	0003      	movs	r3, r0
 80017f8:	4640      	mov	r0, r8
 80017fa:	4303      	orrs	r3, r0
 80017fc:	469a      	mov	sl, r3
 80017fe:	0023      	movs	r3, r4
 8001800:	408b      	lsls	r3, r1
 8001802:	4699      	mov	r9, r3
 8001804:	2300      	movs	r3, #0
 8001806:	4d44      	ldr	r5, [pc, #272]	@ (8001918 <__aeabi_dmul+0x328>)
 8001808:	4698      	mov	r8, r3
 800180a:	1aad      	subs	r5, r5, r2
 800180c:	9302      	str	r3, [sp, #8]
 800180e:	e715      	b.n	800163c <__aeabi_dmul+0x4c>
 8001810:	4652      	mov	r2, sl
 8001812:	4302      	orrs	r2, r0
 8001814:	4691      	mov	r9, r2
 8001816:	d126      	bne.n	8001866 <__aeabi_dmul+0x276>
 8001818:	2200      	movs	r2, #0
 800181a:	001d      	movs	r5, r3
 800181c:	2302      	movs	r3, #2
 800181e:	4692      	mov	sl, r2
 8001820:	3208      	adds	r2, #8
 8001822:	4690      	mov	r8, r2
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	e709      	b.n	800163c <__aeabi_dmul+0x4c>
 8001828:	2400      	movs	r4, #0
 800182a:	2200      	movs	r2, #0
 800182c:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <__aeabi_dmul+0x314>)
 800182e:	e735      	b.n	800169c <__aeabi_dmul+0xac>
 8001830:	2300      	movs	r3, #0
 8001832:	2480      	movs	r4, #128	@ 0x80
 8001834:	469b      	mov	fp, r3
 8001836:	0324      	lsls	r4, r4, #12
 8001838:	4b32      	ldr	r3, [pc, #200]	@ (8001904 <__aeabi_dmul+0x314>)
 800183a:	e72f      	b.n	800169c <__aeabi_dmul+0xac>
 800183c:	2202      	movs	r2, #2
 800183e:	4641      	mov	r1, r8
 8001840:	4311      	orrs	r1, r2
 8001842:	2280      	movs	r2, #128	@ 0x80
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	4694      	mov	ip, r2
 8001848:	002a      	movs	r2, r5
 800184a:	4462      	add	r2, ip
 800184c:	4688      	mov	r8, r1
 800184e:	9201      	str	r2, [sp, #4]
 8001850:	290a      	cmp	r1, #10
 8001852:	dd00      	ble.n	8001856 <__aeabi_dmul+0x266>
 8001854:	e752      	b.n	80016fc <__aeabi_dmul+0x10c>
 8001856:	465a      	mov	r2, fp
 8001858:	2000      	movs	r0, #0
 800185a:	9900      	ldr	r1, [sp, #0]
 800185c:	0004      	movs	r4, r0
 800185e:	404a      	eors	r2, r1
 8001860:	4693      	mov	fp, r2
 8001862:	2602      	movs	r6, #2
 8001864:	e70b      	b.n	800167e <__aeabi_dmul+0x8e>
 8001866:	220c      	movs	r2, #12
 8001868:	001d      	movs	r5, r3
 800186a:	2303      	movs	r3, #3
 800186c:	4681      	mov	r9, r0
 800186e:	4690      	mov	r8, r2
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	e6e3      	b.n	800163c <__aeabi_dmul+0x4c>
 8001874:	2300      	movs	r3, #0
 8001876:	469a      	mov	sl, r3
 8001878:	3304      	adds	r3, #4
 800187a:	4698      	mov	r8, r3
 800187c:	3b03      	subs	r3, #3
 800187e:	2500      	movs	r5, #0
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	e6db      	b.n	800163c <__aeabi_dmul+0x4c>
 8001884:	4642      	mov	r2, r8
 8001886:	3301      	adds	r3, #1
 8001888:	431a      	orrs	r2, r3
 800188a:	002b      	movs	r3, r5
 800188c:	4690      	mov	r8, r2
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	9201      	str	r2, [sp, #4]
 8001892:	4642      	mov	r2, r8
 8001894:	2400      	movs	r4, #0
 8001896:	2000      	movs	r0, #0
 8001898:	2601      	movs	r6, #1
 800189a:	2a0a      	cmp	r2, #10
 800189c:	dc00      	bgt.n	80018a0 <__aeabi_dmul+0x2b0>
 800189e:	e6ea      	b.n	8001676 <__aeabi_dmul+0x86>
 80018a0:	e72c      	b.n	80016fc <__aeabi_dmul+0x10c>
 80018a2:	2201      	movs	r2, #1
 80018a4:	1ad2      	subs	r2, r2, r3
 80018a6:	2a38      	cmp	r2, #56	@ 0x38
 80018a8:	dd00      	ble.n	80018ac <__aeabi_dmul+0x2bc>
 80018aa:	e6f4      	b.n	8001696 <__aeabi_dmul+0xa6>
 80018ac:	2a1f      	cmp	r2, #31
 80018ae:	dc00      	bgt.n	80018b2 <__aeabi_dmul+0x2c2>
 80018b0:	e12a      	b.n	8001b08 <__aeabi_dmul+0x518>
 80018b2:	211f      	movs	r1, #31
 80018b4:	4249      	negs	r1, r1
 80018b6:	1acb      	subs	r3, r1, r3
 80018b8:	0021      	movs	r1, r4
 80018ba:	40d9      	lsrs	r1, r3
 80018bc:	000b      	movs	r3, r1
 80018be:	2a20      	cmp	r2, #32
 80018c0:	d005      	beq.n	80018ce <__aeabi_dmul+0x2de>
 80018c2:	4a16      	ldr	r2, [pc, #88]	@ (800191c <__aeabi_dmul+0x32c>)
 80018c4:	9d01      	ldr	r5, [sp, #4]
 80018c6:	4694      	mov	ip, r2
 80018c8:	4465      	add	r5, ip
 80018ca:	40ac      	lsls	r4, r5
 80018cc:	4320      	orrs	r0, r4
 80018ce:	1e42      	subs	r2, r0, #1
 80018d0:	4190      	sbcs	r0, r2
 80018d2:	4318      	orrs	r0, r3
 80018d4:	2307      	movs	r3, #7
 80018d6:	0019      	movs	r1, r3
 80018d8:	2400      	movs	r4, #0
 80018da:	4001      	ands	r1, r0
 80018dc:	4203      	tst	r3, r0
 80018de:	d00c      	beq.n	80018fa <__aeabi_dmul+0x30a>
 80018e0:	230f      	movs	r3, #15
 80018e2:	4003      	ands	r3, r0
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d100      	bne.n	80018ea <__aeabi_dmul+0x2fa>
 80018e8:	e140      	b.n	8001b6c <__aeabi_dmul+0x57c>
 80018ea:	1d03      	adds	r3, r0, #4
 80018ec:	4283      	cmp	r3, r0
 80018ee:	41a4      	sbcs	r4, r4
 80018f0:	0018      	movs	r0, r3
 80018f2:	4264      	negs	r4, r4
 80018f4:	0761      	lsls	r1, r4, #29
 80018f6:	0264      	lsls	r4, r4, #9
 80018f8:	0b24      	lsrs	r4, r4, #12
 80018fa:	08c2      	lsrs	r2, r0, #3
 80018fc:	2300      	movs	r3, #0
 80018fe:	430a      	orrs	r2, r1
 8001900:	e6cc      	b.n	800169c <__aeabi_dmul+0xac>
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	000007ff 	.word	0x000007ff
 8001908:	fffffc01 	.word	0xfffffc01
 800190c:	000003ff 	.word	0x000003ff
 8001910:	feffffff 	.word	0xfeffffff
 8001914:	000007fe 	.word	0x000007fe
 8001918:	fffffc0d 	.word	0xfffffc0d
 800191c:	0000043e 	.word	0x0000043e
 8001920:	4649      	mov	r1, r9
 8001922:	464a      	mov	r2, r9
 8001924:	0409      	lsls	r1, r1, #16
 8001926:	0c09      	lsrs	r1, r1, #16
 8001928:	000d      	movs	r5, r1
 800192a:	0c16      	lsrs	r6, r2, #16
 800192c:	0c02      	lsrs	r2, r0, #16
 800192e:	0400      	lsls	r0, r0, #16
 8001930:	0c00      	lsrs	r0, r0, #16
 8001932:	4345      	muls	r5, r0
 8001934:	46ac      	mov	ip, r5
 8001936:	0005      	movs	r5, r0
 8001938:	4375      	muls	r5, r6
 800193a:	46a8      	mov	r8, r5
 800193c:	0015      	movs	r5, r2
 800193e:	000f      	movs	r7, r1
 8001940:	4375      	muls	r5, r6
 8001942:	9200      	str	r2, [sp, #0]
 8001944:	9502      	str	r5, [sp, #8]
 8001946:	002a      	movs	r2, r5
 8001948:	9d00      	ldr	r5, [sp, #0]
 800194a:	436f      	muls	r7, r5
 800194c:	4665      	mov	r5, ip
 800194e:	0c2d      	lsrs	r5, r5, #16
 8001950:	46a9      	mov	r9, r5
 8001952:	4447      	add	r7, r8
 8001954:	444f      	add	r7, r9
 8001956:	45b8      	cmp	r8, r7
 8001958:	d905      	bls.n	8001966 <__aeabi_dmul+0x376>
 800195a:	0015      	movs	r5, r2
 800195c:	2280      	movs	r2, #128	@ 0x80
 800195e:	0252      	lsls	r2, r2, #9
 8001960:	4690      	mov	r8, r2
 8001962:	4445      	add	r5, r8
 8001964:	9502      	str	r5, [sp, #8]
 8001966:	0c3d      	lsrs	r5, r7, #16
 8001968:	9503      	str	r5, [sp, #12]
 800196a:	4665      	mov	r5, ip
 800196c:	042d      	lsls	r5, r5, #16
 800196e:	043f      	lsls	r7, r7, #16
 8001970:	0c2d      	lsrs	r5, r5, #16
 8001972:	46ac      	mov	ip, r5
 8001974:	003d      	movs	r5, r7
 8001976:	4465      	add	r5, ip
 8001978:	9504      	str	r5, [sp, #16]
 800197a:	0c25      	lsrs	r5, r4, #16
 800197c:	0424      	lsls	r4, r4, #16
 800197e:	0c24      	lsrs	r4, r4, #16
 8001980:	46ac      	mov	ip, r5
 8001982:	0025      	movs	r5, r4
 8001984:	4375      	muls	r5, r6
 8001986:	46a8      	mov	r8, r5
 8001988:	4665      	mov	r5, ip
 800198a:	000f      	movs	r7, r1
 800198c:	4369      	muls	r1, r5
 800198e:	4441      	add	r1, r8
 8001990:	4689      	mov	r9, r1
 8001992:	4367      	muls	r7, r4
 8001994:	0c39      	lsrs	r1, r7, #16
 8001996:	4449      	add	r1, r9
 8001998:	436e      	muls	r6, r5
 800199a:	4588      	cmp	r8, r1
 800199c:	d903      	bls.n	80019a6 <__aeabi_dmul+0x3b6>
 800199e:	2280      	movs	r2, #128	@ 0x80
 80019a0:	0252      	lsls	r2, r2, #9
 80019a2:	4690      	mov	r8, r2
 80019a4:	4446      	add	r6, r8
 80019a6:	0c0d      	lsrs	r5, r1, #16
 80019a8:	46a8      	mov	r8, r5
 80019aa:	0035      	movs	r5, r6
 80019ac:	4445      	add	r5, r8
 80019ae:	9505      	str	r5, [sp, #20]
 80019b0:	9d03      	ldr	r5, [sp, #12]
 80019b2:	043f      	lsls	r7, r7, #16
 80019b4:	46a8      	mov	r8, r5
 80019b6:	0c3f      	lsrs	r7, r7, #16
 80019b8:	0409      	lsls	r1, r1, #16
 80019ba:	19c9      	adds	r1, r1, r7
 80019bc:	4488      	add	r8, r1
 80019be:	4645      	mov	r5, r8
 80019c0:	9503      	str	r5, [sp, #12]
 80019c2:	4655      	mov	r5, sl
 80019c4:	042e      	lsls	r6, r5, #16
 80019c6:	0c36      	lsrs	r6, r6, #16
 80019c8:	0c2f      	lsrs	r7, r5, #16
 80019ca:	0035      	movs	r5, r6
 80019cc:	4345      	muls	r5, r0
 80019ce:	4378      	muls	r0, r7
 80019d0:	4681      	mov	r9, r0
 80019d2:	0038      	movs	r0, r7
 80019d4:	46a8      	mov	r8, r5
 80019d6:	0c2d      	lsrs	r5, r5, #16
 80019d8:	46aa      	mov	sl, r5
 80019da:	9a00      	ldr	r2, [sp, #0]
 80019dc:	4350      	muls	r0, r2
 80019de:	4372      	muls	r2, r6
 80019e0:	444a      	add	r2, r9
 80019e2:	4452      	add	r2, sl
 80019e4:	4591      	cmp	r9, r2
 80019e6:	d903      	bls.n	80019f0 <__aeabi_dmul+0x400>
 80019e8:	2580      	movs	r5, #128	@ 0x80
 80019ea:	026d      	lsls	r5, r5, #9
 80019ec:	46a9      	mov	r9, r5
 80019ee:	4448      	add	r0, r9
 80019f0:	0c15      	lsrs	r5, r2, #16
 80019f2:	46a9      	mov	r9, r5
 80019f4:	4645      	mov	r5, r8
 80019f6:	042d      	lsls	r5, r5, #16
 80019f8:	0c2d      	lsrs	r5, r5, #16
 80019fa:	46a8      	mov	r8, r5
 80019fc:	4665      	mov	r5, ip
 80019fe:	437d      	muls	r5, r7
 8001a00:	0412      	lsls	r2, r2, #16
 8001a02:	4448      	add	r0, r9
 8001a04:	4490      	add	r8, r2
 8001a06:	46a9      	mov	r9, r5
 8001a08:	0032      	movs	r2, r6
 8001a0a:	4665      	mov	r5, ip
 8001a0c:	4362      	muls	r2, r4
 8001a0e:	436e      	muls	r6, r5
 8001a10:	437c      	muls	r4, r7
 8001a12:	0c17      	lsrs	r7, r2, #16
 8001a14:	1936      	adds	r6, r6, r4
 8001a16:	19bf      	adds	r7, r7, r6
 8001a18:	42bc      	cmp	r4, r7
 8001a1a:	d903      	bls.n	8001a24 <__aeabi_dmul+0x434>
 8001a1c:	2480      	movs	r4, #128	@ 0x80
 8001a1e:	0264      	lsls	r4, r4, #9
 8001a20:	46a4      	mov	ip, r4
 8001a22:	44e1      	add	r9, ip
 8001a24:	9c02      	ldr	r4, [sp, #8]
 8001a26:	9e03      	ldr	r6, [sp, #12]
 8001a28:	46a4      	mov	ip, r4
 8001a2a:	9d05      	ldr	r5, [sp, #20]
 8001a2c:	4466      	add	r6, ip
 8001a2e:	428e      	cmp	r6, r1
 8001a30:	4189      	sbcs	r1, r1
 8001a32:	46ac      	mov	ip, r5
 8001a34:	0412      	lsls	r2, r2, #16
 8001a36:	043c      	lsls	r4, r7, #16
 8001a38:	0c12      	lsrs	r2, r2, #16
 8001a3a:	18a2      	adds	r2, r4, r2
 8001a3c:	4462      	add	r2, ip
 8001a3e:	4249      	negs	r1, r1
 8001a40:	1854      	adds	r4, r2, r1
 8001a42:	4446      	add	r6, r8
 8001a44:	46a4      	mov	ip, r4
 8001a46:	4546      	cmp	r6, r8
 8001a48:	41a4      	sbcs	r4, r4
 8001a4a:	4682      	mov	sl, r0
 8001a4c:	4264      	negs	r4, r4
 8001a4e:	46a0      	mov	r8, r4
 8001a50:	42aa      	cmp	r2, r5
 8001a52:	4192      	sbcs	r2, r2
 8001a54:	458c      	cmp	ip, r1
 8001a56:	4189      	sbcs	r1, r1
 8001a58:	44e2      	add	sl, ip
 8001a5a:	44d0      	add	r8, sl
 8001a5c:	4249      	negs	r1, r1
 8001a5e:	4252      	negs	r2, r2
 8001a60:	430a      	orrs	r2, r1
 8001a62:	45a0      	cmp	r8, r4
 8001a64:	41a4      	sbcs	r4, r4
 8001a66:	4582      	cmp	sl, r0
 8001a68:	4189      	sbcs	r1, r1
 8001a6a:	4264      	negs	r4, r4
 8001a6c:	4249      	negs	r1, r1
 8001a6e:	430c      	orrs	r4, r1
 8001a70:	4641      	mov	r1, r8
 8001a72:	0c3f      	lsrs	r7, r7, #16
 8001a74:	19d2      	adds	r2, r2, r7
 8001a76:	1912      	adds	r2, r2, r4
 8001a78:	0dcc      	lsrs	r4, r1, #23
 8001a7a:	9904      	ldr	r1, [sp, #16]
 8001a7c:	0270      	lsls	r0, r6, #9
 8001a7e:	4308      	orrs	r0, r1
 8001a80:	1e41      	subs	r1, r0, #1
 8001a82:	4188      	sbcs	r0, r1
 8001a84:	4641      	mov	r1, r8
 8001a86:	444a      	add	r2, r9
 8001a88:	0df6      	lsrs	r6, r6, #23
 8001a8a:	0252      	lsls	r2, r2, #9
 8001a8c:	4330      	orrs	r0, r6
 8001a8e:	0249      	lsls	r1, r1, #9
 8001a90:	4314      	orrs	r4, r2
 8001a92:	4308      	orrs	r0, r1
 8001a94:	01d2      	lsls	r2, r2, #7
 8001a96:	d535      	bpl.n	8001b04 <__aeabi_dmul+0x514>
 8001a98:	2201      	movs	r2, #1
 8001a9a:	0843      	lsrs	r3, r0, #1
 8001a9c:	4002      	ands	r2, r0
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	07e0      	lsls	r0, r4, #31
 8001aa2:	4318      	orrs	r0, r3
 8001aa4:	0864      	lsrs	r4, r4, #1
 8001aa6:	e634      	b.n	8001712 <__aeabi_dmul+0x122>
 8001aa8:	9b00      	ldr	r3, [sp, #0]
 8001aaa:	46a2      	mov	sl, r4
 8001aac:	469b      	mov	fp, r3
 8001aae:	4681      	mov	r9, r0
 8001ab0:	2480      	movs	r4, #128	@ 0x80
 8001ab2:	4653      	mov	r3, sl
 8001ab4:	0324      	lsls	r4, r4, #12
 8001ab6:	431c      	orrs	r4, r3
 8001ab8:	0324      	lsls	r4, r4, #12
 8001aba:	464a      	mov	r2, r9
 8001abc:	4b2e      	ldr	r3, [pc, #184]	@ (8001b78 <__aeabi_dmul+0x588>)
 8001abe:	0b24      	lsrs	r4, r4, #12
 8001ac0:	e5ec      	b.n	800169c <__aeabi_dmul+0xac>
 8001ac2:	f000 fd75 	bl	80025b0 <__clzsi2>
 8001ac6:	2315      	movs	r3, #21
 8001ac8:	469c      	mov	ip, r3
 8001aca:	4484      	add	ip, r0
 8001acc:	0002      	movs	r2, r0
 8001ace:	4663      	mov	r3, ip
 8001ad0:	3220      	adds	r2, #32
 8001ad2:	2b1c      	cmp	r3, #28
 8001ad4:	dc00      	bgt.n	8001ad8 <__aeabi_dmul+0x4e8>
 8001ad6:	e684      	b.n	80017e2 <__aeabi_dmul+0x1f2>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	4699      	mov	r9, r3
 8001adc:	0023      	movs	r3, r4
 8001ade:	3808      	subs	r0, #8
 8001ae0:	4083      	lsls	r3, r0
 8001ae2:	469a      	mov	sl, r3
 8001ae4:	e68e      	b.n	8001804 <__aeabi_dmul+0x214>
 8001ae6:	f000 fd63 	bl	80025b0 <__clzsi2>
 8001aea:	0002      	movs	r2, r0
 8001aec:	0003      	movs	r3, r0
 8001aee:	3215      	adds	r2, #21
 8001af0:	3320      	adds	r3, #32
 8001af2:	2a1c      	cmp	r2, #28
 8001af4:	dc00      	bgt.n	8001af8 <__aeabi_dmul+0x508>
 8001af6:	e64e      	b.n	8001796 <__aeabi_dmul+0x1a6>
 8001af8:	0002      	movs	r2, r0
 8001afa:	0034      	movs	r4, r6
 8001afc:	3a08      	subs	r2, #8
 8001afe:	2000      	movs	r0, #0
 8001b00:	4094      	lsls	r4, r2
 8001b02:	e652      	b.n	80017aa <__aeabi_dmul+0x1ba>
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	e604      	b.n	8001712 <__aeabi_dmul+0x122>
 8001b08:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <__aeabi_dmul+0x58c>)
 8001b0a:	0021      	movs	r1, r4
 8001b0c:	469c      	mov	ip, r3
 8001b0e:	0003      	movs	r3, r0
 8001b10:	9d01      	ldr	r5, [sp, #4]
 8001b12:	40d3      	lsrs	r3, r2
 8001b14:	4465      	add	r5, ip
 8001b16:	40a9      	lsls	r1, r5
 8001b18:	4319      	orrs	r1, r3
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	40ab      	lsls	r3, r5
 8001b1e:	1e58      	subs	r0, r3, #1
 8001b20:	4183      	sbcs	r3, r0
 8001b22:	4319      	orrs	r1, r3
 8001b24:	0008      	movs	r0, r1
 8001b26:	40d4      	lsrs	r4, r2
 8001b28:	074b      	lsls	r3, r1, #29
 8001b2a:	d009      	beq.n	8001b40 <__aeabi_dmul+0x550>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	400b      	ands	r3, r1
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d005      	beq.n	8001b40 <__aeabi_dmul+0x550>
 8001b34:	1d0b      	adds	r3, r1, #4
 8001b36:	428b      	cmp	r3, r1
 8001b38:	4180      	sbcs	r0, r0
 8001b3a:	4240      	negs	r0, r0
 8001b3c:	1824      	adds	r4, r4, r0
 8001b3e:	0018      	movs	r0, r3
 8001b40:	0223      	lsls	r3, r4, #8
 8001b42:	d400      	bmi.n	8001b46 <__aeabi_dmul+0x556>
 8001b44:	e6d6      	b.n	80018f4 <__aeabi_dmul+0x304>
 8001b46:	2301      	movs	r3, #1
 8001b48:	2400      	movs	r4, #0
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	e5a6      	b.n	800169c <__aeabi_dmul+0xac>
 8001b4e:	290f      	cmp	r1, #15
 8001b50:	d1aa      	bne.n	8001aa8 <__aeabi_dmul+0x4b8>
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	4652      	mov	r2, sl
 8001b56:	031b      	lsls	r3, r3, #12
 8001b58:	421a      	tst	r2, r3
 8001b5a:	d0a9      	beq.n	8001ab0 <__aeabi_dmul+0x4c0>
 8001b5c:	421c      	tst	r4, r3
 8001b5e:	d1a7      	bne.n	8001ab0 <__aeabi_dmul+0x4c0>
 8001b60:	431c      	orrs	r4, r3
 8001b62:	9b00      	ldr	r3, [sp, #0]
 8001b64:	0002      	movs	r2, r0
 8001b66:	469b      	mov	fp, r3
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <__aeabi_dmul+0x588>)
 8001b6a:	e597      	b.n	800169c <__aeabi_dmul+0xac>
 8001b6c:	2400      	movs	r4, #0
 8001b6e:	e6c1      	b.n	80018f4 <__aeabi_dmul+0x304>
 8001b70:	2400      	movs	r4, #0
 8001b72:	4b01      	ldr	r3, [pc, #4]	@ (8001b78 <__aeabi_dmul+0x588>)
 8001b74:	0022      	movs	r2, r4
 8001b76:	e591      	b.n	800169c <__aeabi_dmul+0xac>
 8001b78:	000007ff 	.word	0x000007ff
 8001b7c:	0000041e 	.word	0x0000041e

08001b80 <__aeabi_dsub>:
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	464e      	mov	r6, r9
 8001b84:	4645      	mov	r5, r8
 8001b86:	46de      	mov	lr, fp
 8001b88:	4657      	mov	r7, sl
 8001b8a:	b5e0      	push	{r5, r6, r7, lr}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	9000      	str	r0, [sp, #0]
 8001b90:	9101      	str	r1, [sp, #4]
 8001b92:	030c      	lsls	r4, r1, #12
 8001b94:	004f      	lsls	r7, r1, #1
 8001b96:	0fce      	lsrs	r6, r1, #31
 8001b98:	0a61      	lsrs	r1, r4, #9
 8001b9a:	9c00      	ldr	r4, [sp, #0]
 8001b9c:	46b0      	mov	r8, r6
 8001b9e:	0f64      	lsrs	r4, r4, #29
 8001ba0:	430c      	orrs	r4, r1
 8001ba2:	9900      	ldr	r1, [sp, #0]
 8001ba4:	0d7f      	lsrs	r7, r7, #21
 8001ba6:	00c8      	lsls	r0, r1, #3
 8001ba8:	0011      	movs	r1, r2
 8001baa:	001a      	movs	r2, r3
 8001bac:	031b      	lsls	r3, r3, #12
 8001bae:	469c      	mov	ip, r3
 8001bb0:	9100      	str	r1, [sp, #0]
 8001bb2:	9201      	str	r2, [sp, #4]
 8001bb4:	0051      	lsls	r1, r2, #1
 8001bb6:	0d4b      	lsrs	r3, r1, #21
 8001bb8:	4699      	mov	r9, r3
 8001bba:	9b01      	ldr	r3, [sp, #4]
 8001bbc:	9d00      	ldr	r5, [sp, #0]
 8001bbe:	0fd9      	lsrs	r1, r3, #31
 8001bc0:	4663      	mov	r3, ip
 8001bc2:	0f6a      	lsrs	r2, r5, #29
 8001bc4:	0a5b      	lsrs	r3, r3, #9
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	00ea      	lsls	r2, r5, #3
 8001bca:	4694      	mov	ip, r2
 8001bcc:	4693      	mov	fp, r2
 8001bce:	4ac1      	ldr	r2, [pc, #772]	@ (8001ed4 <__aeabi_dsub+0x354>)
 8001bd0:	9003      	str	r0, [sp, #12]
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	4591      	cmp	r9, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x5a>
 8001bd8:	e0cd      	b.n	8001d76 <__aeabi_dsub+0x1f6>
 8001bda:	2501      	movs	r5, #1
 8001bdc:	4069      	eors	r1, r5
 8001bde:	464d      	mov	r5, r9
 8001be0:	1b7d      	subs	r5, r7, r5
 8001be2:	46aa      	mov	sl, r5
 8001be4:	428e      	cmp	r6, r1
 8001be6:	d100      	bne.n	8001bea <__aeabi_dsub+0x6a>
 8001be8:	e080      	b.n	8001cec <__aeabi_dsub+0x16c>
 8001bea:	2d00      	cmp	r5, #0
 8001bec:	dc00      	bgt.n	8001bf0 <__aeabi_dsub+0x70>
 8001bee:	e335      	b.n	800225c <__aeabi_dsub+0x6dc>
 8001bf0:	4649      	mov	r1, r9
 8001bf2:	2900      	cmp	r1, #0
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x78>
 8001bf6:	e0df      	b.n	8001db8 <__aeabi_dsub+0x238>
 8001bf8:	4297      	cmp	r7, r2
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x7e>
 8001bfc:	e194      	b.n	8001f28 <__aeabi_dsub+0x3a8>
 8001bfe:	4652      	mov	r2, sl
 8001c00:	2501      	movs	r5, #1
 8001c02:	2a38      	cmp	r2, #56	@ 0x38
 8001c04:	dc19      	bgt.n	8001c3a <__aeabi_dsub+0xba>
 8001c06:	2280      	movs	r2, #128	@ 0x80
 8001c08:	9b02      	ldr	r3, [sp, #8]
 8001c0a:	0412      	lsls	r2, r2, #16
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	4652      	mov	r2, sl
 8001c12:	2a1f      	cmp	r2, #31
 8001c14:	dd00      	ble.n	8001c18 <__aeabi_dsub+0x98>
 8001c16:	e1e3      	b.n	8001fe0 <__aeabi_dsub+0x460>
 8001c18:	4653      	mov	r3, sl
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	4661      	mov	r1, ip
 8001c1e:	9d02      	ldr	r5, [sp, #8]
 8001c20:	1ad2      	subs	r2, r2, r3
 8001c22:	4095      	lsls	r5, r2
 8001c24:	40d9      	lsrs	r1, r3
 8001c26:	430d      	orrs	r5, r1
 8001c28:	4661      	mov	r1, ip
 8001c2a:	4091      	lsls	r1, r2
 8001c2c:	000a      	movs	r2, r1
 8001c2e:	1e51      	subs	r1, r2, #1
 8001c30:	418a      	sbcs	r2, r1
 8001c32:	4315      	orrs	r5, r2
 8001c34:	9a02      	ldr	r2, [sp, #8]
 8001c36:	40da      	lsrs	r2, r3
 8001c38:	1aa4      	subs	r4, r4, r2
 8001c3a:	1b45      	subs	r5, r0, r5
 8001c3c:	42a8      	cmp	r0, r5
 8001c3e:	4180      	sbcs	r0, r0
 8001c40:	4240      	negs	r0, r0
 8001c42:	1a24      	subs	r4, r4, r0
 8001c44:	0223      	lsls	r3, r4, #8
 8001c46:	d400      	bmi.n	8001c4a <__aeabi_dsub+0xca>
 8001c48:	e13d      	b.n	8001ec6 <__aeabi_dsub+0x346>
 8001c4a:	0264      	lsls	r4, r4, #9
 8001c4c:	0a64      	lsrs	r4, r4, #9
 8001c4e:	2c00      	cmp	r4, #0
 8001c50:	d100      	bne.n	8001c54 <__aeabi_dsub+0xd4>
 8001c52:	e147      	b.n	8001ee4 <__aeabi_dsub+0x364>
 8001c54:	0020      	movs	r0, r4
 8001c56:	f000 fcab 	bl	80025b0 <__clzsi2>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	3b08      	subs	r3, #8
 8001c5e:	2120      	movs	r1, #32
 8001c60:	0028      	movs	r0, r5
 8001c62:	1aca      	subs	r2, r1, r3
 8001c64:	40d0      	lsrs	r0, r2
 8001c66:	409c      	lsls	r4, r3
 8001c68:	0002      	movs	r2, r0
 8001c6a:	409d      	lsls	r5, r3
 8001c6c:	4322      	orrs	r2, r4
 8001c6e:	429f      	cmp	r7, r3
 8001c70:	dd00      	ble.n	8001c74 <__aeabi_dsub+0xf4>
 8001c72:	e177      	b.n	8001f64 <__aeabi_dsub+0x3e4>
 8001c74:	1bd8      	subs	r0, r3, r7
 8001c76:	3001      	adds	r0, #1
 8001c78:	1a09      	subs	r1, r1, r0
 8001c7a:	002c      	movs	r4, r5
 8001c7c:	408d      	lsls	r5, r1
 8001c7e:	40c4      	lsrs	r4, r0
 8001c80:	1e6b      	subs	r3, r5, #1
 8001c82:	419d      	sbcs	r5, r3
 8001c84:	0013      	movs	r3, r2
 8001c86:	40c2      	lsrs	r2, r0
 8001c88:	408b      	lsls	r3, r1
 8001c8a:	4325      	orrs	r5, r4
 8001c8c:	2700      	movs	r7, #0
 8001c8e:	0014      	movs	r4, r2
 8001c90:	431d      	orrs	r5, r3
 8001c92:	076b      	lsls	r3, r5, #29
 8001c94:	d009      	beq.n	8001caa <__aeabi_dsub+0x12a>
 8001c96:	230f      	movs	r3, #15
 8001c98:	402b      	ands	r3, r5
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d005      	beq.n	8001caa <__aeabi_dsub+0x12a>
 8001c9e:	1d2b      	adds	r3, r5, #4
 8001ca0:	42ab      	cmp	r3, r5
 8001ca2:	41ad      	sbcs	r5, r5
 8001ca4:	426d      	negs	r5, r5
 8001ca6:	1964      	adds	r4, r4, r5
 8001ca8:	001d      	movs	r5, r3
 8001caa:	0223      	lsls	r3, r4, #8
 8001cac:	d400      	bmi.n	8001cb0 <__aeabi_dsub+0x130>
 8001cae:	e140      	b.n	8001f32 <__aeabi_dsub+0x3b2>
 8001cb0:	4a88      	ldr	r2, [pc, #544]	@ (8001ed4 <__aeabi_dsub+0x354>)
 8001cb2:	3701      	adds	r7, #1
 8001cb4:	4297      	cmp	r7, r2
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x13a>
 8001cb8:	e101      	b.n	8001ebe <__aeabi_dsub+0x33e>
 8001cba:	2601      	movs	r6, #1
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	4986      	ldr	r1, [pc, #536]	@ (8001ed8 <__aeabi_dsub+0x358>)
 8001cc0:	08ed      	lsrs	r5, r5, #3
 8001cc2:	4021      	ands	r1, r4
 8001cc4:	074a      	lsls	r2, r1, #29
 8001cc6:	432a      	orrs	r2, r5
 8001cc8:	057c      	lsls	r4, r7, #21
 8001cca:	024d      	lsls	r5, r1, #9
 8001ccc:	0b2d      	lsrs	r5, r5, #12
 8001cce:	0d64      	lsrs	r4, r4, #21
 8001cd0:	401e      	ands	r6, r3
 8001cd2:	0524      	lsls	r4, r4, #20
 8001cd4:	432c      	orrs	r4, r5
 8001cd6:	07f6      	lsls	r6, r6, #31
 8001cd8:	4334      	orrs	r4, r6
 8001cda:	0010      	movs	r0, r2
 8001cdc:	0021      	movs	r1, r4
 8001cde:	b005      	add	sp, #20
 8001ce0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ce2:	46bb      	mov	fp, r7
 8001ce4:	46b2      	mov	sl, r6
 8001ce6:	46a9      	mov	r9, r5
 8001ce8:	46a0      	mov	r8, r4
 8001cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cec:	2d00      	cmp	r5, #0
 8001cee:	dc00      	bgt.n	8001cf2 <__aeabi_dsub+0x172>
 8001cf0:	e2d0      	b.n	8002294 <__aeabi_dsub+0x714>
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	2900      	cmp	r1, #0
 8001cf6:	d000      	beq.n	8001cfa <__aeabi_dsub+0x17a>
 8001cf8:	e0d4      	b.n	8001ea4 <__aeabi_dsub+0x324>
 8001cfa:	4661      	mov	r1, ip
 8001cfc:	9b02      	ldr	r3, [sp, #8]
 8001cfe:	4319      	orrs	r1, r3
 8001d00:	d100      	bne.n	8001d04 <__aeabi_dsub+0x184>
 8001d02:	e12b      	b.n	8001f5c <__aeabi_dsub+0x3dc>
 8001d04:	1e69      	subs	r1, r5, #1
 8001d06:	2d01      	cmp	r5, #1
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x18c>
 8001d0a:	e1d9      	b.n	80020c0 <__aeabi_dsub+0x540>
 8001d0c:	4295      	cmp	r5, r2
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x192>
 8001d10:	e10a      	b.n	8001f28 <__aeabi_dsub+0x3a8>
 8001d12:	2501      	movs	r5, #1
 8001d14:	2938      	cmp	r1, #56	@ 0x38
 8001d16:	dc17      	bgt.n	8001d48 <__aeabi_dsub+0x1c8>
 8001d18:	468a      	mov	sl, r1
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	2b1f      	cmp	r3, #31
 8001d1e:	dd00      	ble.n	8001d22 <__aeabi_dsub+0x1a2>
 8001d20:	e1e7      	b.n	80020f2 <__aeabi_dsub+0x572>
 8001d22:	2220      	movs	r2, #32
 8001d24:	1ad2      	subs	r2, r2, r3
 8001d26:	9b02      	ldr	r3, [sp, #8]
 8001d28:	4661      	mov	r1, ip
 8001d2a:	4093      	lsls	r3, r2
 8001d2c:	001d      	movs	r5, r3
 8001d2e:	4653      	mov	r3, sl
 8001d30:	40d9      	lsrs	r1, r3
 8001d32:	4663      	mov	r3, ip
 8001d34:	4093      	lsls	r3, r2
 8001d36:	001a      	movs	r2, r3
 8001d38:	430d      	orrs	r5, r1
 8001d3a:	1e51      	subs	r1, r2, #1
 8001d3c:	418a      	sbcs	r2, r1
 8001d3e:	4653      	mov	r3, sl
 8001d40:	4315      	orrs	r5, r2
 8001d42:	9a02      	ldr	r2, [sp, #8]
 8001d44:	40da      	lsrs	r2, r3
 8001d46:	18a4      	adds	r4, r4, r2
 8001d48:	182d      	adds	r5, r5, r0
 8001d4a:	4285      	cmp	r5, r0
 8001d4c:	4180      	sbcs	r0, r0
 8001d4e:	4240      	negs	r0, r0
 8001d50:	1824      	adds	r4, r4, r0
 8001d52:	0223      	lsls	r3, r4, #8
 8001d54:	d400      	bmi.n	8001d58 <__aeabi_dsub+0x1d8>
 8001d56:	e0b6      	b.n	8001ec6 <__aeabi_dsub+0x346>
 8001d58:	4b5e      	ldr	r3, [pc, #376]	@ (8001ed4 <__aeabi_dsub+0x354>)
 8001d5a:	3701      	adds	r7, #1
 8001d5c:	429f      	cmp	r7, r3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_dsub+0x1e2>
 8001d60:	e0ad      	b.n	8001ebe <__aeabi_dsub+0x33e>
 8001d62:	2101      	movs	r1, #1
 8001d64:	4b5c      	ldr	r3, [pc, #368]	@ (8001ed8 <__aeabi_dsub+0x358>)
 8001d66:	086a      	lsrs	r2, r5, #1
 8001d68:	401c      	ands	r4, r3
 8001d6a:	4029      	ands	r1, r5
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	07e5      	lsls	r5, r4, #31
 8001d70:	4315      	orrs	r5, r2
 8001d72:	0864      	lsrs	r4, r4, #1
 8001d74:	e78d      	b.n	8001c92 <__aeabi_dsub+0x112>
 8001d76:	4a59      	ldr	r2, [pc, #356]	@ (8001edc <__aeabi_dsub+0x35c>)
 8001d78:	9b02      	ldr	r3, [sp, #8]
 8001d7a:	4692      	mov	sl, r2
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	44ba      	add	sl, r7
 8001d80:	431a      	orrs	r2, r3
 8001d82:	d02c      	beq.n	8001dde <__aeabi_dsub+0x25e>
 8001d84:	428e      	cmp	r6, r1
 8001d86:	d02e      	beq.n	8001de6 <__aeabi_dsub+0x266>
 8001d88:	4652      	mov	r2, sl
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	d060      	beq.n	8001e50 <__aeabi_dsub+0x2d0>
 8001d8e:	2f00      	cmp	r7, #0
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dsub+0x214>
 8001d92:	e0db      	b.n	8001f4c <__aeabi_dsub+0x3cc>
 8001d94:	4663      	mov	r3, ip
 8001d96:	000e      	movs	r6, r1
 8001d98:	9c02      	ldr	r4, [sp, #8]
 8001d9a:	08d8      	lsrs	r0, r3, #3
 8001d9c:	0762      	lsls	r2, r4, #29
 8001d9e:	4302      	orrs	r2, r0
 8001da0:	08e4      	lsrs	r4, r4, #3
 8001da2:	0013      	movs	r3, r2
 8001da4:	4323      	orrs	r3, r4
 8001da6:	d100      	bne.n	8001daa <__aeabi_dsub+0x22a>
 8001da8:	e254      	b.n	8002254 <__aeabi_dsub+0x6d4>
 8001daa:	2580      	movs	r5, #128	@ 0x80
 8001dac:	032d      	lsls	r5, r5, #12
 8001dae:	4325      	orrs	r5, r4
 8001db0:	032d      	lsls	r5, r5, #12
 8001db2:	4c48      	ldr	r4, [pc, #288]	@ (8001ed4 <__aeabi_dsub+0x354>)
 8001db4:	0b2d      	lsrs	r5, r5, #12
 8001db6:	e78c      	b.n	8001cd2 <__aeabi_dsub+0x152>
 8001db8:	4661      	mov	r1, ip
 8001dba:	9b02      	ldr	r3, [sp, #8]
 8001dbc:	4319      	orrs	r1, r3
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dsub+0x242>
 8001dc0:	e0cc      	b.n	8001f5c <__aeabi_dsub+0x3dc>
 8001dc2:	0029      	movs	r1, r5
 8001dc4:	3901      	subs	r1, #1
 8001dc6:	2d01      	cmp	r5, #1
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dsub+0x24c>
 8001dca:	e188      	b.n	80020de <__aeabi_dsub+0x55e>
 8001dcc:	4295      	cmp	r5, r2
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_dsub+0x252>
 8001dd0:	e0aa      	b.n	8001f28 <__aeabi_dsub+0x3a8>
 8001dd2:	2501      	movs	r5, #1
 8001dd4:	2938      	cmp	r1, #56	@ 0x38
 8001dd6:	dd00      	ble.n	8001dda <__aeabi_dsub+0x25a>
 8001dd8:	e72f      	b.n	8001c3a <__aeabi_dsub+0xba>
 8001dda:	468a      	mov	sl, r1
 8001ddc:	e718      	b.n	8001c10 <__aeabi_dsub+0x90>
 8001dde:	2201      	movs	r2, #1
 8001de0:	4051      	eors	r1, r2
 8001de2:	428e      	cmp	r6, r1
 8001de4:	d1d0      	bne.n	8001d88 <__aeabi_dsub+0x208>
 8001de6:	4653      	mov	r3, sl
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x26e>
 8001dec:	e0be      	b.n	8001f6c <__aeabi_dsub+0x3ec>
 8001dee:	2f00      	cmp	r7, #0
 8001df0:	d000      	beq.n	8001df4 <__aeabi_dsub+0x274>
 8001df2:	e138      	b.n	8002066 <__aeabi_dsub+0x4e6>
 8001df4:	46ca      	mov	sl, r9
 8001df6:	0022      	movs	r2, r4
 8001df8:	4302      	orrs	r2, r0
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_dsub+0x27e>
 8001dfc:	e1e2      	b.n	80021c4 <__aeabi_dsub+0x644>
 8001dfe:	4653      	mov	r3, sl
 8001e00:	1e59      	subs	r1, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x288>
 8001e06:	e20d      	b.n	8002224 <__aeabi_dsub+0x6a4>
 8001e08:	4a32      	ldr	r2, [pc, #200]	@ (8001ed4 <__aeabi_dsub+0x354>)
 8001e0a:	4592      	cmp	sl, r2
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x290>
 8001e0e:	e1d2      	b.n	80021b6 <__aeabi_dsub+0x636>
 8001e10:	2701      	movs	r7, #1
 8001e12:	2938      	cmp	r1, #56	@ 0x38
 8001e14:	dc13      	bgt.n	8001e3e <__aeabi_dsub+0x2be>
 8001e16:	291f      	cmp	r1, #31
 8001e18:	dd00      	ble.n	8001e1c <__aeabi_dsub+0x29c>
 8001e1a:	e1ee      	b.n	80021fa <__aeabi_dsub+0x67a>
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	9b02      	ldr	r3, [sp, #8]
 8001e20:	1a52      	subs	r2, r2, r1
 8001e22:	0025      	movs	r5, r4
 8001e24:	0007      	movs	r7, r0
 8001e26:	469a      	mov	sl, r3
 8001e28:	40cc      	lsrs	r4, r1
 8001e2a:	4090      	lsls	r0, r2
 8001e2c:	4095      	lsls	r5, r2
 8001e2e:	40cf      	lsrs	r7, r1
 8001e30:	44a2      	add	sl, r4
 8001e32:	1e42      	subs	r2, r0, #1
 8001e34:	4190      	sbcs	r0, r2
 8001e36:	4653      	mov	r3, sl
 8001e38:	432f      	orrs	r7, r5
 8001e3a:	4307      	orrs	r7, r0
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	003d      	movs	r5, r7
 8001e40:	4465      	add	r5, ip
 8001e42:	4565      	cmp	r5, ip
 8001e44:	4192      	sbcs	r2, r2
 8001e46:	9b02      	ldr	r3, [sp, #8]
 8001e48:	4252      	negs	r2, r2
 8001e4a:	464f      	mov	r7, r9
 8001e4c:	18d4      	adds	r4, r2, r3
 8001e4e:	e780      	b.n	8001d52 <__aeabi_dsub+0x1d2>
 8001e50:	4a23      	ldr	r2, [pc, #140]	@ (8001ee0 <__aeabi_dsub+0x360>)
 8001e52:	1c7d      	adds	r5, r7, #1
 8001e54:	4215      	tst	r5, r2
 8001e56:	d000      	beq.n	8001e5a <__aeabi_dsub+0x2da>
 8001e58:	e0aa      	b.n	8001fb0 <__aeabi_dsub+0x430>
 8001e5a:	4662      	mov	r2, ip
 8001e5c:	0025      	movs	r5, r4
 8001e5e:	9b02      	ldr	r3, [sp, #8]
 8001e60:	4305      	orrs	r5, r0
 8001e62:	431a      	orrs	r2, r3
 8001e64:	2f00      	cmp	r7, #0
 8001e66:	d000      	beq.n	8001e6a <__aeabi_dsub+0x2ea>
 8001e68:	e0f5      	b.n	8002056 <__aeabi_dsub+0x4d6>
 8001e6a:	2d00      	cmp	r5, #0
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x2f0>
 8001e6e:	e16b      	b.n	8002148 <__aeabi_dsub+0x5c8>
 8001e70:	2a00      	cmp	r2, #0
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x2f6>
 8001e74:	e152      	b.n	800211c <__aeabi_dsub+0x59c>
 8001e76:	4663      	mov	r3, ip
 8001e78:	1ac5      	subs	r5, r0, r3
 8001e7a:	9b02      	ldr	r3, [sp, #8]
 8001e7c:	1ae2      	subs	r2, r4, r3
 8001e7e:	42a8      	cmp	r0, r5
 8001e80:	419b      	sbcs	r3, r3
 8001e82:	425b      	negs	r3, r3
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	021a      	lsls	r2, r3, #8
 8001e88:	d400      	bmi.n	8001e8c <__aeabi_dsub+0x30c>
 8001e8a:	e1d5      	b.n	8002238 <__aeabi_dsub+0x6b8>
 8001e8c:	4663      	mov	r3, ip
 8001e8e:	1a1d      	subs	r5, r3, r0
 8001e90:	45ac      	cmp	ip, r5
 8001e92:	4192      	sbcs	r2, r2
 8001e94:	2601      	movs	r6, #1
 8001e96:	9b02      	ldr	r3, [sp, #8]
 8001e98:	4252      	negs	r2, r2
 8001e9a:	1b1c      	subs	r4, r3, r4
 8001e9c:	4688      	mov	r8, r1
 8001e9e:	1aa4      	subs	r4, r4, r2
 8001ea0:	400e      	ands	r6, r1
 8001ea2:	e6f6      	b.n	8001c92 <__aeabi_dsub+0x112>
 8001ea4:	4297      	cmp	r7, r2
 8001ea6:	d03f      	beq.n	8001f28 <__aeabi_dsub+0x3a8>
 8001ea8:	4652      	mov	r2, sl
 8001eaa:	2501      	movs	r5, #1
 8001eac:	2a38      	cmp	r2, #56	@ 0x38
 8001eae:	dd00      	ble.n	8001eb2 <__aeabi_dsub+0x332>
 8001eb0:	e74a      	b.n	8001d48 <__aeabi_dsub+0x1c8>
 8001eb2:	2280      	movs	r2, #128	@ 0x80
 8001eb4:	9b02      	ldr	r3, [sp, #8]
 8001eb6:	0412      	lsls	r2, r2, #16
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	e72d      	b.n	8001d1a <__aeabi_dsub+0x19a>
 8001ebe:	003c      	movs	r4, r7
 8001ec0:	2500      	movs	r5, #0
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	e705      	b.n	8001cd2 <__aeabi_dsub+0x152>
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	402b      	ands	r3, r5
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d000      	beq.n	8001ed0 <__aeabi_dsub+0x350>
 8001ece:	e6e2      	b.n	8001c96 <__aeabi_dsub+0x116>
 8001ed0:	e06b      	b.n	8001faa <__aeabi_dsub+0x42a>
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	000007ff 	.word	0x000007ff
 8001ed8:	ff7fffff 	.word	0xff7fffff
 8001edc:	fffff801 	.word	0xfffff801
 8001ee0:	000007fe 	.word	0x000007fe
 8001ee4:	0028      	movs	r0, r5
 8001ee6:	f000 fb63 	bl	80025b0 <__clzsi2>
 8001eea:	0003      	movs	r3, r0
 8001eec:	3318      	adds	r3, #24
 8001eee:	2b1f      	cmp	r3, #31
 8001ef0:	dc00      	bgt.n	8001ef4 <__aeabi_dsub+0x374>
 8001ef2:	e6b4      	b.n	8001c5e <__aeabi_dsub+0xde>
 8001ef4:	002a      	movs	r2, r5
 8001ef6:	3808      	subs	r0, #8
 8001ef8:	4082      	lsls	r2, r0
 8001efa:	429f      	cmp	r7, r3
 8001efc:	dd00      	ble.n	8001f00 <__aeabi_dsub+0x380>
 8001efe:	e0b9      	b.n	8002074 <__aeabi_dsub+0x4f4>
 8001f00:	1bdb      	subs	r3, r3, r7
 8001f02:	1c58      	adds	r0, r3, #1
 8001f04:	281f      	cmp	r0, #31
 8001f06:	dc00      	bgt.n	8001f0a <__aeabi_dsub+0x38a>
 8001f08:	e1a0      	b.n	800224c <__aeabi_dsub+0x6cc>
 8001f0a:	0015      	movs	r5, r2
 8001f0c:	3b1f      	subs	r3, #31
 8001f0e:	40dd      	lsrs	r5, r3
 8001f10:	2820      	cmp	r0, #32
 8001f12:	d005      	beq.n	8001f20 <__aeabi_dsub+0x3a0>
 8001f14:	2340      	movs	r3, #64	@ 0x40
 8001f16:	1a1b      	subs	r3, r3, r0
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	1e53      	subs	r3, r2, #1
 8001f1c:	419a      	sbcs	r2, r3
 8001f1e:	4315      	orrs	r5, r2
 8001f20:	2307      	movs	r3, #7
 8001f22:	2700      	movs	r7, #0
 8001f24:	402b      	ands	r3, r5
 8001f26:	e7d0      	b.n	8001eca <__aeabi_dsub+0x34a>
 8001f28:	08c0      	lsrs	r0, r0, #3
 8001f2a:	0762      	lsls	r2, r4, #29
 8001f2c:	4302      	orrs	r2, r0
 8001f2e:	08e4      	lsrs	r4, r4, #3
 8001f30:	e737      	b.n	8001da2 <__aeabi_dsub+0x222>
 8001f32:	08ea      	lsrs	r2, r5, #3
 8001f34:	0763      	lsls	r3, r4, #29
 8001f36:	431a      	orrs	r2, r3
 8001f38:	4bd3      	ldr	r3, [pc, #844]	@ (8002288 <__aeabi_dsub+0x708>)
 8001f3a:	08e4      	lsrs	r4, r4, #3
 8001f3c:	429f      	cmp	r7, r3
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_dsub+0x3c2>
 8001f40:	e72f      	b.n	8001da2 <__aeabi_dsub+0x222>
 8001f42:	0324      	lsls	r4, r4, #12
 8001f44:	0b25      	lsrs	r5, r4, #12
 8001f46:	057c      	lsls	r4, r7, #21
 8001f48:	0d64      	lsrs	r4, r4, #21
 8001f4a:	e6c2      	b.n	8001cd2 <__aeabi_dsub+0x152>
 8001f4c:	46ca      	mov	sl, r9
 8001f4e:	0022      	movs	r2, r4
 8001f50:	4302      	orrs	r2, r0
 8001f52:	d158      	bne.n	8002006 <__aeabi_dsub+0x486>
 8001f54:	4663      	mov	r3, ip
 8001f56:	000e      	movs	r6, r1
 8001f58:	9c02      	ldr	r4, [sp, #8]
 8001f5a:	9303      	str	r3, [sp, #12]
 8001f5c:	9b03      	ldr	r3, [sp, #12]
 8001f5e:	4657      	mov	r7, sl
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	e7e7      	b.n	8001f34 <__aeabi_dsub+0x3b4>
 8001f64:	4cc9      	ldr	r4, [pc, #804]	@ (800228c <__aeabi_dsub+0x70c>)
 8001f66:	1aff      	subs	r7, r7, r3
 8001f68:	4014      	ands	r4, r2
 8001f6a:	e692      	b.n	8001c92 <__aeabi_dsub+0x112>
 8001f6c:	4dc8      	ldr	r5, [pc, #800]	@ (8002290 <__aeabi_dsub+0x710>)
 8001f6e:	1c7a      	adds	r2, r7, #1
 8001f70:	422a      	tst	r2, r5
 8001f72:	d000      	beq.n	8001f76 <__aeabi_dsub+0x3f6>
 8001f74:	e084      	b.n	8002080 <__aeabi_dsub+0x500>
 8001f76:	0022      	movs	r2, r4
 8001f78:	4302      	orrs	r2, r0
 8001f7a:	2f00      	cmp	r7, #0
 8001f7c:	d000      	beq.n	8001f80 <__aeabi_dsub+0x400>
 8001f7e:	e0ef      	b.n	8002160 <__aeabi_dsub+0x5e0>
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d100      	bne.n	8001f86 <__aeabi_dsub+0x406>
 8001f84:	e0e5      	b.n	8002152 <__aeabi_dsub+0x5d2>
 8001f86:	4662      	mov	r2, ip
 8001f88:	9902      	ldr	r1, [sp, #8]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x410>
 8001f8e:	e0c5      	b.n	800211c <__aeabi_dsub+0x59c>
 8001f90:	4663      	mov	r3, ip
 8001f92:	18c5      	adds	r5, r0, r3
 8001f94:	468c      	mov	ip, r1
 8001f96:	4285      	cmp	r5, r0
 8001f98:	4180      	sbcs	r0, r0
 8001f9a:	4464      	add	r4, ip
 8001f9c:	4240      	negs	r0, r0
 8001f9e:	1824      	adds	r4, r4, r0
 8001fa0:	0223      	lsls	r3, r4, #8
 8001fa2:	d502      	bpl.n	8001faa <__aeabi_dsub+0x42a>
 8001fa4:	4bb9      	ldr	r3, [pc, #740]	@ (800228c <__aeabi_dsub+0x70c>)
 8001fa6:	3701      	adds	r7, #1
 8001fa8:	401c      	ands	r4, r3
 8001faa:	46ba      	mov	sl, r7
 8001fac:	9503      	str	r5, [sp, #12]
 8001fae:	e7d5      	b.n	8001f5c <__aeabi_dsub+0x3dc>
 8001fb0:	4662      	mov	r2, ip
 8001fb2:	1a85      	subs	r5, r0, r2
 8001fb4:	42a8      	cmp	r0, r5
 8001fb6:	4192      	sbcs	r2, r2
 8001fb8:	4252      	negs	r2, r2
 8001fba:	4691      	mov	r9, r2
 8001fbc:	9b02      	ldr	r3, [sp, #8]
 8001fbe:	1ae3      	subs	r3, r4, r3
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	464b      	mov	r3, r9
 8001fc4:	1ad2      	subs	r2, r2, r3
 8001fc6:	0013      	movs	r3, r2
 8001fc8:	4691      	mov	r9, r2
 8001fca:	021a      	lsls	r2, r3, #8
 8001fcc:	d46c      	bmi.n	80020a8 <__aeabi_dsub+0x528>
 8001fce:	464a      	mov	r2, r9
 8001fd0:	464c      	mov	r4, r9
 8001fd2:	432a      	orrs	r2, r5
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x458>
 8001fd6:	e63a      	b.n	8001c4e <__aeabi_dsub+0xce>
 8001fd8:	2600      	movs	r6, #0
 8001fda:	2400      	movs	r4, #0
 8001fdc:	2500      	movs	r5, #0
 8001fde:	e678      	b.n	8001cd2 <__aeabi_dsub+0x152>
 8001fe0:	9902      	ldr	r1, [sp, #8]
 8001fe2:	4653      	mov	r3, sl
 8001fe4:	000d      	movs	r5, r1
 8001fe6:	3a20      	subs	r2, #32
 8001fe8:	40d5      	lsrs	r5, r2
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d006      	beq.n	8001ffc <__aeabi_dsub+0x47c>
 8001fee:	2240      	movs	r2, #64	@ 0x40
 8001ff0:	1ad2      	subs	r2, r2, r3
 8001ff2:	000b      	movs	r3, r1
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	4662      	mov	r2, ip
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	4693      	mov	fp, r2
 8001ffc:	465b      	mov	r3, fp
 8001ffe:	1e5a      	subs	r2, r3, #1
 8002000:	4193      	sbcs	r3, r2
 8002002:	431d      	orrs	r5, r3
 8002004:	e619      	b.n	8001c3a <__aeabi_dsub+0xba>
 8002006:	4653      	mov	r3, sl
 8002008:	1e5a      	subs	r2, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x490>
 800200e:	e0c6      	b.n	800219e <__aeabi_dsub+0x61e>
 8002010:	4e9d      	ldr	r6, [pc, #628]	@ (8002288 <__aeabi_dsub+0x708>)
 8002012:	45b2      	cmp	sl, r6
 8002014:	d100      	bne.n	8002018 <__aeabi_dsub+0x498>
 8002016:	e6bd      	b.n	8001d94 <__aeabi_dsub+0x214>
 8002018:	4688      	mov	r8, r1
 800201a:	000e      	movs	r6, r1
 800201c:	2501      	movs	r5, #1
 800201e:	2a38      	cmp	r2, #56	@ 0x38
 8002020:	dc10      	bgt.n	8002044 <__aeabi_dsub+0x4c4>
 8002022:	2a1f      	cmp	r2, #31
 8002024:	dc7f      	bgt.n	8002126 <__aeabi_dsub+0x5a6>
 8002026:	2120      	movs	r1, #32
 8002028:	0025      	movs	r5, r4
 800202a:	1a89      	subs	r1, r1, r2
 800202c:	0007      	movs	r7, r0
 800202e:	4088      	lsls	r0, r1
 8002030:	408d      	lsls	r5, r1
 8002032:	40d7      	lsrs	r7, r2
 8002034:	40d4      	lsrs	r4, r2
 8002036:	1e41      	subs	r1, r0, #1
 8002038:	4188      	sbcs	r0, r1
 800203a:	9b02      	ldr	r3, [sp, #8]
 800203c:	433d      	orrs	r5, r7
 800203e:	1b1b      	subs	r3, r3, r4
 8002040:	4305      	orrs	r5, r0
 8002042:	9302      	str	r3, [sp, #8]
 8002044:	4662      	mov	r2, ip
 8002046:	1b55      	subs	r5, r2, r5
 8002048:	45ac      	cmp	ip, r5
 800204a:	4192      	sbcs	r2, r2
 800204c:	9b02      	ldr	r3, [sp, #8]
 800204e:	4252      	negs	r2, r2
 8002050:	464f      	mov	r7, r9
 8002052:	1a9c      	subs	r4, r3, r2
 8002054:	e5f6      	b.n	8001c44 <__aeabi_dsub+0xc4>
 8002056:	2d00      	cmp	r5, #0
 8002058:	d000      	beq.n	800205c <__aeabi_dsub+0x4dc>
 800205a:	e0b7      	b.n	80021cc <__aeabi_dsub+0x64c>
 800205c:	2a00      	cmp	r2, #0
 800205e:	d100      	bne.n	8002062 <__aeabi_dsub+0x4e2>
 8002060:	e0f0      	b.n	8002244 <__aeabi_dsub+0x6c4>
 8002062:	2601      	movs	r6, #1
 8002064:	400e      	ands	r6, r1
 8002066:	4663      	mov	r3, ip
 8002068:	9802      	ldr	r0, [sp, #8]
 800206a:	08d9      	lsrs	r1, r3, #3
 800206c:	0742      	lsls	r2, r0, #29
 800206e:	430a      	orrs	r2, r1
 8002070:	08c4      	lsrs	r4, r0, #3
 8002072:	e696      	b.n	8001da2 <__aeabi_dsub+0x222>
 8002074:	4c85      	ldr	r4, [pc, #532]	@ (800228c <__aeabi_dsub+0x70c>)
 8002076:	1aff      	subs	r7, r7, r3
 8002078:	4014      	ands	r4, r2
 800207a:	0762      	lsls	r2, r4, #29
 800207c:	08e4      	lsrs	r4, r4, #3
 800207e:	e760      	b.n	8001f42 <__aeabi_dsub+0x3c2>
 8002080:	4981      	ldr	r1, [pc, #516]	@ (8002288 <__aeabi_dsub+0x708>)
 8002082:	428a      	cmp	r2, r1
 8002084:	d100      	bne.n	8002088 <__aeabi_dsub+0x508>
 8002086:	e0c9      	b.n	800221c <__aeabi_dsub+0x69c>
 8002088:	4663      	mov	r3, ip
 800208a:	18c1      	adds	r1, r0, r3
 800208c:	4281      	cmp	r1, r0
 800208e:	4180      	sbcs	r0, r0
 8002090:	9b02      	ldr	r3, [sp, #8]
 8002092:	4240      	negs	r0, r0
 8002094:	18e3      	adds	r3, r4, r3
 8002096:	181b      	adds	r3, r3, r0
 8002098:	07dd      	lsls	r5, r3, #31
 800209a:	085c      	lsrs	r4, r3, #1
 800209c:	2307      	movs	r3, #7
 800209e:	0849      	lsrs	r1, r1, #1
 80020a0:	430d      	orrs	r5, r1
 80020a2:	0017      	movs	r7, r2
 80020a4:	402b      	ands	r3, r5
 80020a6:	e710      	b.n	8001eca <__aeabi_dsub+0x34a>
 80020a8:	4663      	mov	r3, ip
 80020aa:	1a1d      	subs	r5, r3, r0
 80020ac:	45ac      	cmp	ip, r5
 80020ae:	4192      	sbcs	r2, r2
 80020b0:	2601      	movs	r6, #1
 80020b2:	9b02      	ldr	r3, [sp, #8]
 80020b4:	4252      	negs	r2, r2
 80020b6:	1b1c      	subs	r4, r3, r4
 80020b8:	4688      	mov	r8, r1
 80020ba:	1aa4      	subs	r4, r4, r2
 80020bc:	400e      	ands	r6, r1
 80020be:	e5c6      	b.n	8001c4e <__aeabi_dsub+0xce>
 80020c0:	4663      	mov	r3, ip
 80020c2:	18c5      	adds	r5, r0, r3
 80020c4:	9b02      	ldr	r3, [sp, #8]
 80020c6:	4285      	cmp	r5, r0
 80020c8:	4180      	sbcs	r0, r0
 80020ca:	469c      	mov	ip, r3
 80020cc:	4240      	negs	r0, r0
 80020ce:	4464      	add	r4, ip
 80020d0:	1824      	adds	r4, r4, r0
 80020d2:	2701      	movs	r7, #1
 80020d4:	0223      	lsls	r3, r4, #8
 80020d6:	d400      	bmi.n	80020da <__aeabi_dsub+0x55a>
 80020d8:	e6f5      	b.n	8001ec6 <__aeabi_dsub+0x346>
 80020da:	2702      	movs	r7, #2
 80020dc:	e641      	b.n	8001d62 <__aeabi_dsub+0x1e2>
 80020de:	4663      	mov	r3, ip
 80020e0:	1ac5      	subs	r5, r0, r3
 80020e2:	42a8      	cmp	r0, r5
 80020e4:	4180      	sbcs	r0, r0
 80020e6:	9b02      	ldr	r3, [sp, #8]
 80020e8:	4240      	negs	r0, r0
 80020ea:	1ae4      	subs	r4, r4, r3
 80020ec:	2701      	movs	r7, #1
 80020ee:	1a24      	subs	r4, r4, r0
 80020f0:	e5a8      	b.n	8001c44 <__aeabi_dsub+0xc4>
 80020f2:	9d02      	ldr	r5, [sp, #8]
 80020f4:	4652      	mov	r2, sl
 80020f6:	002b      	movs	r3, r5
 80020f8:	3a20      	subs	r2, #32
 80020fa:	40d3      	lsrs	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	4653      	mov	r3, sl
 8002100:	2b20      	cmp	r3, #32
 8002102:	d006      	beq.n	8002112 <__aeabi_dsub+0x592>
 8002104:	2240      	movs	r2, #64	@ 0x40
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	002b      	movs	r3, r5
 800210a:	4093      	lsls	r3, r2
 800210c:	4662      	mov	r2, ip
 800210e:	431a      	orrs	r2, r3
 8002110:	4693      	mov	fp, r2
 8002112:	465d      	mov	r5, fp
 8002114:	1e6b      	subs	r3, r5, #1
 8002116:	419d      	sbcs	r5, r3
 8002118:	430d      	orrs	r5, r1
 800211a:	e615      	b.n	8001d48 <__aeabi_dsub+0x1c8>
 800211c:	0762      	lsls	r2, r4, #29
 800211e:	08c0      	lsrs	r0, r0, #3
 8002120:	4302      	orrs	r2, r0
 8002122:	08e4      	lsrs	r4, r4, #3
 8002124:	e70d      	b.n	8001f42 <__aeabi_dsub+0x3c2>
 8002126:	0011      	movs	r1, r2
 8002128:	0027      	movs	r7, r4
 800212a:	3920      	subs	r1, #32
 800212c:	40cf      	lsrs	r7, r1
 800212e:	2a20      	cmp	r2, #32
 8002130:	d005      	beq.n	800213e <__aeabi_dsub+0x5be>
 8002132:	2140      	movs	r1, #64	@ 0x40
 8002134:	1a8a      	subs	r2, r1, r2
 8002136:	4094      	lsls	r4, r2
 8002138:	0025      	movs	r5, r4
 800213a:	4305      	orrs	r5, r0
 800213c:	9503      	str	r5, [sp, #12]
 800213e:	9d03      	ldr	r5, [sp, #12]
 8002140:	1e6a      	subs	r2, r5, #1
 8002142:	4195      	sbcs	r5, r2
 8002144:	433d      	orrs	r5, r7
 8002146:	e77d      	b.n	8002044 <__aeabi_dsub+0x4c4>
 8002148:	2a00      	cmp	r2, #0
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x5ce>
 800214c:	e744      	b.n	8001fd8 <__aeabi_dsub+0x458>
 800214e:	2601      	movs	r6, #1
 8002150:	400e      	ands	r6, r1
 8002152:	4663      	mov	r3, ip
 8002154:	08d9      	lsrs	r1, r3, #3
 8002156:	9b02      	ldr	r3, [sp, #8]
 8002158:	075a      	lsls	r2, r3, #29
 800215a:	430a      	orrs	r2, r1
 800215c:	08dc      	lsrs	r4, r3, #3
 800215e:	e6f0      	b.n	8001f42 <__aeabi_dsub+0x3c2>
 8002160:	2a00      	cmp	r2, #0
 8002162:	d028      	beq.n	80021b6 <__aeabi_dsub+0x636>
 8002164:	4662      	mov	r2, ip
 8002166:	9f02      	ldr	r7, [sp, #8]
 8002168:	08c0      	lsrs	r0, r0, #3
 800216a:	433a      	orrs	r2, r7
 800216c:	d100      	bne.n	8002170 <__aeabi_dsub+0x5f0>
 800216e:	e6dc      	b.n	8001f2a <__aeabi_dsub+0x3aa>
 8002170:	0762      	lsls	r2, r4, #29
 8002172:	4310      	orrs	r0, r2
 8002174:	2280      	movs	r2, #128	@ 0x80
 8002176:	08e4      	lsrs	r4, r4, #3
 8002178:	0312      	lsls	r2, r2, #12
 800217a:	4214      	tst	r4, r2
 800217c:	d009      	beq.n	8002192 <__aeabi_dsub+0x612>
 800217e:	08fd      	lsrs	r5, r7, #3
 8002180:	4215      	tst	r5, r2
 8002182:	d106      	bne.n	8002192 <__aeabi_dsub+0x612>
 8002184:	4663      	mov	r3, ip
 8002186:	2601      	movs	r6, #1
 8002188:	002c      	movs	r4, r5
 800218a:	08d8      	lsrs	r0, r3, #3
 800218c:	077b      	lsls	r3, r7, #29
 800218e:	4318      	orrs	r0, r3
 8002190:	400e      	ands	r6, r1
 8002192:	0f42      	lsrs	r2, r0, #29
 8002194:	00c0      	lsls	r0, r0, #3
 8002196:	08c0      	lsrs	r0, r0, #3
 8002198:	0752      	lsls	r2, r2, #29
 800219a:	4302      	orrs	r2, r0
 800219c:	e601      	b.n	8001da2 <__aeabi_dsub+0x222>
 800219e:	4663      	mov	r3, ip
 80021a0:	1a1d      	subs	r5, r3, r0
 80021a2:	45ac      	cmp	ip, r5
 80021a4:	4192      	sbcs	r2, r2
 80021a6:	9b02      	ldr	r3, [sp, #8]
 80021a8:	4252      	negs	r2, r2
 80021aa:	1b1c      	subs	r4, r3, r4
 80021ac:	000e      	movs	r6, r1
 80021ae:	4688      	mov	r8, r1
 80021b0:	2701      	movs	r7, #1
 80021b2:	1aa4      	subs	r4, r4, r2
 80021b4:	e546      	b.n	8001c44 <__aeabi_dsub+0xc4>
 80021b6:	4663      	mov	r3, ip
 80021b8:	08d9      	lsrs	r1, r3, #3
 80021ba:	9b02      	ldr	r3, [sp, #8]
 80021bc:	075a      	lsls	r2, r3, #29
 80021be:	430a      	orrs	r2, r1
 80021c0:	08dc      	lsrs	r4, r3, #3
 80021c2:	e5ee      	b.n	8001da2 <__aeabi_dsub+0x222>
 80021c4:	4663      	mov	r3, ip
 80021c6:	9c02      	ldr	r4, [sp, #8]
 80021c8:	9303      	str	r3, [sp, #12]
 80021ca:	e6c7      	b.n	8001f5c <__aeabi_dsub+0x3dc>
 80021cc:	08c0      	lsrs	r0, r0, #3
 80021ce:	2a00      	cmp	r2, #0
 80021d0:	d100      	bne.n	80021d4 <__aeabi_dsub+0x654>
 80021d2:	e6aa      	b.n	8001f2a <__aeabi_dsub+0x3aa>
 80021d4:	0762      	lsls	r2, r4, #29
 80021d6:	4310      	orrs	r0, r2
 80021d8:	2280      	movs	r2, #128	@ 0x80
 80021da:	08e4      	lsrs	r4, r4, #3
 80021dc:	0312      	lsls	r2, r2, #12
 80021de:	4214      	tst	r4, r2
 80021e0:	d0d7      	beq.n	8002192 <__aeabi_dsub+0x612>
 80021e2:	9f02      	ldr	r7, [sp, #8]
 80021e4:	08fd      	lsrs	r5, r7, #3
 80021e6:	4215      	tst	r5, r2
 80021e8:	d1d3      	bne.n	8002192 <__aeabi_dsub+0x612>
 80021ea:	4663      	mov	r3, ip
 80021ec:	2601      	movs	r6, #1
 80021ee:	08d8      	lsrs	r0, r3, #3
 80021f0:	077b      	lsls	r3, r7, #29
 80021f2:	002c      	movs	r4, r5
 80021f4:	4318      	orrs	r0, r3
 80021f6:	400e      	ands	r6, r1
 80021f8:	e7cb      	b.n	8002192 <__aeabi_dsub+0x612>
 80021fa:	000a      	movs	r2, r1
 80021fc:	0027      	movs	r7, r4
 80021fe:	3a20      	subs	r2, #32
 8002200:	40d7      	lsrs	r7, r2
 8002202:	2920      	cmp	r1, #32
 8002204:	d005      	beq.n	8002212 <__aeabi_dsub+0x692>
 8002206:	2240      	movs	r2, #64	@ 0x40
 8002208:	1a52      	subs	r2, r2, r1
 800220a:	4094      	lsls	r4, r2
 800220c:	0025      	movs	r5, r4
 800220e:	4305      	orrs	r5, r0
 8002210:	9503      	str	r5, [sp, #12]
 8002212:	9d03      	ldr	r5, [sp, #12]
 8002214:	1e6a      	subs	r2, r5, #1
 8002216:	4195      	sbcs	r5, r2
 8002218:	432f      	orrs	r7, r5
 800221a:	e610      	b.n	8001e3e <__aeabi_dsub+0x2be>
 800221c:	0014      	movs	r4, r2
 800221e:	2500      	movs	r5, #0
 8002220:	2200      	movs	r2, #0
 8002222:	e556      	b.n	8001cd2 <__aeabi_dsub+0x152>
 8002224:	9b02      	ldr	r3, [sp, #8]
 8002226:	4460      	add	r0, ip
 8002228:	4699      	mov	r9, r3
 800222a:	4560      	cmp	r0, ip
 800222c:	4192      	sbcs	r2, r2
 800222e:	444c      	add	r4, r9
 8002230:	4252      	negs	r2, r2
 8002232:	0005      	movs	r5, r0
 8002234:	18a4      	adds	r4, r4, r2
 8002236:	e74c      	b.n	80020d2 <__aeabi_dsub+0x552>
 8002238:	001a      	movs	r2, r3
 800223a:	001c      	movs	r4, r3
 800223c:	432a      	orrs	r2, r5
 800223e:	d000      	beq.n	8002242 <__aeabi_dsub+0x6c2>
 8002240:	e6b3      	b.n	8001faa <__aeabi_dsub+0x42a>
 8002242:	e6c9      	b.n	8001fd8 <__aeabi_dsub+0x458>
 8002244:	2480      	movs	r4, #128	@ 0x80
 8002246:	2600      	movs	r6, #0
 8002248:	0324      	lsls	r4, r4, #12
 800224a:	e5ae      	b.n	8001daa <__aeabi_dsub+0x22a>
 800224c:	2120      	movs	r1, #32
 800224e:	2500      	movs	r5, #0
 8002250:	1a09      	subs	r1, r1, r0
 8002252:	e517      	b.n	8001c84 <__aeabi_dsub+0x104>
 8002254:	2200      	movs	r2, #0
 8002256:	2500      	movs	r5, #0
 8002258:	4c0b      	ldr	r4, [pc, #44]	@ (8002288 <__aeabi_dsub+0x708>)
 800225a:	e53a      	b.n	8001cd2 <__aeabi_dsub+0x152>
 800225c:	2d00      	cmp	r5, #0
 800225e:	d100      	bne.n	8002262 <__aeabi_dsub+0x6e2>
 8002260:	e5f6      	b.n	8001e50 <__aeabi_dsub+0x2d0>
 8002262:	464b      	mov	r3, r9
 8002264:	1bda      	subs	r2, r3, r7
 8002266:	4692      	mov	sl, r2
 8002268:	2f00      	cmp	r7, #0
 800226a:	d100      	bne.n	800226e <__aeabi_dsub+0x6ee>
 800226c:	e66f      	b.n	8001f4e <__aeabi_dsub+0x3ce>
 800226e:	2a38      	cmp	r2, #56	@ 0x38
 8002270:	dc05      	bgt.n	800227e <__aeabi_dsub+0x6fe>
 8002272:	2680      	movs	r6, #128	@ 0x80
 8002274:	0436      	lsls	r6, r6, #16
 8002276:	4334      	orrs	r4, r6
 8002278:	4688      	mov	r8, r1
 800227a:	000e      	movs	r6, r1
 800227c:	e6d1      	b.n	8002022 <__aeabi_dsub+0x4a2>
 800227e:	4688      	mov	r8, r1
 8002280:	000e      	movs	r6, r1
 8002282:	2501      	movs	r5, #1
 8002284:	e6de      	b.n	8002044 <__aeabi_dsub+0x4c4>
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	000007ff 	.word	0x000007ff
 800228c:	ff7fffff 	.word	0xff7fffff
 8002290:	000007fe 	.word	0x000007fe
 8002294:	2d00      	cmp	r5, #0
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x71a>
 8002298:	e668      	b.n	8001f6c <__aeabi_dsub+0x3ec>
 800229a:	464b      	mov	r3, r9
 800229c:	1bd9      	subs	r1, r3, r7
 800229e:	2f00      	cmp	r7, #0
 80022a0:	d101      	bne.n	80022a6 <__aeabi_dsub+0x726>
 80022a2:	468a      	mov	sl, r1
 80022a4:	e5a7      	b.n	8001df6 <__aeabi_dsub+0x276>
 80022a6:	2701      	movs	r7, #1
 80022a8:	2938      	cmp	r1, #56	@ 0x38
 80022aa:	dd00      	ble.n	80022ae <__aeabi_dsub+0x72e>
 80022ac:	e5c7      	b.n	8001e3e <__aeabi_dsub+0x2be>
 80022ae:	2280      	movs	r2, #128	@ 0x80
 80022b0:	0412      	lsls	r2, r2, #16
 80022b2:	4314      	orrs	r4, r2
 80022b4:	e5af      	b.n	8001e16 <__aeabi_dsub+0x296>
 80022b6:	46c0      	nop			@ (mov r8, r8)

080022b8 <__aeabi_dcmpun>:
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ba:	46c6      	mov	lr, r8
 80022bc:	031e      	lsls	r6, r3, #12
 80022be:	0b36      	lsrs	r6, r6, #12
 80022c0:	46b0      	mov	r8, r6
 80022c2:	4e0d      	ldr	r6, [pc, #52]	@ (80022f8 <__aeabi_dcmpun+0x40>)
 80022c4:	030c      	lsls	r4, r1, #12
 80022c6:	004d      	lsls	r5, r1, #1
 80022c8:	005f      	lsls	r7, r3, #1
 80022ca:	b500      	push	{lr}
 80022cc:	0b24      	lsrs	r4, r4, #12
 80022ce:	0d6d      	lsrs	r5, r5, #21
 80022d0:	0d7f      	lsrs	r7, r7, #21
 80022d2:	42b5      	cmp	r5, r6
 80022d4:	d00b      	beq.n	80022ee <__aeabi_dcmpun+0x36>
 80022d6:	4908      	ldr	r1, [pc, #32]	@ (80022f8 <__aeabi_dcmpun+0x40>)
 80022d8:	2000      	movs	r0, #0
 80022da:	428f      	cmp	r7, r1
 80022dc:	d104      	bne.n	80022e8 <__aeabi_dcmpun+0x30>
 80022de:	4646      	mov	r6, r8
 80022e0:	4316      	orrs	r6, r2
 80022e2:	0030      	movs	r0, r6
 80022e4:	1e43      	subs	r3, r0, #1
 80022e6:	4198      	sbcs	r0, r3
 80022e8:	bc80      	pop	{r7}
 80022ea:	46b8      	mov	r8, r7
 80022ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ee:	4304      	orrs	r4, r0
 80022f0:	2001      	movs	r0, #1
 80022f2:	2c00      	cmp	r4, #0
 80022f4:	d1f8      	bne.n	80022e8 <__aeabi_dcmpun+0x30>
 80022f6:	e7ee      	b.n	80022d6 <__aeabi_dcmpun+0x1e>
 80022f8:	000007ff 	.word	0x000007ff

080022fc <__aeabi_d2iz>:
 80022fc:	000b      	movs	r3, r1
 80022fe:	0002      	movs	r2, r0
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	4d16      	ldr	r5, [pc, #88]	@ (800235c <__aeabi_d2iz+0x60>)
 8002304:	030c      	lsls	r4, r1, #12
 8002306:	b082      	sub	sp, #8
 8002308:	0049      	lsls	r1, r1, #1
 800230a:	2000      	movs	r0, #0
 800230c:	9200      	str	r2, [sp, #0]
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	0b24      	lsrs	r4, r4, #12
 8002312:	0d49      	lsrs	r1, r1, #21
 8002314:	0fde      	lsrs	r6, r3, #31
 8002316:	42a9      	cmp	r1, r5
 8002318:	dd04      	ble.n	8002324 <__aeabi_d2iz+0x28>
 800231a:	4811      	ldr	r0, [pc, #68]	@ (8002360 <__aeabi_d2iz+0x64>)
 800231c:	4281      	cmp	r1, r0
 800231e:	dd03      	ble.n	8002328 <__aeabi_d2iz+0x2c>
 8002320:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <__aeabi_d2iz+0x68>)
 8002322:	18f0      	adds	r0, r6, r3
 8002324:	b002      	add	sp, #8
 8002326:	bd70      	pop	{r4, r5, r6, pc}
 8002328:	2080      	movs	r0, #128	@ 0x80
 800232a:	0340      	lsls	r0, r0, #13
 800232c:	4320      	orrs	r0, r4
 800232e:	4c0e      	ldr	r4, [pc, #56]	@ (8002368 <__aeabi_d2iz+0x6c>)
 8002330:	1a64      	subs	r4, r4, r1
 8002332:	2c1f      	cmp	r4, #31
 8002334:	dd08      	ble.n	8002348 <__aeabi_d2iz+0x4c>
 8002336:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <__aeabi_d2iz+0x70>)
 8002338:	1a5b      	subs	r3, r3, r1
 800233a:	40d8      	lsrs	r0, r3
 800233c:	0003      	movs	r3, r0
 800233e:	4258      	negs	r0, r3
 8002340:	2e00      	cmp	r6, #0
 8002342:	d1ef      	bne.n	8002324 <__aeabi_d2iz+0x28>
 8002344:	0018      	movs	r0, r3
 8002346:	e7ed      	b.n	8002324 <__aeabi_d2iz+0x28>
 8002348:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <__aeabi_d2iz+0x74>)
 800234a:	9a00      	ldr	r2, [sp, #0]
 800234c:	469c      	mov	ip, r3
 800234e:	0003      	movs	r3, r0
 8002350:	4461      	add	r1, ip
 8002352:	408b      	lsls	r3, r1
 8002354:	40e2      	lsrs	r2, r4
 8002356:	4313      	orrs	r3, r2
 8002358:	e7f1      	b.n	800233e <__aeabi_d2iz+0x42>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	000003fe 	.word	0x000003fe
 8002360:	0000041d 	.word	0x0000041d
 8002364:	7fffffff 	.word	0x7fffffff
 8002368:	00000433 	.word	0x00000433
 800236c:	00000413 	.word	0x00000413
 8002370:	fffffbed 	.word	0xfffffbed

08002374 <__aeabi_i2d>:
 8002374:	b570      	push	{r4, r5, r6, lr}
 8002376:	2800      	cmp	r0, #0
 8002378:	d016      	beq.n	80023a8 <__aeabi_i2d+0x34>
 800237a:	17c3      	asrs	r3, r0, #31
 800237c:	18c5      	adds	r5, r0, r3
 800237e:	405d      	eors	r5, r3
 8002380:	0fc4      	lsrs	r4, r0, #31
 8002382:	0028      	movs	r0, r5
 8002384:	f000 f914 	bl	80025b0 <__clzsi2>
 8002388:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <__aeabi_i2d+0x58>)
 800238a:	1a1b      	subs	r3, r3, r0
 800238c:	055b      	lsls	r3, r3, #21
 800238e:	0d5b      	lsrs	r3, r3, #21
 8002390:	280a      	cmp	r0, #10
 8002392:	dc14      	bgt.n	80023be <__aeabi_i2d+0x4a>
 8002394:	0002      	movs	r2, r0
 8002396:	002e      	movs	r6, r5
 8002398:	3215      	adds	r2, #21
 800239a:	4096      	lsls	r6, r2
 800239c:	220b      	movs	r2, #11
 800239e:	1a12      	subs	r2, r2, r0
 80023a0:	40d5      	lsrs	r5, r2
 80023a2:	032d      	lsls	r5, r5, #12
 80023a4:	0b2d      	lsrs	r5, r5, #12
 80023a6:	e003      	b.n	80023b0 <__aeabi_i2d+0x3c>
 80023a8:	2400      	movs	r4, #0
 80023aa:	2300      	movs	r3, #0
 80023ac:	2500      	movs	r5, #0
 80023ae:	2600      	movs	r6, #0
 80023b0:	051b      	lsls	r3, r3, #20
 80023b2:	432b      	orrs	r3, r5
 80023b4:	07e4      	lsls	r4, r4, #31
 80023b6:	4323      	orrs	r3, r4
 80023b8:	0030      	movs	r0, r6
 80023ba:	0019      	movs	r1, r3
 80023bc:	bd70      	pop	{r4, r5, r6, pc}
 80023be:	380b      	subs	r0, #11
 80023c0:	4085      	lsls	r5, r0
 80023c2:	032d      	lsls	r5, r5, #12
 80023c4:	2600      	movs	r6, #0
 80023c6:	0b2d      	lsrs	r5, r5, #12
 80023c8:	e7f2      	b.n	80023b0 <__aeabi_i2d+0x3c>
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	0000041e 	.word	0x0000041e

080023d0 <__aeabi_ui2d>:
 80023d0:	b510      	push	{r4, lr}
 80023d2:	1e04      	subs	r4, r0, #0
 80023d4:	d010      	beq.n	80023f8 <__aeabi_ui2d+0x28>
 80023d6:	f000 f8eb 	bl	80025b0 <__clzsi2>
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <__aeabi_ui2d+0x44>)
 80023dc:	1a1b      	subs	r3, r3, r0
 80023de:	055b      	lsls	r3, r3, #21
 80023e0:	0d5b      	lsrs	r3, r3, #21
 80023e2:	280a      	cmp	r0, #10
 80023e4:	dc0f      	bgt.n	8002406 <__aeabi_ui2d+0x36>
 80023e6:	220b      	movs	r2, #11
 80023e8:	0021      	movs	r1, r4
 80023ea:	1a12      	subs	r2, r2, r0
 80023ec:	40d1      	lsrs	r1, r2
 80023ee:	3015      	adds	r0, #21
 80023f0:	030a      	lsls	r2, r1, #12
 80023f2:	4084      	lsls	r4, r0
 80023f4:	0b12      	lsrs	r2, r2, #12
 80023f6:	e001      	b.n	80023fc <__aeabi_ui2d+0x2c>
 80023f8:	2300      	movs	r3, #0
 80023fa:	2200      	movs	r2, #0
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	4313      	orrs	r3, r2
 8002400:	0020      	movs	r0, r4
 8002402:	0019      	movs	r1, r3
 8002404:	bd10      	pop	{r4, pc}
 8002406:	0022      	movs	r2, r4
 8002408:	380b      	subs	r0, #11
 800240a:	4082      	lsls	r2, r0
 800240c:	0312      	lsls	r2, r2, #12
 800240e:	2400      	movs	r4, #0
 8002410:	0b12      	lsrs	r2, r2, #12
 8002412:	e7f3      	b.n	80023fc <__aeabi_ui2d+0x2c>
 8002414:	0000041e 	.word	0x0000041e

08002418 <__aeabi_f2d>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	0242      	lsls	r2, r0, #9
 800241c:	0043      	lsls	r3, r0, #1
 800241e:	0fc4      	lsrs	r4, r0, #31
 8002420:	20fe      	movs	r0, #254	@ 0xfe
 8002422:	0e1b      	lsrs	r3, r3, #24
 8002424:	1c59      	adds	r1, r3, #1
 8002426:	0a55      	lsrs	r5, r2, #9
 8002428:	4208      	tst	r0, r1
 800242a:	d00c      	beq.n	8002446 <__aeabi_f2d+0x2e>
 800242c:	21e0      	movs	r1, #224	@ 0xe0
 800242e:	0089      	lsls	r1, r1, #2
 8002430:	468c      	mov	ip, r1
 8002432:	076d      	lsls	r5, r5, #29
 8002434:	0b12      	lsrs	r2, r2, #12
 8002436:	4463      	add	r3, ip
 8002438:	051b      	lsls	r3, r3, #20
 800243a:	4313      	orrs	r3, r2
 800243c:	07e4      	lsls	r4, r4, #31
 800243e:	4323      	orrs	r3, r4
 8002440:	0028      	movs	r0, r5
 8002442:	0019      	movs	r1, r3
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	2b00      	cmp	r3, #0
 8002448:	d114      	bne.n	8002474 <__aeabi_f2d+0x5c>
 800244a:	2d00      	cmp	r5, #0
 800244c:	d01b      	beq.n	8002486 <__aeabi_f2d+0x6e>
 800244e:	0028      	movs	r0, r5
 8002450:	f000 f8ae 	bl	80025b0 <__clzsi2>
 8002454:	280a      	cmp	r0, #10
 8002456:	dc1c      	bgt.n	8002492 <__aeabi_f2d+0x7a>
 8002458:	230b      	movs	r3, #11
 800245a:	002a      	movs	r2, r5
 800245c:	1a1b      	subs	r3, r3, r0
 800245e:	40da      	lsrs	r2, r3
 8002460:	0003      	movs	r3, r0
 8002462:	3315      	adds	r3, #21
 8002464:	409d      	lsls	r5, r3
 8002466:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <__aeabi_f2d+0x88>)
 8002468:	0312      	lsls	r2, r2, #12
 800246a:	1a1b      	subs	r3, r3, r0
 800246c:	055b      	lsls	r3, r3, #21
 800246e:	0b12      	lsrs	r2, r2, #12
 8002470:	0d5b      	lsrs	r3, r3, #21
 8002472:	e7e1      	b.n	8002438 <__aeabi_f2d+0x20>
 8002474:	2d00      	cmp	r5, #0
 8002476:	d009      	beq.n	800248c <__aeabi_f2d+0x74>
 8002478:	0b13      	lsrs	r3, r2, #12
 800247a:	2280      	movs	r2, #128	@ 0x80
 800247c:	0312      	lsls	r2, r2, #12
 800247e:	431a      	orrs	r2, r3
 8002480:	076d      	lsls	r5, r5, #29
 8002482:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <__aeabi_f2d+0x8c>)
 8002484:	e7d8      	b.n	8002438 <__aeabi_f2d+0x20>
 8002486:	2300      	movs	r3, #0
 8002488:	2200      	movs	r2, #0
 800248a:	e7d5      	b.n	8002438 <__aeabi_f2d+0x20>
 800248c:	2200      	movs	r2, #0
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <__aeabi_f2d+0x8c>)
 8002490:	e7d2      	b.n	8002438 <__aeabi_f2d+0x20>
 8002492:	0003      	movs	r3, r0
 8002494:	002a      	movs	r2, r5
 8002496:	3b0b      	subs	r3, #11
 8002498:	409a      	lsls	r2, r3
 800249a:	2500      	movs	r5, #0
 800249c:	e7e3      	b.n	8002466 <__aeabi_f2d+0x4e>
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	00000389 	.word	0x00000389
 80024a4:	000007ff 	.word	0x000007ff

080024a8 <__aeabi_d2f>:
 80024a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024aa:	004b      	lsls	r3, r1, #1
 80024ac:	030f      	lsls	r7, r1, #12
 80024ae:	0d5b      	lsrs	r3, r3, #21
 80024b0:	4c3b      	ldr	r4, [pc, #236]	@ (80025a0 <__aeabi_d2f+0xf8>)
 80024b2:	0f45      	lsrs	r5, r0, #29
 80024b4:	b083      	sub	sp, #12
 80024b6:	0a7f      	lsrs	r7, r7, #9
 80024b8:	1c5e      	adds	r6, r3, #1
 80024ba:	432f      	orrs	r7, r5
 80024bc:	9000      	str	r0, [sp, #0]
 80024be:	9101      	str	r1, [sp, #4]
 80024c0:	0fca      	lsrs	r2, r1, #31
 80024c2:	00c5      	lsls	r5, r0, #3
 80024c4:	4226      	tst	r6, r4
 80024c6:	d00b      	beq.n	80024e0 <__aeabi_d2f+0x38>
 80024c8:	4936      	ldr	r1, [pc, #216]	@ (80025a4 <__aeabi_d2f+0xfc>)
 80024ca:	185c      	adds	r4, r3, r1
 80024cc:	2cfe      	cmp	r4, #254	@ 0xfe
 80024ce:	dd13      	ble.n	80024f8 <__aeabi_d2f+0x50>
 80024d0:	20ff      	movs	r0, #255	@ 0xff
 80024d2:	2300      	movs	r3, #0
 80024d4:	05c0      	lsls	r0, r0, #23
 80024d6:	4318      	orrs	r0, r3
 80024d8:	07d2      	lsls	r2, r2, #31
 80024da:	4310      	orrs	r0, r2
 80024dc:	b003      	add	sp, #12
 80024de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <__aeabi_d2f+0x42>
 80024e4:	2000      	movs	r0, #0
 80024e6:	2300      	movs	r3, #0
 80024e8:	e7f4      	b.n	80024d4 <__aeabi_d2f+0x2c>
 80024ea:	433d      	orrs	r5, r7
 80024ec:	d0f0      	beq.n	80024d0 <__aeabi_d2f+0x28>
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	03db      	lsls	r3, r3, #15
 80024f2:	20ff      	movs	r0, #255	@ 0xff
 80024f4:	433b      	orrs	r3, r7
 80024f6:	e7ed      	b.n	80024d4 <__aeabi_d2f+0x2c>
 80024f8:	2c00      	cmp	r4, #0
 80024fa:	dd14      	ble.n	8002526 <__aeabi_d2f+0x7e>
 80024fc:	9b00      	ldr	r3, [sp, #0]
 80024fe:	00ff      	lsls	r7, r7, #3
 8002500:	019b      	lsls	r3, r3, #6
 8002502:	1e58      	subs	r0, r3, #1
 8002504:	4183      	sbcs	r3, r0
 8002506:	0f69      	lsrs	r1, r5, #29
 8002508:	433b      	orrs	r3, r7
 800250a:	430b      	orrs	r3, r1
 800250c:	0759      	lsls	r1, r3, #29
 800250e:	d041      	beq.n	8002594 <__aeabi_d2f+0xec>
 8002510:	210f      	movs	r1, #15
 8002512:	4019      	ands	r1, r3
 8002514:	2904      	cmp	r1, #4
 8002516:	d028      	beq.n	800256a <__aeabi_d2f+0xc2>
 8002518:	3304      	adds	r3, #4
 800251a:	0159      	lsls	r1, r3, #5
 800251c:	d525      	bpl.n	800256a <__aeabi_d2f+0xc2>
 800251e:	3401      	adds	r4, #1
 8002520:	2300      	movs	r3, #0
 8002522:	b2e0      	uxtb	r0, r4
 8002524:	e7d6      	b.n	80024d4 <__aeabi_d2f+0x2c>
 8002526:	0021      	movs	r1, r4
 8002528:	3117      	adds	r1, #23
 800252a:	dbdb      	blt.n	80024e4 <__aeabi_d2f+0x3c>
 800252c:	2180      	movs	r1, #128	@ 0x80
 800252e:	201e      	movs	r0, #30
 8002530:	0409      	lsls	r1, r1, #16
 8002532:	4339      	orrs	r1, r7
 8002534:	1b00      	subs	r0, r0, r4
 8002536:	281f      	cmp	r0, #31
 8002538:	dd1b      	ble.n	8002572 <__aeabi_d2f+0xca>
 800253a:	2602      	movs	r6, #2
 800253c:	4276      	negs	r6, r6
 800253e:	1b34      	subs	r4, r6, r4
 8002540:	000e      	movs	r6, r1
 8002542:	40e6      	lsrs	r6, r4
 8002544:	0034      	movs	r4, r6
 8002546:	2820      	cmp	r0, #32
 8002548:	d004      	beq.n	8002554 <__aeabi_d2f+0xac>
 800254a:	4817      	ldr	r0, [pc, #92]	@ (80025a8 <__aeabi_d2f+0x100>)
 800254c:	4684      	mov	ip, r0
 800254e:	4463      	add	r3, ip
 8002550:	4099      	lsls	r1, r3
 8002552:	430d      	orrs	r5, r1
 8002554:	002b      	movs	r3, r5
 8002556:	1e59      	subs	r1, r3, #1
 8002558:	418b      	sbcs	r3, r1
 800255a:	4323      	orrs	r3, r4
 800255c:	0759      	lsls	r1, r3, #29
 800255e:	d015      	beq.n	800258c <__aeabi_d2f+0xe4>
 8002560:	210f      	movs	r1, #15
 8002562:	2400      	movs	r4, #0
 8002564:	4019      	ands	r1, r3
 8002566:	2904      	cmp	r1, #4
 8002568:	d117      	bne.n	800259a <__aeabi_d2f+0xf2>
 800256a:	019b      	lsls	r3, r3, #6
 800256c:	0a5b      	lsrs	r3, r3, #9
 800256e:	b2e0      	uxtb	r0, r4
 8002570:	e7b0      	b.n	80024d4 <__aeabi_d2f+0x2c>
 8002572:	4c0e      	ldr	r4, [pc, #56]	@ (80025ac <__aeabi_d2f+0x104>)
 8002574:	191c      	adds	r4, r3, r4
 8002576:	002b      	movs	r3, r5
 8002578:	40a5      	lsls	r5, r4
 800257a:	40c3      	lsrs	r3, r0
 800257c:	40a1      	lsls	r1, r4
 800257e:	1e68      	subs	r0, r5, #1
 8002580:	4185      	sbcs	r5, r0
 8002582:	4329      	orrs	r1, r5
 8002584:	430b      	orrs	r3, r1
 8002586:	2400      	movs	r4, #0
 8002588:	0759      	lsls	r1, r3, #29
 800258a:	d1c1      	bne.n	8002510 <__aeabi_d2f+0x68>
 800258c:	019b      	lsls	r3, r3, #6
 800258e:	2000      	movs	r0, #0
 8002590:	0a5b      	lsrs	r3, r3, #9
 8002592:	e79f      	b.n	80024d4 <__aeabi_d2f+0x2c>
 8002594:	08db      	lsrs	r3, r3, #3
 8002596:	b2e0      	uxtb	r0, r4
 8002598:	e79c      	b.n	80024d4 <__aeabi_d2f+0x2c>
 800259a:	3304      	adds	r3, #4
 800259c:	e7e5      	b.n	800256a <__aeabi_d2f+0xc2>
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	000007fe 	.word	0x000007fe
 80025a4:	fffffc80 	.word	0xfffffc80
 80025a8:	fffffca2 	.word	0xfffffca2
 80025ac:	fffffc82 	.word	0xfffffc82

080025b0 <__clzsi2>:
 80025b0:	211c      	movs	r1, #28
 80025b2:	2301      	movs	r3, #1
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	4298      	cmp	r0, r3
 80025b8:	d301      	bcc.n	80025be <__clzsi2+0xe>
 80025ba:	0c00      	lsrs	r0, r0, #16
 80025bc:	3910      	subs	r1, #16
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	4298      	cmp	r0, r3
 80025c2:	d301      	bcc.n	80025c8 <__clzsi2+0x18>
 80025c4:	0a00      	lsrs	r0, r0, #8
 80025c6:	3908      	subs	r1, #8
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	4298      	cmp	r0, r3
 80025cc:	d301      	bcc.n	80025d2 <__clzsi2+0x22>
 80025ce:	0900      	lsrs	r0, r0, #4
 80025d0:	3904      	subs	r1, #4
 80025d2:	a202      	add	r2, pc, #8	@ (adr r2, 80025dc <__clzsi2+0x2c>)
 80025d4:	5c10      	ldrb	r0, [r2, r0]
 80025d6:	1840      	adds	r0, r0, r1
 80025d8:	4770      	bx	lr
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	02020304 	.word	0x02020304
 80025e0:	01010101 	.word	0x01010101
	...

080025ec <LCD_EnablePulse>:
static void LCD_Send4Bits(uint8_t data);
static void LCD_SendCommand(uint8_t cmd);
static void LCD_SendData(uint8_t data);

static void LCD_EnablePulse(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80025f0:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <LCD_EnablePulse+0x30>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	2110      	movs	r1, #16
 80025f6:	0018      	movs	r0, r3
 80025f8:	f001 fee3 	bl	80043c2 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80025fc:	2001      	movs	r0, #1
 80025fe:	f000 fe47 	bl	8003290 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <LCD_EnablePulse+0x30>)
 8002604:	2200      	movs	r2, #0
 8002606:	2110      	movs	r1, #16
 8002608:	0018      	movs	r0, r3
 800260a:	f001 feda 	bl	80043c2 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800260e:	2001      	movs	r0, #1
 8002610:	f000 fe3e 	bl	8003290 <HAL_Delay>
}
 8002614:	46c0      	nop			@ (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	50000800 	.word	0x50000800

08002620 <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	0002      	movs	r2, r0
 8002628:	1dfb      	adds	r3, r7, #7
 800262a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data >> 0) & 0x01);
 800262c:	1dfb      	adds	r3, r7, #7
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2201      	movs	r2, #1
 8002632:	4013      	ands	r3, r2
 8002634:	b2da      	uxtb	r2, r3
 8002636:	2380      	movs	r3, #128	@ 0x80
 8002638:	00d9      	lsls	r1, r3, #3
 800263a:	23a0      	movs	r3, #160	@ 0xa0
 800263c:	05db      	lsls	r3, r3, #23
 800263e:	0018      	movs	r0, r3
 8002640:	f001 febf 	bl	80043c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data >> 1) & 0x01);
 8002644:	1dfb      	adds	r3, r7, #7
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2201      	movs	r2, #1
 800264e:	4013      	ands	r3, r2
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4811      	ldr	r0, [pc, #68]	@ (8002698 <LCD_Send4Bits+0x78>)
 8002654:	001a      	movs	r2, r3
 8002656:	2108      	movs	r1, #8
 8002658:	f001 feb3 	bl	80043c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data >> 2) & 0x01);
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	480b      	ldr	r0, [pc, #44]	@ (8002698 <LCD_Send4Bits+0x78>)
 800266c:	001a      	movs	r2, r3
 800266e:	2120      	movs	r1, #32
 8002670:	f001 fea7 	bl	80043c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data >> 3) & 0x01);
 8002674:	1dfb      	adds	r3, r7, #7
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2201      	movs	r2, #1
 800267e:	4013      	ands	r3, r2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4805      	ldr	r0, [pc, #20]	@ (8002698 <LCD_Send4Bits+0x78>)
 8002684:	001a      	movs	r2, r3
 8002686:	2110      	movs	r1, #16
 8002688:	f001 fe9b 	bl	80043c2 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 800268c:	f7ff ffae 	bl	80025ec <LCD_EnablePulse>
}
 8002690:	46c0      	nop			@ (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}
 8002698:	50000400 	.word	0x50000400

0800269c <LCD_SendCommand>:

static void LCD_SendCommand(uint8_t cmd)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	0002      	movs	r2, r0
 80026a4:	1dfb      	adds	r3, r7, #7
 80026a6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80026a8:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <LCD_SendCommand+0x44>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	2120      	movs	r1, #32
 80026ae:	0018      	movs	r0, r3
 80026b0:	f001 fe87 	bl	80043c2 <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	0018      	movs	r0, r3
 80026be:	f7ff ffaf 	bl	8002620 <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	220f      	movs	r2, #15
 80026c8:	4013      	ands	r3, r2
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7ff ffa7 	bl	8002620 <LCD_Send4Bits>
    HAL_Delay(2);
 80026d2:	2002      	movs	r0, #2
 80026d4:	f000 fddc 	bl	8003290 <HAL_Delay>
}
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	50000800 	.word	0x50000800

080026e4 <LCD_SendData>:

static void LCD_SendData(uint8_t data)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	0002      	movs	r2, r0
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80026f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <LCD_SendData+0x44>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	2120      	movs	r1, #32
 80026f6:	0018      	movs	r0, r3
 80026f8:	f001 fe63 	bl	80043c2 <HAL_GPIO_WritePin>
    LCD_Send4Bits(data >> 4);
 80026fc:	1dfb      	adds	r3, r7, #7
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	b2db      	uxtb	r3, r3
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff ff8b 	bl	8002620 <LCD_Send4Bits>
    LCD_Send4Bits(data & 0x0F);
 800270a:	1dfb      	adds	r3, r7, #7
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	220f      	movs	r2, #15
 8002710:	4013      	ands	r3, r2
 8002712:	b2db      	uxtb	r3, r3
 8002714:	0018      	movs	r0, r3
 8002716:	f7ff ff83 	bl	8002620 <LCD_Send4Bits>
    HAL_Delay(1);
 800271a:	2001      	movs	r0, #1
 800271c:	f000 fdb8 	bl	8003290 <HAL_Delay>
}
 8002720:	46c0      	nop			@ (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}
 8002728:	50000800 	.word	0x50000800

0800272c <LCD_Init>:

void LCD_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Espera após power-up
 8002730:	2032      	movs	r0, #50	@ 0x32
 8002732:	f000 fdad 	bl	8003290 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8002736:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <LCD_Init+0x78>)
 8002738:	2200      	movs	r2, #0
 800273a:	2120      	movs	r1, #32
 800273c:	0018      	movs	r0, r3
 800273e:	f001 fe40 	bl	80043c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8002742:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <LCD_Init+0x78>)
 8002744:	2200      	movs	r2, #0
 8002746:	2110      	movs	r1, #16
 8002748:	0018      	movs	r0, r3
 800274a:	f001 fe3a 	bl	80043c2 <HAL_GPIO_WritePin>

    // Inicialização modo 4 bits
    LCD_Send4Bits(0x03);
 800274e:	2003      	movs	r0, #3
 8002750:	f7ff ff66 	bl	8002620 <LCD_Send4Bits>
    HAL_Delay(5);
 8002754:	2005      	movs	r0, #5
 8002756:	f000 fd9b 	bl	8003290 <HAL_Delay>
    LCD_Send4Bits(0x03);
 800275a:	2003      	movs	r0, #3
 800275c:	f7ff ff60 	bl	8002620 <LCD_Send4Bits>
    HAL_Delay(5);
 8002760:	2005      	movs	r0, #5
 8002762:	f000 fd95 	bl	8003290 <HAL_Delay>
    LCD_Send4Bits(0x03);
 8002766:	2003      	movs	r0, #3
 8002768:	f7ff ff5a 	bl	8002620 <LCD_Send4Bits>
    HAL_Delay(5);
 800276c:	2005      	movs	r0, #5
 800276e:	f000 fd8f 	bl	8003290 <HAL_Delay>
    LCD_Send4Bits(0x02); // 4 bits
 8002772:	2002      	movs	r0, #2
 8002774:	f7ff ff54 	bl	8002620 <LCD_Send4Bits>
    HAL_Delay(1);
 8002778:	2001      	movs	r0, #1
 800277a:	f000 fd89 	bl	8003290 <HAL_Delay>

    LCD_SendCommand(0x28); // 2 linhas, 4 bits, 5x8 dots
 800277e:	2028      	movs	r0, #40	@ 0x28
 8002780:	f7ff ff8c 	bl	800269c <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, cursor OFF
 8002784:	200c      	movs	r0, #12
 8002786:	f7ff ff89 	bl	800269c <LCD_SendCommand>
    LCD_SendCommand(0x06); // Incremento automático
 800278a:	2006      	movs	r0, #6
 800278c:	f7ff ff86 	bl	800269c <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear
 8002790:	2001      	movs	r0, #1
 8002792:	f7ff ff83 	bl	800269c <LCD_SendCommand>
    HAL_Delay(2);
 8002796:	2002      	movs	r0, #2
 8002798:	f000 fd7a 	bl	8003290 <HAL_Delay>
}
 800279c:	46c0      	nop			@ (mov r8, r8)
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	50000800 	.word	0x50000800

080027a8 <LCD_Clear>:

void LCD_Clear(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 80027ac:	2001      	movs	r0, #1
 80027ae:	f7ff ff75 	bl	800269c <LCD_SendCommand>
    HAL_Delay(2);
 80027b2:	2002      	movs	r0, #2
 80027b4:	f000 fd6c 	bl	8003290 <HAL_Delay>
}
 80027b8:	46c0      	nop			@ (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	0002      	movs	r2, r0
 80027c6:	1dfb      	adds	r3, r7, #7
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	1dbb      	adds	r3, r7, #6
 80027cc:	1c0a      	adds	r2, r1, #0
 80027ce:	701a      	strb	r2, [r3, #0]
    uint8_t addr = (row == 0) ? 0x00 : 0x40;
 80027d0:	1dbb      	adds	r3, r7, #6
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <LCD_SetCursor+0x1e>
 80027d8:	2200      	movs	r2, #0
 80027da:	e000      	b.n	80027de <LCD_SetCursor+0x20>
 80027dc:	2240      	movs	r2, #64	@ 0x40
 80027de:	200f      	movs	r0, #15
 80027e0:	183b      	adds	r3, r7, r0
 80027e2:	701a      	strb	r2, [r3, #0]
    addr += col;
 80027e4:	183b      	adds	r3, r7, r0
 80027e6:	1839      	adds	r1, r7, r0
 80027e8:	1dfa      	adds	r2, r7, #7
 80027ea:	7809      	ldrb	r1, [r1, #0]
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	188a      	adds	r2, r1, r2
 80027f0:	701a      	strb	r2, [r3, #0]
    LCD_SendCommand(0x80 | addr);
 80027f2:	183b      	adds	r3, r7, r0
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2280      	movs	r2, #128	@ 0x80
 80027f8:	4252      	negs	r2, r2
 80027fa:	4313      	orrs	r3, r2
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	0018      	movs	r0, r3
 8002800:	f7ff ff4c 	bl	800269c <LCD_SendCommand>
}
 8002804:	46c0      	nop			@ (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	b004      	add	sp, #16
 800280a:	bd80      	pop	{r7, pc}

0800280c <LCD_Print>:

void LCD_Print(char* str)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
    while (*str)
 8002814:	e006      	b.n	8002824 <LCD_Print+0x18>
    {
        LCD_SendData(*str++);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	0018      	movs	r0, r3
 8002820:	f7ff ff60 	bl	80026e4 <LCD_SendData>
    while (*str)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f4      	bne.n	8002816 <LCD_Print+0xa>
    }
}
 800282c:	46c0      	nop			@ (mov r8, r8)
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	b002      	add	sp, #8
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <LCD_DisplayWelcome>:

void LCD_DisplayWelcome(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
    LCD_Clear();
 800283c:	f7ff ffb4 	bl	80027a8 <LCD_Clear>
    LCD_SetCursor(0, 0);
 8002840:	2100      	movs	r1, #0
 8002842:	2000      	movs	r0, #0
 8002844:	f7ff ffbb 	bl	80027be <LCD_SetCursor>
    LCD_Print("  Sistema Pronto ");
 8002848:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <LCD_DisplayWelcome+0x30>)
 800284a:	0018      	movs	r0, r3
 800284c:	f7ff ffde 	bl	800280c <LCD_Print>
    LCD_SetCursor(0, 1);
 8002850:	2101      	movs	r1, #1
 8002852:	2000      	movs	r0, #0
 8002854:	f7ff ffb3 	bl	80027be <LCD_SetCursor>
    LCD_Print("   STM32 + LCD   ");
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <LCD_DisplayWelcome+0x34>)
 800285a:	0018      	movs	r0, r3
 800285c:	f7ff ffd6 	bl	800280c <LCD_Print>
}
 8002860:	46c0      	nop			@ (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	08007e20 	.word	0x08007e20
 800286c:	08007e34 	.word	0x08007e34

08002870 <main>:
void Buzzer_Beep(uint16_t duration_ms);
void ReadTemperature(void);
void UpdateDisplay(void);

int main(void)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
    HAL_Init();
 8002876:	f000 fc85 	bl	8003184 <HAL_Init>
    SystemClock_Config();
 800287a:	f000 f927 	bl	8002acc <SystemClock_Config>
    GPIO_Init();
 800287e:	f000 f92b 	bl	8002ad8 <GPIO_Init>
    TIM1_Init();
 8002882:	f000 f9b9 	bl	8002bf8 <TIM1_Init>
    ADC1_Init();
 8002886:	f000 fa03 	bl	8002c90 <ADC1_Init>
    LCD_Init();
 800288a:	f7ff ff4f 	bl	800272c <LCD_Init>
  HAL_Delay(100);  // Aguarda estabilização da alimentação
 800288e:	2064      	movs	r0, #100	@ 0x64
 8002890:	f000 fcfe 	bl	8003290 <HAL_Delay>

    LCD_Init();
 8002894:	f7ff ff4a 	bl	800272c <LCD_Init>
    LCD_SetCursor(0, 0);
 8002898:	2100      	movs	r1, #0
 800289a:	2000      	movs	r0, #0
 800289c:	f7ff ff8f 	bl	80027be <LCD_SetCursor>
    LCD_Print("Hello World");
 80028a0:	4b81      	ldr	r3, [pc, #516]	@ (8002aa8 <main+0x238>)
 80028a2:	0018      	movs	r0, r3
 80028a4:	f7ff ffb2 	bl	800280c <LCD_Print>
    LCD_SetCursor(1, 0);
 80028a8:	2100      	movs	r1, #0
 80028aa:	2001      	movs	r0, #1
 80028ac:	f7ff ff87 	bl	80027be <LCD_SetCursor>
    LCD_Print("STM32 LCD Test");
 80028b0:	4b7e      	ldr	r3, [pc, #504]	@ (8002aac <main+0x23c>)
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7ff ffaa 	bl	800280c <LCD_Print>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80028b8:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab0 <main+0x240>)
 80028ba:	2100      	movs	r1, #0
 80028bc:	0018      	movs	r0, r3
 80028be:	f001 fe19 	bl	80044f4 <HAL_TIM_PWM_Start>
    LCD_DisplayWelcome();
 80028c2:	f7ff ffb9 	bl	8002838 <LCD_DisplayWelcome>
    Buzzer_Beep(200);
 80028c6:	20c8      	movs	r0, #200	@ 0xc8
 80028c8:	f000 faca 	bl	8002e60 <Buzzer_Beep>

    HAL_Delay(2000);
 80028cc:	23fa      	movs	r3, #250	@ 0xfa
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 fcdd 	bl	8003290 <HAL_Delay>

    LCD_Clear();
 80028d6:	f7ff ff67 	bl	80027a8 <LCD_Clear>

    uint32_t last_temp_read = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
    uint32_t last_timer_tick = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
    uint32_t last_display_update = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
    uint32_t last_alarm_toggle = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	603b      	str	r3, [r7, #0]

    while (1)
    {
        // Leitura da temperatura
        if (HAL_GetTick() - last_temp_read >= 100)
 80028ea:	f000 fcc7 	bl	800327c <HAL_GetTick>
 80028ee:	0002      	movs	r2, r0
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b63      	cmp	r3, #99	@ 0x63
 80028f6:	d905      	bls.n	8002904 <main+0x94>
        {
            last_temp_read = HAL_GetTick();
 80028f8:	f000 fcc0 	bl	800327c <HAL_GetTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	60fb      	str	r3, [r7, #12]
            ReadTemperature();
 8002900:	f000 fa14 	bl	8002d2c <ReadTemperature>
        }

        // Controle de alarme de temperatura
        if (temperature >= 50.0)
 8002904:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab4 <main+0x244>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	496b      	ldr	r1, [pc, #428]	@ (8002ab8 <main+0x248>)
 800290a:	1c18      	adds	r0, r3, #0
 800290c:	f7fd fdf8 	bl	8000500 <__aeabi_fcmpge>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d003      	beq.n	800291c <main+0xac>
        {
            temp_alert_active = 1;
 8002914:	4b69      	ldr	r3, [pc, #420]	@ (8002abc <main+0x24c>)
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e010      	b.n	800293e <main+0xce>
        }
        else
        {
            temp_alert_active = 0;
 800291c:	4b67      	ldr	r3, [pc, #412]	@ (8002abc <main+0x24c>)
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(ALARM_LED_GPIO_PORT, ALARM_LED, GPIO_PIN_RESET);
 8002922:	23a0      	movs	r3, #160	@ 0xa0
 8002924:	05db      	lsls	r3, r3, #23
 8002926:	2200      	movs	r2, #0
 8002928:	2110      	movs	r1, #16
 800292a:	0018      	movs	r0, r3
 800292c:	f001 fd49 	bl	80043c2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER, GPIO_PIN_RESET);
 8002930:	23a0      	movs	r3, #160	@ 0xa0
 8002932:	05db      	lsls	r3, r3, #23
 8002934:	2200      	movs	r2, #0
 8002936:	2108      	movs	r1, #8
 8002938:	0018      	movs	r0, r3
 800293a:	f001 fd42 	bl	80043c2 <HAL_GPIO_WritePin>
        }

        // Alarme (pisca LED e buzzer)
        if (temp_alert_active && (HAL_GetTick() - last_alarm_toggle >= 100))
 800293e:	4b5f      	ldr	r3, [pc, #380]	@ (8002abc <main+0x24c>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <main+0x104>
 8002946:	f000 fc99 	bl	800327c <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b63      	cmp	r3, #99	@ 0x63
 8002952:	d90f      	bls.n	8002974 <main+0x104>
        {
            last_alarm_toggle = HAL_GetTick();
 8002954:	f000 fc92 	bl	800327c <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	603b      	str	r3, [r7, #0]
            HAL_GPIO_TogglePin(ALARM_LED_GPIO_PORT, ALARM_LED);
 800295c:	23a0      	movs	r3, #160	@ 0xa0
 800295e:	05db      	lsls	r3, r3, #23
 8002960:	2110      	movs	r1, #16
 8002962:	0018      	movs	r0, r3
 8002964:	f001 fd4a 	bl	80043fc <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(BUZZER_GPIO_PORT, BUZZER);
 8002968:	23a0      	movs	r3, #160	@ 0xa0
 800296a:	05db      	lsls	r3, r3, #23
 800296c:	2108      	movs	r1, #8
 800296e:	0018      	movs	r0, r3
 8002970:	f001 fd44 	bl	80043fc <HAL_GPIO_TogglePin>
        }

        // Atualiza o display
        if (HAL_GetTick() - last_display_update >= 200)
 8002974:	f000 fc82 	bl	800327c <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002980:	d905      	bls.n	800298e <main+0x11e>
        {
            last_display_update = HAL_GetTick();
 8002982:	f000 fc7b 	bl	800327c <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	607b      	str	r3, [r7, #4]
            UpdateDisplay();
 800298a:	f000 fa29 	bl	8002de0 <UpdateDisplay>
        }

        // Controle de botões
        if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP) == GPIO_PIN_RESET)
 800298e:	23a0      	movs	r3, #160	@ 0xa0
 8002990:	05db      	lsls	r3, r3, #23
 8002992:	2101      	movs	r1, #1
 8002994:	0018      	movs	r0, r3
 8002996:	f001 fcf7 	bl	8004388 <HAL_GPIO_ReadPin>
 800299a:	1e03      	subs	r3, r0, #0
 800299c:	d11e      	bne.n	80029dc <main+0x16c>
        {
            if (duty_cycle < 100)
 800299e:	4b48      	ldr	r3, [pc, #288]	@ (8002ac0 <main+0x250>)
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	2b63      	cmp	r3, #99	@ 0x63
 80029a4:	d81a      	bhi.n	80029dc <main+0x16c>
            {
                duty_cycle += 5;
 80029a6:	4b46      	ldr	r3, [pc, #280]	@ (8002ac0 <main+0x250>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	3305      	adds	r3, #5
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	4b44      	ldr	r3, [pc, #272]	@ (8002ac0 <main+0x250>)
 80029b0:	801a      	strh	r2, [r3, #0]
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (duty_cycle * (htim1.Init.Period + 1)) / 100);
 80029b2:	4b43      	ldr	r3, [pc, #268]	@ (8002ac0 <main+0x250>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	001a      	movs	r2, r3
 80029b8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab0 <main+0x240>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	3301      	adds	r3, #1
 80029be:	435a      	muls	r2, r3
 80029c0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab0 <main+0x240>)
 80029c2:	681c      	ldr	r4, [r3, #0]
 80029c4:	2164      	movs	r1, #100	@ 0x64
 80029c6:	0010      	movs	r0, r2
 80029c8:	f7fd fbb6 	bl	8000138 <__udivsi3>
 80029cc:	0003      	movs	r3, r0
 80029ce:	6363      	str	r3, [r4, #52]	@ 0x34
                Buzzer_Beep(50);
 80029d0:	2032      	movs	r0, #50	@ 0x32
 80029d2:	f000 fa45 	bl	8002e60 <Buzzer_Beep>
                HAL_Delay(200);
 80029d6:	20c8      	movs	r0, #200	@ 0xc8
 80029d8:	f000 fc5a 	bl	8003290 <HAL_Delay>
            }
        }

        if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN) == GPIO_PIN_RESET)
 80029dc:	23a0      	movs	r3, #160	@ 0xa0
 80029de:	05db      	lsls	r3, r3, #23
 80029e0:	2102      	movs	r1, #2
 80029e2:	0018      	movs	r0, r3
 80029e4:	f001 fcd0 	bl	8004388 <HAL_GPIO_ReadPin>
 80029e8:	1e03      	subs	r3, r0, #0
 80029ea:	d11e      	bne.n	8002a2a <main+0x1ba>
        {
            if (duty_cycle > 0)
 80029ec:	4b34      	ldr	r3, [pc, #208]	@ (8002ac0 <main+0x250>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01a      	beq.n	8002a2a <main+0x1ba>
            {
                duty_cycle -= 5;
 80029f4:	4b32      	ldr	r3, [pc, #200]	@ (8002ac0 <main+0x250>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	3b05      	subs	r3, #5
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	4b30      	ldr	r3, [pc, #192]	@ (8002ac0 <main+0x250>)
 80029fe:	801a      	strh	r2, [r3, #0]
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (duty_cycle * (htim1.Init.Period + 1)) / 100);
 8002a00:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac0 <main+0x250>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	001a      	movs	r2, r3
 8002a06:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab0 <main+0x240>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	435a      	muls	r2, r3
 8002a0e:	4b28      	ldr	r3, [pc, #160]	@ (8002ab0 <main+0x240>)
 8002a10:	681c      	ldr	r4, [r3, #0]
 8002a12:	2164      	movs	r1, #100	@ 0x64
 8002a14:	0010      	movs	r0, r2
 8002a16:	f7fd fb8f 	bl	8000138 <__udivsi3>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	6363      	str	r3, [r4, #52]	@ 0x34
                Buzzer_Beep(50);
 8002a1e:	2032      	movs	r0, #50	@ 0x32
 8002a20:	f000 fa1e 	bl	8002e60 <Buzzer_Beep>
                HAL_Delay(200);
 8002a24:	20c8      	movs	r0, #200	@ 0xc8
 8002a26:	f000 fc33 	bl	8003290 <HAL_Delay>
            }
        }

        if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_SCREEN) == GPIO_PIN_RESET)
 8002a2a:	23a0      	movs	r3, #160	@ 0xa0
 8002a2c:	05db      	lsls	r3, r3, #23
 8002a2e:	2120      	movs	r1, #32
 8002a30:	0018      	movs	r0, r3
 8002a32:	f001 fca9 	bl	8004388 <HAL_GPIO_ReadPin>
 8002a36:	1e03      	subs	r3, r0, #0
 8002a38:	d110      	bne.n	8002a5c <main+0x1ec>
        {
            current_screen ^= 1;
 8002a3a:	4b22      	ldr	r3, [pc, #136]	@ (8002ac4 <main+0x254>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4053      	eors	r3, r2
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac4 <main+0x254>)
 8002a46:	701a      	strb	r2, [r3, #0]
            Buzzer_Beep(50);
 8002a48:	2032      	movs	r0, #50	@ 0x32
 8002a4a:	f000 fa09 	bl	8002e60 <Buzzer_Beep>
            HAL_Delay(300);
 8002a4e:	2396      	movs	r3, #150	@ 0x96
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 fc1c 	bl	8003290 <HAL_Delay>
            LCD_Clear();
 8002a58:	f7ff fea6 	bl	80027a8 <LCD_Clear>
        }

        // Controle do timer regressivo
        if (duty_cycle > 0 && (HAL_GetTick() - last_timer_tick >= 1000))
 8002a5c:	4b18      	ldr	r3, [pc, #96]	@ (8002ac0 <main+0x250>)
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d100      	bne.n	8002a66 <main+0x1f6>
 8002a64:	e741      	b.n	80028ea <main+0x7a>
 8002a66:	f000 fc09 	bl	800327c <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	1ad2      	subs	r2, r2, r3
 8002a70:	23fa      	movs	r3, #250	@ 0xfa
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d200      	bcs.n	8002a7a <main+0x20a>
 8002a78:	e737      	b.n	80028ea <main+0x7a>
        {
            last_timer_tick = HAL_GetTick();
 8002a7a:	f000 fbff 	bl	800327c <HAL_GetTick>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	60bb      	str	r3, [r7, #8]
            if (countdown_timer > 0)
 8002a82:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <main+0x258>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <main+0x228>
                countdown_timer--;
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <main+0x258>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <main+0x258>)
 8002a94:	801a      	strh	r2, [r3, #0]
 8002a96:	e728      	b.n	80028ea <main+0x7a>
            else
            {
                duty_cycle = 0;
 8002a98:	4b09      	ldr	r3, [pc, #36]	@ (8002ac0 <main+0x250>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	801a      	strh	r2, [r3, #0]
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002a9e:	4b04      	ldr	r3, [pc, #16]	@ (8002ab0 <main+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	635a      	str	r2, [r3, #52]	@ 0x34
        if (HAL_GetTick() - last_temp_read >= 100)
 8002aa6:	e720      	b.n	80028ea <main+0x7a>
 8002aa8:	08007e48 	.word	0x08007e48
 8002aac:	08007e54 	.word	0x08007e54
 8002ab0:	200001f4 	.word	0x200001f4
 8002ab4:	200002bc 	.word	0x200002bc
 8002ab8:	42480000 	.word	0x42480000
 8002abc:	200002bb 	.word	0x200002bb
 8002ac0:	200002b8 	.word	0x200002b8
 8002ac4:	200002ba 	.word	0x200002ba
 8002ac8:	20000000 	.word	0x20000000

08002acc <SystemClock_Config>:
}

// --- Funções auxiliares ---

void SystemClock_Config(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
    // Deixe configurado pelo CubeMX.
}
 8002ad0:	46c0      	nop			@ (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <GPIO_Init>:

void GPIO_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	4b42      	ldr	r3, [pc, #264]	@ (8002be8 <GPIO_Init+0x110>)
 8002ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ae2:	4b41      	ldr	r3, [pc, #260]	@ (8002be8 <GPIO_Init+0x110>)
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aea:	4b3f      	ldr	r3, [pc, #252]	@ (8002be8 <GPIO_Init+0x110>)
 8002aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aee:	2201      	movs	r2, #1
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af6:	4b3c      	ldr	r3, [pc, #240]	@ (8002be8 <GPIO_Init+0x110>)
 8002af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002afa:	4b3b      	ldr	r3, [pc, #236]	@ (8002be8 <GPIO_Init+0x110>)
 8002afc:	2102      	movs	r1, #2
 8002afe:	430a      	orrs	r2, r1
 8002b00:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b02:	4b39      	ldr	r3, [pc, #228]	@ (8002be8 <GPIO_Init+0x110>)
 8002b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b06:	2202      	movs	r2, #2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0e:	4b36      	ldr	r3, [pc, #216]	@ (8002be8 <GPIO_Init+0x110>)
 8002b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b12:	4b35      	ldr	r3, [pc, #212]	@ (8002be8 <GPIO_Init+0x110>)
 8002b14:	2104      	movs	r1, #4
 8002b16:	430a      	orrs	r2, r1
 8002b18:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b1a:	4b33      	ldr	r3, [pc, #204]	@ (8002be8 <GPIO_Init+0x110>)
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1e:	2204      	movs	r2, #4
 8002b20:	4013      	ands	r3, r2
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]

    // --- LCD RS e EN (PC5, PC4) ---
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002b26:	4b31      	ldr	r3, [pc, #196]	@ (8002bec <GPIO_Init+0x114>)
 8002b28:	2230      	movs	r2, #48	@ 0x30
 8002b2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002bec <GPIO_Init+0x114>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	4b2e      	ldr	r3, [pc, #184]	@ (8002bec <GPIO_Init+0x114>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b38:	4b2c      	ldr	r3, [pc, #176]	@ (8002bec <GPIO_Init+0x114>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bec <GPIO_Init+0x114>)
 8002b40:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf0 <GPIO_Init+0x118>)
 8002b42:	0019      	movs	r1, r3
 8002b44:	0010      	movs	r0, r2
 8002b46:	f001 fabb 	bl	80040c0 <HAL_GPIO_Init>

    // --- LCD D4 (PA10) ---
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b4a:	4b28      	ldr	r3, [pc, #160]	@ (8002bec <GPIO_Init+0x114>)
 8002b4c:	2280      	movs	r2, #128	@ 0x80
 8002b4e:	00d2      	lsls	r2, r2, #3
 8002b50:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	4a26      	ldr	r2, [pc, #152]	@ (8002bec <GPIO_Init+0x114>)
 8002b54:	23a0      	movs	r3, #160	@ 0xa0
 8002b56:	05db      	lsls	r3, r3, #23
 8002b58:	0011      	movs	r1, r2
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f001 fab0 	bl	80040c0 <HAL_GPIO_Init>

    // --- LCD D5, D6, D7 (PB3, PB5, PB4) ---
    GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_4;
 8002b60:	4b22      	ldr	r3, [pc, #136]	@ (8002bec <GPIO_Init+0x114>)
 8002b62:	2238      	movs	r2, #56	@ 0x38
 8002b64:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b66:	4b21      	ldr	r3, [pc, #132]	@ (8002bec <GPIO_Init+0x114>)
 8002b68:	4a22      	ldr	r2, [pc, #136]	@ (8002bf4 <GPIO_Init+0x11c>)
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	0010      	movs	r0, r2
 8002b6e:	f001 faa7 	bl	80040c0 <HAL_GPIO_Init>

    // --- PWM Output (PA8) ---
    GPIO_InitStruct.Pin = PWM_OUTPUT;
 8002b72:	4b1e      	ldr	r3, [pc, #120]	@ (8002bec <GPIO_Init+0x114>)
 8002b74:	2280      	movs	r2, #128	@ 0x80
 8002b76:	0052      	lsls	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bec <GPIO_Init+0x114>)
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <GPIO_Init+0x114>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <GPIO_Init+0x114>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b8c:	4b17      	ldr	r3, [pc, #92]	@ (8002bec <GPIO_Init+0x114>)
 8002b8e:	2202      	movs	r2, #2
 8002b90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b92:	4a16      	ldr	r2, [pc, #88]	@ (8002bec <GPIO_Init+0x114>)
 8002b94:	23a0      	movs	r3, #160	@ 0xa0
 8002b96:	05db      	lsls	r3, r3, #23
 8002b98:	0011      	movs	r1, r2
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f001 fa90 	bl	80040c0 <HAL_GPIO_Init>

    // --- Botões (PA0, PA1, PA5) ---
    GPIO_InitStruct.Pin = BUTTON_UP | BUTTON_DOWN | BUTTON_SCREEN;
 8002ba0:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <GPIO_Init+0x114>)
 8002ba2:	2223      	movs	r2, #35	@ 0x23
 8002ba4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba6:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <GPIO_Init+0x114>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bac:	4b0f      	ldr	r3, [pc, #60]	@ (8002bec <GPIO_Init+0x114>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8002bec <GPIO_Init+0x114>)
 8002bb4:	23a0      	movs	r3, #160	@ 0xa0
 8002bb6:	05db      	lsls	r3, r3, #23
 8002bb8:	0011      	movs	r1, r2
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f001 fa80 	bl	80040c0 <HAL_GPIO_Init>

    // --- Buzzer e LED (PA3, PA4) ---
    GPIO_InitStruct.Pin = BUZZER | ALARM_LED;
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <GPIO_Init+0x114>)
 8002bc2:	2218      	movs	r2, #24
 8002bc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc6:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <GPIO_Init+0x114>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <GPIO_Init+0x114>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd2:	4a06      	ldr	r2, [pc, #24]	@ (8002bec <GPIO_Init+0x114>)
 8002bd4:	23a0      	movs	r3, #160	@ 0xa0
 8002bd6:	05db      	lsls	r3, r3, #23
 8002bd8:	0011      	movs	r1, r2
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f001 fa70 	bl	80040c0 <HAL_GPIO_Init>
}
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b004      	add	sp, #16
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	200002a4 	.word	0x200002a4
 8002bf0:	50000800 	.word	0x50000800
 8002bf4:	50000400 	.word	0x50000400

08002bf8 <TIM1_Init>:


void TIM1_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bfe:	4b20      	ldr	r3, [pc, #128]	@ (8002c80 <TIM1_Init+0x88>)
 8002c00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c02:	4b1f      	ldr	r3, [pc, #124]	@ (8002c80 <TIM1_Init+0x88>)
 8002c04:	2180      	movs	r1, #128	@ 0x80
 8002c06:	0109      	lsls	r1, r1, #4
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c80 <TIM1_Init+0x88>)
 8002c0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c10:	2380      	movs	r3, #128	@ 0x80
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	4013      	ands	r3, r2
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]

    htim1.Instance = TIM1;
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c84 <TIM1_Init+0x8c>)
 8002c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8002c88 <TIM1_Init+0x90>)
 8002c1e:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 1;
 8002c20:	4b18      	ldr	r3, [pc, #96]	@ (8002c84 <TIM1_Init+0x8c>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c26:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <TIM1_Init+0x8c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 3199;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <TIM1_Init+0x8c>)
 8002c2e:	4a17      	ldr	r2, [pc, #92]	@ (8002c8c <TIM1_Init+0x94>)
 8002c30:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c32:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <TIM1_Init+0x8c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <TIM1_Init+0x8c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	615a      	str	r2, [r3, #20]
    HAL_TIM_PWM_Init(&htim1);
 8002c3e:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <TIM1_Init+0x8c>)
 8002c40:	0018      	movs	r0, r3
 8002c42:	f001 fbf6 	bl	8004432 <HAL_TIM_PWM_Init>

    TIM_OC_InitTypeDef sConfigOC = {0};
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	0018      	movs	r0, r3
 8002c4a:	231c      	movs	r3, #28
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	2100      	movs	r1, #0
 8002c50:	f002 ff66 	bl	8005b20 <memset>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2260      	movs	r2, #96	@ 0x60
 8002c58:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 0;
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8002c6c:	1d39      	adds	r1, r7, #4
 8002c6e:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <TIM1_Init+0x8c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	0018      	movs	r0, r3
 8002c74:	f001 fd22 	bl	80046bc <HAL_TIM_PWM_ConfigChannel>
}
 8002c78:	46c0      	nop			@ (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b008      	add	sp, #32
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000
 8002c84:	200001f4 	.word	0x200001f4
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	00000c7f 	.word	0x00000c7f

08002c90 <ADC1_Init>:

void ADC1_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 8002c96:	4b22      	ldr	r3, [pc, #136]	@ (8002d20 <ADC1_Init+0x90>)
 8002c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c9a:	4b21      	ldr	r3, [pc, #132]	@ (8002d20 <ADC1_Init+0x90>)
 8002c9c:	2180      	movs	r1, #128	@ 0x80
 8002c9e:	0349      	lsls	r1, r1, #13
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <ADC1_Init+0x90>)
 8002ca6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	035b      	lsls	r3, r3, #13
 8002cac:	4013      	ands	r3, r2
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]

    hadc1.Instance = ADC1;
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d24 <ADC1_Init+0x94>)
 8002cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d28 <ADC1_Init+0x98>)
 8002cb6:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <ADC1_Init+0x94>)
 8002cba:	2280      	movs	r2, #128	@ 0x80
 8002cbc:	0612      	lsls	r2, r2, #24
 8002cbe:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cc0:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <ADC1_Init+0x94>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cc6:	4b17      	ldr	r3, [pc, #92]	@ (8002d24 <ADC1_Init+0x94>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ccc:	4b15      	ldr	r3, [pc, #84]	@ (8002d24 <ADC1_Init+0x94>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cd2:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <ADC1_Init+0x94>)
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <ADC1_Init+0x94>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <ADC1_Init+0x94>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	769a      	strb	r2, [r3, #26]
    hadc1.Init.NbrOfConversion = 1;
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <ADC1_Init+0x94>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <ADC1_Init+0x94>)
 8002cec:	2220      	movs	r2, #32
 8002cee:	2100      	movs	r1, #0
 8002cf0:	5499      	strb	r1, [r3, r2]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <ADC1_Init+0x94>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <ADC1_Init+0x94>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cfe:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <ADC1_Init+0x94>)
 8002d00:	222c      	movs	r2, #44	@ 0x2c
 8002d02:	2100      	movs	r1, #0
 8002d04:	5499      	strb	r1, [r3, r2]

    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d06:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <ADC1_Init+0x94>)
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 fc31 	bl	8003570 <HAL_ADC_Init>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d001      	beq.n	8002d16 <ADC1_Init+0x86>
    {
        // Tratamento de erro (LED, buzzer ou loop infinito)
        while (1);
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	e7fd      	b.n	8002d12 <ADC1_Init+0x82>
    }
}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	40021000 	.word	0x40021000
 8002d24:	20000240 	.word	0x20000240
 8002d28:	40012400 	.word	0x40012400

08002d2c <ReadTemperature>:



void ReadTemperature(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8002d32:	003b      	movs	r3, r7
 8002d34:	0018      	movs	r0, r3
 8002d36:	230c      	movs	r3, #12
 8002d38:	001a      	movs	r2, r3
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	f002 fef0 	bl	8005b20 <memset>

    sConfig.Channel = ADC_CHANNEL_2; // Conecte o LM35 no PA2
 8002d40:	003b      	movs	r3, r7
 8002d42:	4a20      	ldr	r2, [pc, #128]	@ (8002dc4 <ReadTemperature+0x98>)
 8002d44:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d46:	003b      	movs	r3, r7
 8002d48:	2200      	movs	r2, #0
 8002d4a:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002d4c:	003a      	movs	r2, r7
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <ReadTemperature+0x9c>)
 8002d50:	0011      	movs	r1, r2
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 fea2 	bl	8003a9c <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);
 8002d58:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <ReadTemperature+0x9c>)
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 fdb0 	bl	80038c0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002d60:	2301      	movs	r3, #1
 8002d62:	425a      	negs	r2, r3
 8002d64:	4b18      	ldr	r3, [pc, #96]	@ (8002dc8 <ReadTemperature+0x9c>)
 8002d66:	0011      	movs	r1, r2
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 fdf7 	bl	800395c <HAL_ADC_PollForConversion>
    uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8002d6e:	4b16      	ldr	r3, [pc, #88]	@ (8002dc8 <ReadTemperature+0x9c>)
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 fe87 	bl	8003a84 <HAL_ADC_GetValue>
 8002d76:	0003      	movs	r3, r0
 8002d78:	60fb      	str	r3, [r7, #12]

    // Convertendo para temperatura em °C
    temperature = ((adc_value * 3.3) / 4095.0) * 100.0;
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f7ff fb28 	bl	80023d0 <__aeabi_ui2d>
 8002d80:	4a12      	ldr	r2, [pc, #72]	@ (8002dcc <ReadTemperature+0xa0>)
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <ReadTemperature+0xa4>)
 8002d84:	f7fe fc34 	bl	80015f0 <__aeabi_dmul>
 8002d88:	0002      	movs	r2, r0
 8002d8a:	000b      	movs	r3, r1
 8002d8c:	0010      	movs	r0, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	2200      	movs	r2, #0
 8002d92:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <ReadTemperature+0xa8>)
 8002d94:	f7fd ffe8 	bl	8000d68 <__aeabi_ddiv>
 8002d98:	0002      	movs	r2, r0
 8002d9a:	000b      	movs	r3, r1
 8002d9c:	0010      	movs	r0, r2
 8002d9e:	0019      	movs	r1, r3
 8002da0:	2200      	movs	r2, #0
 8002da2:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd8 <ReadTemperature+0xac>)
 8002da4:	f7fe fc24 	bl	80015f0 <__aeabi_dmul>
 8002da8:	0002      	movs	r2, r0
 8002daa:	000b      	movs	r3, r1
 8002dac:	0010      	movs	r0, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	f7ff fb7a 	bl	80024a8 <__aeabi_d2f>
 8002db4:	1c02      	adds	r2, r0, #0
 8002db6:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <ReadTemperature+0xb0>)
 8002db8:	601a      	str	r2, [r3, #0]
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b004      	add	sp, #16
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			@ (mov r8, r8)
 8002dc4:	08000004 	.word	0x08000004
 8002dc8:	20000240 	.word	0x20000240
 8002dcc:	66666666 	.word	0x66666666
 8002dd0:	400a6666 	.word	0x400a6666
 8002dd4:	40affe00 	.word	0x40affe00
 8002dd8:	40590000 	.word	0x40590000
 8002ddc:	200002bc 	.word	0x200002bc

08002de0 <UpdateDisplay>:

void UpdateDisplay(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	@ 0x28
 8002de4:	af02      	add	r7, sp, #8
    char buffer[32];

    if (current_screen == 0)
 8002de6:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <UpdateDisplay+0x68>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d114      	bne.n	8002e18 <UpdateDisplay+0x38>
    {
        LCD_SetCursor(0, 0);
 8002dee:	2100      	movs	r1, #0
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7ff fce4 	bl	80027be <LCD_SetCursor>
        snprintf(buffer, sizeof(buffer), "PWM:%d%% T:%ds", duty_cycle, countdown_timer);
 8002df6:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <UpdateDisplay+0x6c>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <UpdateDisplay+0x70>)
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	4a14      	ldr	r2, [pc, #80]	@ (8002e54 <UpdateDisplay+0x74>)
 8002e02:	0038      	movs	r0, r7
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	000b      	movs	r3, r1
 8002e08:	2120      	movs	r1, #32
 8002e0a:	f002 fde9 	bl	80059e0 <sniprintf>
        LCD_Print(buffer);
 8002e0e:	003b      	movs	r3, r7
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7ff fcfb 	bl	800280c <LCD_Print>
    {
        LCD_SetCursor(0, 0);
        sprintf(buffer, "Temp: %.1f C", temperature);
        LCD_Print(buffer);
    }
}
 8002e16:	e012      	b.n	8002e3e <UpdateDisplay+0x5e>
        LCD_SetCursor(0, 0);
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7ff fccf 	bl	80027be <LCD_SetCursor>
        sprintf(buffer, "Temp: %.1f C", temperature);
 8002e20:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <UpdateDisplay+0x78>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	1c18      	adds	r0, r3, #0
 8002e26:	f7ff faf7 	bl	8002418 <__aeabi_f2d>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	000b      	movs	r3, r1
 8002e2e:	490b      	ldr	r1, [pc, #44]	@ (8002e5c <UpdateDisplay+0x7c>)
 8002e30:	0038      	movs	r0, r7
 8002e32:	f002 fe09 	bl	8005a48 <siprintf>
        LCD_Print(buffer);
 8002e36:	003b      	movs	r3, r7
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7ff fce7 	bl	800280c <LCD_Print>
}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b008      	add	sp, #32
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	200002ba 	.word	0x200002ba
 8002e4c:	200002b8 	.word	0x200002b8
 8002e50:	20000000 	.word	0x20000000
 8002e54:	08007e64 	.word	0x08007e64
 8002e58:	200002bc 	.word	0x200002bc
 8002e5c:	08007e74 	.word	0x08007e74

08002e60 <Buzzer_Beep>:

void Buzzer_Beep(uint16_t duration_ms)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	0002      	movs	r2, r0
 8002e68:	1dbb      	adds	r3, r7, #6
 8002e6a:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER, GPIO_PIN_SET);
 8002e6c:	23a0      	movs	r3, #160	@ 0xa0
 8002e6e:	05db      	lsls	r3, r3, #23
 8002e70:	2201      	movs	r2, #1
 8002e72:	2108      	movs	r1, #8
 8002e74:	0018      	movs	r0, r3
 8002e76:	f001 faa4 	bl	80043c2 <HAL_GPIO_WritePin>
    HAL_Delay(duration_ms);
 8002e7a:	1dbb      	adds	r3, r7, #6
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 fa06 	bl	8003290 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_PORT, BUZZER, GPIO_PIN_RESET);
 8002e84:	23a0      	movs	r3, #160	@ 0xa0
 8002e86:	05db      	lsls	r3, r3, #23
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2108      	movs	r1, #8
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f001 fa98 	bl	80043c2 <HAL_GPIO_WritePin>
}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea2:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <HAL_MspInit+0x4c>)
 8002ea4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ea6:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <HAL_MspInit+0x4c>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	641a      	str	r2, [r3, #64]	@ 0x40
 8002eae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee8 <HAL_MspInit+0x4c>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_MspInit+0x4c>)
 8002ebc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <HAL_MspInit+0x4c>)
 8002ec0:	2180      	movs	r1, #128	@ 0x80
 8002ec2:	0549      	lsls	r1, r1, #21
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ec8:	4b07      	ldr	r3, [pc, #28]	@ (8002ee8 <HAL_MspInit+0x4c>)
 8002eca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	055b      	lsls	r3, r3, #21
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002ed6:	23c0      	movs	r3, #192	@ 0xc0
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 f9fc 	bl	80032d8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ee0:	46c0      	nop			@ (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000

08002eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b08b      	sub	sp, #44	@ 0x2c
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	2414      	movs	r4, #20
 8002ef6:	193b      	adds	r3, r7, r4
 8002ef8:	0018      	movs	r0, r3
 8002efa:	2314      	movs	r3, #20
 8002efc:	001a      	movs	r2, r3
 8002efe:	2100      	movs	r1, #0
 8002f00:	f002 fe0e 	bl	8005b20 <memset>
  if(hadc->Instance==ADC1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a18      	ldr	r2, [pc, #96]	@ (8002f6c <HAL_ADC_MspInit+0x80>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d129      	bne.n	8002f62 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002f0e:	4b18      	ldr	r3, [pc, #96]	@ (8002f70 <HAL_ADC_MspInit+0x84>)
 8002f10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f12:	4b17      	ldr	r3, [pc, #92]	@ (8002f70 <HAL_ADC_MspInit+0x84>)
 8002f14:	2180      	movs	r1, #128	@ 0x80
 8002f16:	0349      	lsls	r1, r1, #13
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f1c:	4b14      	ldr	r3, [pc, #80]	@ (8002f70 <HAL_ADC_MspInit+0x84>)
 8002f1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	035b      	lsls	r3, r3, #13
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <HAL_ADC_MspInit+0x84>)
 8002f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_ADC_MspInit+0x84>)
 8002f30:	2101      	movs	r1, #1
 8002f32:	430a      	orrs	r2, r1
 8002f34:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f36:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <HAL_ADC_MspInit+0x84>)
 8002f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f42:	193b      	adds	r3, r7, r4
 8002f44:	2204      	movs	r2, #4
 8002f46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f48:	193b      	adds	r3, r7, r4
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	193b      	adds	r3, r7, r4
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f54:	193a      	adds	r2, r7, r4
 8002f56:	23a0      	movs	r3, #160	@ 0xa0
 8002f58:	05db      	lsls	r3, r3, #23
 8002f5a:	0011      	movs	r1, r2
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f001 f8af 	bl	80040c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b00b      	add	sp, #44	@ 0x2c
 8002f68:	bd90      	pop	{r4, r7, pc}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	40012400 	.word	0x40012400
 8002f70:	40021000 	.word	0x40021000

08002f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	e7fd      	b.n	8002f78 <NMI_Handler+0x4>

08002f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f80:	46c0      	nop			@ (mov r8, r8)
 8002f82:	e7fd      	b.n	8002f80 <HardFault_Handler+0x4>

08002f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f88:	46c0      	nop			@ (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f9c:	f000 f95c 	bl	8003258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fa0:	46c0      	nop			@ (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	af00      	add	r7, sp, #0
  return 1;
 8002faa:	2301      	movs	r3, #1
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_kill>:

int _kill(int pid, int sig)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fbc:	f002 fe0a 	bl	8005bd4 <__errno>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	2216      	movs	r2, #22
 8002fc4:	601a      	str	r2, [r3, #0]
  return -1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	425b      	negs	r3, r3
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <_exit>:

void _exit (int status)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fda:	2301      	movs	r3, #1
 8002fdc:	425a      	negs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0011      	movs	r1, r2
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7ff ffe5 	bl	8002fb2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	e7fd      	b.n	8002fe8 <_exit+0x16>

08002fec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e00a      	b.n	8003014 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ffe:	e000      	b.n	8003002 <_read+0x16>
 8003000:	bf00      	nop
 8003002:	0001      	movs	r1, r0
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	60ba      	str	r2, [r7, #8]
 800300a:	b2ca      	uxtb	r2, r1
 800300c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3301      	adds	r3, #1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	dbf0      	blt.n	8002ffe <_read+0x12>
  }

  return len;
 800301c:	687b      	ldr	r3, [r7, #4]
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	b006      	add	sp, #24
 8003024:	bd80      	pop	{r7, pc}

08003026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e009      	b.n	800304c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	60ba      	str	r2, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	0018      	movs	r0, r3
 8003042:	e000      	b.n	8003046 <_write+0x20>
 8003044:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	3301      	adds	r3, #1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	429a      	cmp	r2, r3
 8003052:	dbf1      	blt.n	8003038 <_write+0x12>
  }
  return len;
 8003054:	687b      	ldr	r3, [r7, #4]
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b006      	add	sp, #24
 800305c:	bd80      	pop	{r7, pc}

0800305e <_close>:

int _close(int file)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003066:	2301      	movs	r3, #1
 8003068:	425b      	negs	r3, r3
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b002      	add	sp, #8
 8003070:	bd80      	pop	{r7, pc}

08003072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2280      	movs	r2, #128	@ 0x80
 8003080:	0192      	lsls	r2, r2, #6
 8003082:	605a      	str	r2, [r3, #4]
  return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}

0800308e <_isatty>:

int _isatty(int file)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003096:	2301      	movs	r3, #1
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b002      	add	sp, #8
 800309e:	bd80      	pop	{r7, pc}

080030a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b004      	add	sp, #16
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c0:	4a14      	ldr	r2, [pc, #80]	@ (8003114 <_sbrk+0x5c>)
 80030c2:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <_sbrk+0x60>)
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030cc:	4b13      	ldr	r3, [pc, #76]	@ (800311c <_sbrk+0x64>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d4:	4b11      	ldr	r3, [pc, #68]	@ (800311c <_sbrk+0x64>)
 80030d6:	4a12      	ldr	r2, [pc, #72]	@ (8003120 <_sbrk+0x68>)
 80030d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030da:	4b10      	ldr	r3, [pc, #64]	@ (800311c <_sbrk+0x64>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	18d3      	adds	r3, r2, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d207      	bcs.n	80030f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030e8:	f002 fd74 	bl	8005bd4 <__errno>
 80030ec:	0003      	movs	r3, r0
 80030ee:	220c      	movs	r2, #12
 80030f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	425b      	negs	r3, r3
 80030f6:	e009      	b.n	800310c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030f8:	4b08      	ldr	r3, [pc, #32]	@ (800311c <_sbrk+0x64>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030fe:	4b07      	ldr	r3, [pc, #28]	@ (800311c <_sbrk+0x64>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	18d2      	adds	r2, r2, r3
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <_sbrk+0x64>)
 8003108:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b006      	add	sp, #24
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20009000 	.word	0x20009000
 8003118:	00000400 	.word	0x00000400
 800311c:	200002c0 	.word	0x200002c0
 8003120:	20000418 	.word	0x20000418

08003124 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003128:	46c0      	nop			@ (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003130:	480d      	ldr	r0, [pc, #52]	@ (8003168 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003132:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003134:	f7ff fff6 	bl	8003124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003138:	480c      	ldr	r0, [pc, #48]	@ (800316c <LoopForever+0x6>)
  ldr r1, =_edata
 800313a:	490d      	ldr	r1, [pc, #52]	@ (8003170 <LoopForever+0xa>)
  ldr r2, =_sidata
 800313c:	4a0d      	ldr	r2, [pc, #52]	@ (8003174 <LoopForever+0xe>)
  movs r3, #0
 800313e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003140:	e002      	b.n	8003148 <LoopCopyDataInit>

08003142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003146:	3304      	adds	r3, #4

08003148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800314a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800314c:	d3f9      	bcc.n	8003142 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800314e:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003150:	4c0a      	ldr	r4, [pc, #40]	@ (800317c <LoopForever+0x16>)
  movs r3, #0
 8003152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003154:	e001      	b.n	800315a <LoopFillZerobss>

08003156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003158:	3204      	adds	r2, #4

0800315a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800315a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800315c:	d3fb      	bcc.n	8003156 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800315e:	f002 fd3f 	bl	8005be0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003162:	f7ff fb85 	bl	8002870 <main>

08003166 <LoopForever>:

LoopForever:
  b LoopForever
 8003166:	e7fe      	b.n	8003166 <LoopForever>
  ldr   r0, =_estack
 8003168:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800316c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003170:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003174:	08008290 	.word	0x08008290
  ldr r2, =_sbss
 8003178:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800317c:	20000414 	.word	0x20000414

08003180 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003180:	e7fe      	b.n	8003180 <ADC1_IRQHandler>
	...

08003184 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003190:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <HAL_Init+0x3c>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <HAL_Init+0x3c>)
 8003196:	2180      	movs	r1, #128	@ 0x80
 8003198:	0049      	lsls	r1, r1, #1
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800319e:	2000      	movs	r0, #0
 80031a0:	f000 f810 	bl	80031c4 <HAL_InitTick>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80031a8:	1dfb      	adds	r3, r7, #7
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e001      	b.n	80031b4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80031b0:	f7ff fe74 	bl	8002e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031b4:	1dfb      	adds	r3, r7, #7
 80031b6:	781b      	ldrb	r3, [r3, #0]
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40022000 	.word	0x40022000

080031c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031cc:	230f      	movs	r3, #15
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80031d4:	4b1d      	ldr	r3, [pc, #116]	@ (800324c <HAL_InitTick+0x88>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02b      	beq.n	8003234 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80031dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <HAL_InitTick+0x8c>)
 80031de:	681c      	ldr	r4, [r3, #0]
 80031e0:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <HAL_InitTick+0x88>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	0019      	movs	r1, r3
 80031e6:	23fa      	movs	r3, #250	@ 0xfa
 80031e8:	0098      	lsls	r0, r3, #2
 80031ea:	f7fc ffa5 	bl	8000138 <__udivsi3>
 80031ee:	0003      	movs	r3, r0
 80031f0:	0019      	movs	r1, r3
 80031f2:	0020      	movs	r0, r4
 80031f4:	f7fc ffa0 	bl	8000138 <__udivsi3>
 80031f8:	0003      	movs	r3, r0
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 ff53 	bl	80040a6 <HAL_SYSTICK_Config>
 8003200:	1e03      	subs	r3, r0, #0
 8003202:	d112      	bne.n	800322a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d80a      	bhi.n	8003220 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	2301      	movs	r3, #1
 800320e:	425b      	negs	r3, r3
 8003210:	2200      	movs	r2, #0
 8003212:	0018      	movs	r0, r3
 8003214:	f000 ff32 	bl	800407c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003218:	4b0e      	ldr	r3, [pc, #56]	@ (8003254 <HAL_InitTick+0x90>)
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e00d      	b.n	800323c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003220:	230f      	movs	r3, #15
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e008      	b.n	800323c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800322a:	230f      	movs	r3, #15
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e003      	b.n	800323c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003234:	230f      	movs	r3, #15
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800323c:	230f      	movs	r3, #15
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	781b      	ldrb	r3, [r3, #0]
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b005      	add	sp, #20
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	46c0      	nop			@ (mov r8, r8)
 800324c:	2000000c 	.word	0x2000000c
 8003250:	20000004 	.word	0x20000004
 8003254:	20000008 	.word	0x20000008

08003258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800325c:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <HAL_IncTick+0x1c>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	001a      	movs	r2, r3
 8003262:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <HAL_IncTick+0x20>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	18d2      	adds	r2, r2, r3
 8003268:	4b03      	ldr	r3, [pc, #12]	@ (8003278 <HAL_IncTick+0x20>)
 800326a:	601a      	str	r2, [r3, #0]
}
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	2000000c 	.word	0x2000000c
 8003278:	200002c4 	.word	0x200002c4

0800327c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  return uwTick;
 8003280:	4b02      	ldr	r3, [pc, #8]	@ (800328c <HAL_GetTick+0x10>)
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	200002c4 	.word	0x200002c4

08003290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7ff fff0 	bl	800327c <HAL_GetTick>
 800329c:	0003      	movs	r3, r0
 800329e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3301      	adds	r3, #1
 80032a8:	d005      	beq.n	80032b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032aa:	4b0a      	ldr	r3, [pc, #40]	@ (80032d4 <HAL_Delay+0x44>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	001a      	movs	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	189b      	adds	r3, r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	f7ff ffe0 	bl	800327c <HAL_GetTick>
 80032bc:	0002      	movs	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d8f7      	bhi.n	80032b8 <HAL_Delay+0x28>
  {
  }
}
 80032c8:	46c0      	nop			@ (mov r8, r8)
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b004      	add	sp, #16
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	2000000c 	.word	0x2000000c

080032d8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80032e0:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a06      	ldr	r2, [pc, #24]	@ (8003300 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]
}
 80032f2:	46c0      	nop			@ (mov r8, r8)
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b002      	add	sp, #8
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			@ (mov r8, r8)
 80032fc:	40010000 	.word	0x40010000
 8003300:	fffff9ff 	.word	0xfffff9ff

08003304 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a05      	ldr	r2, [pc, #20]	@ (8003328 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003314:	401a      	ands	r2, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	601a      	str	r2, [r3, #0]
}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b002      	add	sp, #8
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	fe3fffff 	.word	0xfe3fffff

0800332c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	23e0      	movs	r3, #224	@ 0xe0
 800333a:	045b      	lsls	r3, r3, #17
 800333c:	4013      	ands	r3, r2
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b002      	add	sp, #8
 8003344:	bd80      	pop	{r7, pc}

08003346 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	2104      	movs	r1, #4
 800335a:	400a      	ands	r2, r1
 800335c:	2107      	movs	r1, #7
 800335e:	4091      	lsls	r1, r2
 8003360:	000a      	movs	r2, r1
 8003362:	43d2      	mvns	r2, r2
 8003364:	401a      	ands	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2104      	movs	r1, #4
 800336a:	400b      	ands	r3, r1
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4099      	lsls	r1, r3
 8003370:	000b      	movs	r3, r1
 8003372:	431a      	orrs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003378:	46c0      	nop			@ (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b004      	add	sp, #16
 800337e:	bd80      	pop	{r7, pc}

08003380 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	2104      	movs	r1, #4
 8003392:	400a      	ands	r2, r1
 8003394:	2107      	movs	r1, #7
 8003396:	4091      	lsls	r1, r2
 8003398:	000a      	movs	r2, r1
 800339a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2104      	movs	r1, #4
 80033a0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80033a2:	40da      	lsrs	r2, r3
 80033a4:	0013      	movs	r3, r2
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}

080033ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	23c0      	movs	r3, #192	@ 0xc0
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	4013      	ands	r3, r2
 80033c0:	d101      	bne.n	80033c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	211f      	movs	r1, #31
 80033e4:	400a      	ands	r2, r1
 80033e6:	210f      	movs	r1, #15
 80033e8:	4091      	lsls	r1, r2
 80033ea:	000a      	movs	r2, r1
 80033ec:	43d2      	mvns	r2, r2
 80033ee:	401a      	ands	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	210f      	movs	r1, #15
 80033f6:	4019      	ands	r1, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	201f      	movs	r0, #31
 80033fc:	4003      	ands	r3, r0
 80033fe:	4099      	lsls	r1, r3
 8003400:	000b      	movs	r3, r1
 8003402:	431a      	orrs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003408:	46c0      	nop			@ (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b004      	add	sp, #16
 800340e:	bd80      	pop	{r7, pc}

08003410 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	035b      	lsls	r3, r3, #13
 8003422:	0b5b      	lsrs	r3, r3, #13
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b002      	add	sp, #8
 8003430:	bd80      	pop	{r7, pc}

08003432 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	0352      	lsls	r2, r2, #13
 8003444:	0b52      	lsrs	r2, r2, #13
 8003446:	43d2      	mvns	r2, r2
 8003448:	401a      	ands	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b002      	add	sp, #8
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	0212      	lsls	r2, r2, #8
 800346c:	43d2      	mvns	r2, r2
 800346e:	401a      	ands	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	400b      	ands	r3, r1
 8003478:	4904      	ldr	r1, [pc, #16]	@ (800348c <LL_ADC_SetChannelSamplingTime+0x34>)
 800347a:	400b      	ands	r3, r1
 800347c:	431a      	orrs	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	46bd      	mov	sp, r7
 8003486:	b004      	add	sp, #16
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	07ffff00 	.word	0x07ffff00

08003490 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a05      	ldr	r2, [pc, #20]	@ (80034b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800349e:	4013      	ands	r3, r2
 80034a0:	2280      	movs	r2, #128	@ 0x80
 80034a2:	0552      	lsls	r2, r2, #21
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	6fffffe8 	.word	0x6fffffe8

080034b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	2380      	movs	r3, #128	@ 0x80
 80034c6:	055b      	lsls	r3, r3, #21
 80034c8:	401a      	ands	r2, r3
 80034ca:	2380      	movs	r3, #128	@ 0x80
 80034cc:	055b      	lsls	r3, r3, #21
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d101      	bne.n	80034d6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b002      	add	sp, #8
 80034de:	bd80      	pop	{r7, pc}

080034e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a04      	ldr	r2, [pc, #16]	@ (8003500 <LL_ADC_Enable+0x20>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	2201      	movs	r2, #1
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034f8:	46c0      	nop			@ (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	7fffffe8 	.word	0x7fffffe8

08003504 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2201      	movs	r2, #1
 8003512:	4013      	ands	r3, r2
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <LL_ADC_IsEnabled+0x18>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <LL_ADC_IsEnabled+0x1a>
 800351c:	2300      	movs	r3, #0
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b002      	add	sp, #8
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <LL_ADC_REG_StartConversion+0x20>)
 8003536:	4013      	ands	r3, r2
 8003538:	2204      	movs	r2, #4
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003540:	46c0      	nop			@ (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b002      	add	sp, #8
 8003546:	bd80      	pop	{r7, pc}
 8003548:	7fffffe8 	.word	0x7fffffe8

0800354c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2204      	movs	r2, #4
 800355a:	4013      	ands	r3, r2
 800355c:	2b04      	cmp	r3, #4
 800355e:	d101      	bne.n	8003564 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003564:	2300      	movs	r3, #0
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b002      	add	sp, #8
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003578:	231f      	movs	r3, #31
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e17f      	b.n	8003896 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7ff fca3 	bl	8002eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2254      	movs	r2, #84	@ 0x54
 80035b0:	2100      	movs	r1, #0
 80035b2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7ff ff7d 	bl	80034b8 <LL_ADC_IsInternalRegulatorEnabled>
 80035be:	1e03      	subs	r3, r0, #0
 80035c0:	d115      	bne.n	80035ee <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f7ff ff62 	bl	8003490 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035cc:	4bb4      	ldr	r3, [pc, #720]	@ (80038a0 <HAL_ADC_Init+0x330>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	49b4      	ldr	r1, [pc, #720]	@ (80038a4 <HAL_ADC_Init+0x334>)
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7fc fdb0 	bl	8000138 <__udivsi3>
 80035d8:	0003      	movs	r3, r0
 80035da:	3301      	adds	r3, #1
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035e0:	e002      	b.n	80035e8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f9      	bne.n	80035e2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7ff ff60 	bl	80034b8 <LL_ADC_IsInternalRegulatorEnabled>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d10f      	bne.n	800361c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	2210      	movs	r2, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360c:	2201      	movs	r2, #1
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003614:	231f      	movs	r3, #31
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	0018      	movs	r0, r3
 8003622:	f7ff ff93 	bl	800354c <LL_ADC_REG_IsConversionOngoing>
 8003626:	0003      	movs	r3, r0
 8003628:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	2210      	movs	r2, #16
 8003630:	4013      	ands	r3, r2
 8003632:	d000      	beq.n	8003636 <HAL_ADC_Init+0xc6>
 8003634:	e122      	b.n	800387c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d000      	beq.n	800363e <HAL_ADC_Init+0xce>
 800363c:	e11e      	b.n	800387c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003642:	4a99      	ldr	r2, [pc, #612]	@ (80038a8 <HAL_ADC_Init+0x338>)
 8003644:	4013      	ands	r3, r2
 8003646:	2202      	movs	r2, #2
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	0018      	movs	r0, r3
 8003654:	f7ff ff56 	bl	8003504 <LL_ADC_IsEnabled>
 8003658:	1e03      	subs	r3, r0, #0
 800365a:	d000      	beq.n	800365e <HAL_ADC_Init+0xee>
 800365c:	e0ad      	b.n	80037ba <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	7e1b      	ldrb	r3, [r3, #24]
 8003666:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003668:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7e5b      	ldrb	r3, [r3, #25]
 800366e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003670:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	7e9b      	ldrb	r3, [r3, #26]
 8003676:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003678:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_ADC_Init+0x118>
 8003682:	2380      	movs	r3, #128	@ 0x80
 8003684:	015b      	lsls	r3, r3, #5
 8003686:	e000      	b.n	800368a <HAL_ADC_Init+0x11a>
 8003688:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800368a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003690:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	da04      	bge.n	80036a4 <HAL_ADC_Init+0x134>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	e001      	b.n	80036a8 <HAL_ADC_Init+0x138>
 80036a4:	2380      	movs	r3, #128	@ 0x80
 80036a6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80036a8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	212c      	movs	r1, #44	@ 0x2c
 80036ae:	5c5b      	ldrb	r3, [r3, r1]
 80036b0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80036b2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	5c9b      	ldrb	r3, [r3, r2]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d115      	bne.n	80036f0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7e9b      	ldrb	r3, [r3, #26]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2280      	movs	r2, #128	@ 0x80
 80036d0:	0252      	lsls	r2, r2, #9
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	e00b      	b.n	80036f0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036dc:	2220      	movs	r2, #32
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e8:	2201      	movs	r2, #1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036fc:	23e0      	movs	r3, #224	@ 0xe0
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003706:	4313      	orrs	r3, r2
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4a65      	ldr	r2, [pc, #404]	@ (80038ac <HAL_ADC_Init+0x33c>)
 8003716:	4013      	ands	r3, r2
 8003718:	0019      	movs	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	430a      	orrs	r2, r1
 8003722:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	0f9b      	lsrs	r3, r3, #30
 800372a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003730:	4313      	orrs	r3, r2
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	223c      	movs	r2, #60	@ 0x3c
 800373c:	5c9b      	ldrb	r3, [r3, r2]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d111      	bne.n	8003766 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	0f9b      	lsrs	r3, r3, #30
 8003748:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800374e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8003754:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800375a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	2201      	movs	r2, #1
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	4a50      	ldr	r2, [pc, #320]	@ (80038b0 <HAL_ADC_Init+0x340>)
 800376e:	4013      	ands	r3, r2
 8003770:	0019      	movs	r1, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	430a      	orrs	r2, r1
 800377a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	23c0      	movs	r3, #192	@ 0xc0
 8003782:	061b      	lsls	r3, r3, #24
 8003784:	429a      	cmp	r2, r3
 8003786:	d018      	beq.n	80037ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800378c:	2380      	movs	r3, #128	@ 0x80
 800378e:	05db      	lsls	r3, r3, #23
 8003790:	429a      	cmp	r2, r3
 8003792:	d012      	beq.n	80037ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003798:	2380      	movs	r3, #128	@ 0x80
 800379a:	061b      	lsls	r3, r3, #24
 800379c:	429a      	cmp	r2, r3
 800379e:	d00c      	beq.n	80037ba <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80037a0:	4b44      	ldr	r3, [pc, #272]	@ (80038b4 <HAL_ADC_Init+0x344>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a44      	ldr	r2, [pc, #272]	@ (80038b8 <HAL_ADC_Init+0x348>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	23f0      	movs	r3, #240	@ 0xf0
 80037b0:	039b      	lsls	r3, r3, #14
 80037b2:	401a      	ands	r2, r3
 80037b4:	4b3f      	ldr	r3, [pc, #252]	@ (80038b4 <HAL_ADC_Init+0x344>)
 80037b6:	430a      	orrs	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c2:	001a      	movs	r2, r3
 80037c4:	2100      	movs	r1, #0
 80037c6:	f7ff fdbe 	bl	8003346 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d2:	493a      	ldr	r1, [pc, #232]	@ (80038bc <HAL_ADC_Init+0x34c>)
 80037d4:	001a      	movs	r2, r3
 80037d6:	f7ff fdb6 	bl	8003346 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2110      	movs	r1, #16
 80037ee:	4249      	negs	r1, r1
 80037f0:	430a      	orrs	r2, r1
 80037f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80037f4:	e018      	b.n	8003828 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	2380      	movs	r3, #128	@ 0x80
 80037fc:	039b      	lsls	r3, r3, #14
 80037fe:	429a      	cmp	r2, r3
 8003800:	d112      	bne.n	8003828 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	3b01      	subs	r3, #1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	221c      	movs	r2, #28
 8003812:	4013      	ands	r3, r2
 8003814:	2210      	movs	r2, #16
 8003816:	4252      	negs	r2, r2
 8003818:	409a      	lsls	r2, r3
 800381a:	0011      	movs	r1, r2
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2100      	movs	r1, #0
 800382e:	0018      	movs	r0, r3
 8003830:	f7ff fda6 	bl	8003380 <LL_ADC_GetSamplingTimeCommonChannels>
 8003834:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800383a:	429a      	cmp	r2, r3
 800383c:	d10b      	bne.n	8003856 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003848:	2203      	movs	r2, #3
 800384a:	4393      	bics	r3, r2
 800384c:	2201      	movs	r2, #1
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003854:	e01c      	b.n	8003890 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385a:	2212      	movs	r2, #18
 800385c:	4393      	bics	r3, r2
 800385e:	2210      	movs	r2, #16
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386a:	2201      	movs	r2, #1
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003872:	231f      	movs	r3, #31
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800387a:	e009      	b.n	8003890 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	2210      	movs	r2, #16
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003888:	231f      	movs	r3, #31
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003890:	231f      	movs	r3, #31
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	781b      	ldrb	r3, [r3, #0]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b008      	add	sp, #32
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	20000004 	.word	0x20000004
 80038a4:	00030d40 	.word	0x00030d40
 80038a8:	fffffefd 	.word	0xfffffefd
 80038ac:	ffde0201 	.word	0xffde0201
 80038b0:	1ffffc02 	.word	0x1ffffc02
 80038b4:	40012708 	.word	0x40012708
 80038b8:	ffc3ffff 	.word	0xffc3ffff
 80038bc:	07ffff04 	.word	0x07ffff04

080038c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80038c0:	b5b0      	push	{r4, r5, r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7ff fe3d 	bl	800354c <LL_ADC_REG_IsConversionOngoing>
 80038d2:	1e03      	subs	r3, r0, #0
 80038d4:	d135      	bne.n	8003942 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2254      	movs	r2, #84	@ 0x54
 80038da:	5c9b      	ldrb	r3, [r3, r2]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_Start+0x24>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e035      	b.n	8003950 <HAL_ADC_Start+0x90>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2254      	movs	r2, #84	@ 0x54
 80038e8:	2101      	movs	r1, #1
 80038ea:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80038ec:	250f      	movs	r5, #15
 80038ee:	197c      	adds	r4, r7, r5
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 faaa 	bl	8003e4c <ADC_Enable>
 80038f8:	0003      	movs	r3, r0
 80038fa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038fc:	197b      	adds	r3, r7, r5
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d119      	bne.n	8003938 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003908:	4a13      	ldr	r2, [pc, #76]	@ (8003958 <HAL_ADC_Start+0x98>)
 800390a:	4013      	ands	r3, r2
 800390c:	2280      	movs	r2, #128	@ 0x80
 800390e:	0052      	lsls	r2, r2, #1
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	221c      	movs	r2, #28
 8003922:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2254      	movs	r2, #84	@ 0x54
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	0018      	movs	r0, r3
 8003932:	f7ff fdf9 	bl	8003528 <LL_ADC_REG_StartConversion>
 8003936:	e008      	b.n	800394a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2254      	movs	r2, #84	@ 0x54
 800393c:	2100      	movs	r1, #0
 800393e:	5499      	strb	r1, [r3, r2]
 8003940:	e003      	b.n	800394a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003942:	230f      	movs	r3, #15
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	2202      	movs	r2, #2
 8003948:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800394a:	230f      	movs	r3, #15
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	781b      	ldrb	r3, [r3, #0]
}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	b004      	add	sp, #16
 8003956:	bdb0      	pop	{r4, r5, r7, pc}
 8003958:	fffff0fe 	.word	0xfffff0fe

0800395c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2b08      	cmp	r3, #8
 800396c:	d102      	bne.n	8003974 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800396e:	2308      	movs	r3, #8
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e00f      	b.n	8003994 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	4013      	ands	r3, r2
 800397e:	d007      	beq.n	8003990 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003984:	2220      	movs	r2, #32
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e072      	b.n	8003a76 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003990:	2304      	movs	r3, #4
 8003992:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003994:	f7ff fc72 	bl	800327c <HAL_GetTick>
 8003998:	0003      	movs	r3, r0
 800399a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800399c:	e01f      	b.n	80039de <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	3301      	adds	r3, #1
 80039a2:	d01c      	beq.n	80039de <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80039a4:	f7ff fc6a 	bl	800327c <HAL_GetTick>
 80039a8:	0002      	movs	r2, r0
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d302      	bcc.n	80039ba <HAL_ADC_PollForConversion+0x5e>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d111      	bne.n	80039de <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4013      	ands	r3, r2
 80039c4:	d10b      	bne.n	80039de <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ca:	2204      	movs	r2, #4
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2254      	movs	r2, #84	@ 0x54
 80039d6:	2100      	movs	r1, #0
 80039d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e04b      	b.n	8003a76 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	d0d9      	beq.n	800399e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ee:	2280      	movs	r2, #128	@ 0x80
 80039f0:	0092      	lsls	r2, r2, #2
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7ff fcd6 	bl	80033ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d02e      	beq.n	8003a64 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7e9b      	ldrb	r3, [r3, #26]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d12a      	bne.n	8003a64 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2208      	movs	r2, #8
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d123      	bne.n	8003a64 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f7ff fd93 	bl	800354c <LL_ADC_REG_IsConversionOngoing>
 8003a26:	1e03      	subs	r3, r0, #0
 8003a28:	d110      	bne.n	8003a4c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	210c      	movs	r1, #12
 8003a36:	438a      	bics	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	4a10      	ldr	r2, [pc, #64]	@ (8003a80 <HAL_ADC_PollForConversion+0x124>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	2201      	movs	r2, #1
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a4a:	e00b      	b.n	8003a64 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	2220      	movs	r2, #32
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7e1b      	ldrb	r3, [r3, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	220c      	movs	r2, #12
 8003a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	0018      	movs	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	fffffefe 	.word	0xfffffefe

08003a84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003a92:	0018      	movs	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b002      	add	sp, #8
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa6:	2317      	movs	r3, #23
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2254      	movs	r2, #84	@ 0x54
 8003ab6:	5c9b      	ldrb	r3, [r3, r2]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x24>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e1c0      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x3a6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2254      	movs	r2, #84	@ 0x54
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	0018      	movs	r0, r3
 8003ace:	f7ff fd3d 	bl	800354c <LL_ADC_REG_IsConversionOngoing>
 8003ad2:	1e03      	subs	r3, r0, #0
 8003ad4:	d000      	beq.n	8003ad8 <HAL_ADC_ConfigChannel+0x3c>
 8003ad6:	e1a3      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d100      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x46>
 8003ae0:	e143      	b.n	8003d6a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	2380      	movs	r3, #128	@ 0x80
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d004      	beq.n	8003af8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003af2:	4ac1      	ldr	r2, [pc, #772]	@ (8003df8 <HAL_ADC_ConfigChannel+0x35c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d108      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	0019      	movs	r1, r3
 8003b02:	0010      	movs	r0, r2
 8003b04:	f7ff fc84 	bl	8003410 <LL_ADC_REG_SetSequencerChAdd>
 8003b08:	e0c9      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	211f      	movs	r1, #31
 8003b14:	400b      	ands	r3, r1
 8003b16:	210f      	movs	r1, #15
 8003b18:	4099      	lsls	r1, r3
 8003b1a:	000b      	movs	r3, r1
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	035b      	lsls	r3, r3, #13
 8003b28:	0b5b      	lsrs	r3, r3, #13
 8003b2a:	d105      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x9c>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0e9b      	lsrs	r3, r3, #26
 8003b32:	221f      	movs	r2, #31
 8003b34:	4013      	ands	r3, r2
 8003b36:	e098      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d000      	beq.n	8003b44 <HAL_ADC_ConfigChannel+0xa8>
 8003b42:	e091      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x1cc>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d000      	beq.n	8003b50 <HAL_ADC_ConfigChannel+0xb4>
 8003b4e:	e089      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x1c8>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2204      	movs	r2, #4
 8003b56:	4013      	ands	r3, r2
 8003b58:	d000      	beq.n	8003b5c <HAL_ADC_ConfigChannel+0xc0>
 8003b5a:	e081      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x1c4>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2208      	movs	r2, #8
 8003b62:	4013      	ands	r3, r2
 8003b64:	d000      	beq.n	8003b68 <HAL_ADC_ConfigChannel+0xcc>
 8003b66:	e079      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x1c0>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d000      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0xd8>
 8003b72:	e071      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x1bc>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d000      	beq.n	8003b80 <HAL_ADC_ConfigChannel+0xe4>
 8003b7e:	e069      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x1b8>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2240      	movs	r2, #64	@ 0x40
 8003b86:	4013      	ands	r3, r2
 8003b88:	d000      	beq.n	8003b8c <HAL_ADC_ConfigChannel+0xf0>
 8003b8a:	e061      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x1b4>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2280      	movs	r2, #128	@ 0x80
 8003b92:	4013      	ands	r3, r2
 8003b94:	d000      	beq.n	8003b98 <HAL_ADC_ConfigChannel+0xfc>
 8003b96:	e059      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x1b0>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	2380      	movs	r3, #128	@ 0x80
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d151      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x1ac>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	2380      	movs	r3, #128	@ 0x80
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4013      	ands	r3, r2
 8003bae:	d149      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x1a8>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	2380      	movs	r3, #128	@ 0x80
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d141      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x1a4>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	2380      	movs	r3, #128	@ 0x80
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d139      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x1a0>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	2380      	movs	r3, #128	@ 0x80
 8003bce:	015b      	lsls	r3, r3, #5
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d131      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x19c>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	019b      	lsls	r3, r3, #6
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d129      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x198>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	01db      	lsls	r3, r3, #7
 8003be8:	4013      	ands	r3, r2
 8003bea:	d121      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x194>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d119      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x190>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2380      	movs	r3, #128	@ 0x80
 8003bfe:	025b      	lsls	r3, r3, #9
 8003c00:	4013      	ands	r3, r2
 8003c02:	d111      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x18c>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d109      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x188>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	02db      	lsls	r3, r3, #11
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d001      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0x184>
 8003c1c:	2312      	movs	r3, #18
 8003c1e:	e024      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c20:	2300      	movs	r3, #0
 8003c22:	e022      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c24:	2311      	movs	r3, #17
 8003c26:	e020      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	e01e      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c2c:	230f      	movs	r3, #15
 8003c2e:	e01c      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c30:	230e      	movs	r3, #14
 8003c32:	e01a      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c34:	230d      	movs	r3, #13
 8003c36:	e018      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c38:	230c      	movs	r3, #12
 8003c3a:	e016      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c3c:	230b      	movs	r3, #11
 8003c3e:	e014      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c40:	230a      	movs	r3, #10
 8003c42:	e012      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c44:	2309      	movs	r3, #9
 8003c46:	e010      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c48:	2308      	movs	r3, #8
 8003c4a:	e00e      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c4c:	2307      	movs	r3, #7
 8003c4e:	e00c      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c50:	2306      	movs	r3, #6
 8003c52:	e00a      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c54:	2305      	movs	r3, #5
 8003c56:	e008      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c58:	2304      	movs	r3, #4
 8003c5a:	e006      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e004      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e002      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1ce>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	6852      	ldr	r2, [r2, #4]
 8003c6e:	201f      	movs	r0, #31
 8003c70:	4002      	ands	r2, r0
 8003c72:	4093      	lsls	r3, r2
 8003c74:	000a      	movs	r2, r1
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d808      	bhi.n	8003c9e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	001a      	movs	r2, r3
 8003c9a:	f7ff fb99 	bl	80033d0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6819      	ldr	r1, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	001a      	movs	r2, r3
 8003cac:	f7ff fbd4 	bl	8003458 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db00      	blt.n	8003cba <HAL_ADC_ConfigChannel+0x21e>
 8003cb8:	e0bc      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cba:	4b50      	ldr	r3, [pc, #320]	@ (8003dfc <HAL_ADC_ConfigChannel+0x360>)
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7ff fb35 	bl	800332c <LL_ADC_GetCommonPathInternalCh>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a4d      	ldr	r2, [pc, #308]	@ (8003e00 <HAL_ADC_ConfigChannel+0x364>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d122      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	2380      	movs	r3, #128	@ 0x80
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003cd8:	d11d      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2280      	movs	r2, #128	@ 0x80
 8003cde:	0412      	lsls	r2, r2, #16
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	4a46      	ldr	r2, [pc, #280]	@ (8003dfc <HAL_ADC_ConfigChannel+0x360>)
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	0010      	movs	r0, r2
 8003ce8:	f7ff fb0c 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cec:	4b45      	ldr	r3, [pc, #276]	@ (8003e04 <HAL_ADC_ConfigChannel+0x368>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4945      	ldr	r1, [pc, #276]	@ (8003e08 <HAL_ADC_ConfigChannel+0x36c>)
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7fc fa20 	bl	8000138 <__udivsi3>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	0013      	movs	r3, r2
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	189b      	adds	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d06:	e002      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f9      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d14:	e08e      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8003e0c <HAL_ADC_ConfigChannel+0x370>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10e      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	045b      	lsls	r3, r3, #17
 8003d26:	4013      	ands	r3, r2
 8003d28:	d109      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2280      	movs	r2, #128	@ 0x80
 8003d2e:	0452      	lsls	r2, r2, #17
 8003d30:	4313      	orrs	r3, r2
 8003d32:	4a32      	ldr	r2, [pc, #200]	@ (8003dfc <HAL_ADC_ConfigChannel+0x360>)
 8003d34:	0019      	movs	r1, r3
 8003d36:	0010      	movs	r0, r2
 8003d38:	f7ff fae4 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
 8003d3c:	e07a      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a33      	ldr	r2, [pc, #204]	@ (8003e10 <HAL_ADC_ConfigChannel+0x374>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d000      	beq.n	8003d4a <HAL_ADC_ConfigChannel+0x2ae>
 8003d48:	e074      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	2380      	movs	r3, #128	@ 0x80
 8003d4e:	03db      	lsls	r3, r3, #15
 8003d50:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d52:	d000      	beq.n	8003d56 <HAL_ADC_ConfigChannel+0x2ba>
 8003d54:	e06e      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2280      	movs	r2, #128	@ 0x80
 8003d5a:	03d2      	lsls	r2, r2, #15
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	4a27      	ldr	r2, [pc, #156]	@ (8003dfc <HAL_ADC_ConfigChannel+0x360>)
 8003d60:	0019      	movs	r1, r3
 8003d62:	0010      	movs	r0, r2
 8003d64:	f7ff face 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
 8003d68:	e064      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	2380      	movs	r3, #128	@ 0x80
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d004      	beq.n	8003d80 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003df8 <HAL_ADC_ConfigChannel+0x35c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d107      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	0019      	movs	r1, r3
 8003d8a:	0010      	movs	r0, r2
 8003d8c:	f7ff fb51 	bl	8003432 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da4d      	bge.n	8003e34 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <HAL_ADC_ConfigChannel+0x360>)
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7ff fac6 	bl	800332c <LL_ADC_GetCommonPathInternalCh>
 8003da0:	0003      	movs	r3, r0
 8003da2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <HAL_ADC_ConfigChannel+0x364>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4a18      	ldr	r2, [pc, #96]	@ (8003e14 <HAL_ADC_ConfigChannel+0x378>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	4a11      	ldr	r2, [pc, #68]	@ (8003dfc <HAL_ADC_ConfigChannel+0x360>)
 8003db6:	0019      	movs	r1, r3
 8003db8:	0010      	movs	r0, r2
 8003dba:	f7ff faa3 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
 8003dbe:	e039      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a11      	ldr	r2, [pc, #68]	@ (8003e0c <HAL_ADC_ConfigChannel+0x370>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d108      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4a12      	ldr	r2, [pc, #72]	@ (8003e18 <HAL_ADC_ConfigChannel+0x37c>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003dfc <HAL_ADC_ConfigChannel+0x360>)
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	0010      	movs	r0, r2
 8003dd6:	f7ff fa95 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
 8003dda:	e02b      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0b      	ldr	r2, [pc, #44]	@ (8003e10 <HAL_ADC_ConfigChannel+0x374>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d126      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e1c <HAL_ADC_ConfigChannel+0x380>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	4a03      	ldr	r2, [pc, #12]	@ (8003dfc <HAL_ADC_ConfigChannel+0x360>)
 8003dee:	0019      	movs	r1, r3
 8003df0:	0010      	movs	r0, r2
 8003df2:	f7ff fa87 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
 8003df6:	e01d      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x398>
 8003df8:	80000004 	.word	0x80000004
 8003dfc:	40012708 	.word	0x40012708
 8003e00:	b0001000 	.word	0xb0001000
 8003e04:	20000004 	.word	0x20000004
 8003e08:	00030d40 	.word	0x00030d40
 8003e0c:	b8004000 	.word	0xb8004000
 8003e10:	b4002000 	.word	0xb4002000
 8003e14:	ff7fffff 	.word	0xff7fffff
 8003e18:	feffffff 	.word	0xfeffffff
 8003e1c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e24:	2220      	movs	r2, #32
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003e2c:	2317      	movs	r3, #23
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2254      	movs	r2, #84	@ 0x54
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003e3c:	2317      	movs	r3, #23
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	781b      	ldrb	r3, [r3, #0]
}
 8003e42:	0018      	movs	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b006      	add	sp, #24
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			@ (mov r8, r8)

08003e4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7ff fb51 	bl	8003504 <LL_ADC_IsEnabled>
 8003e62:	1e03      	subs	r3, r0, #0
 8003e64:	d000      	beq.n	8003e68 <ADC_Enable+0x1c>
 8003e66:	e069      	b.n	8003f3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	4a36      	ldr	r2, [pc, #216]	@ (8003f48 <ADC_Enable+0xfc>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	d00d      	beq.n	8003e90 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e78:	2210      	movs	r2, #16
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e84:	2201      	movs	r2, #1
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e056      	b.n	8003f3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7ff fb23 	bl	80034e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003f4c <ADC_Enable+0x100>)
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f7ff fa45 	bl	800332c <LL_ADC_GetCommonPathInternalCh>
 8003ea2:	0002      	movs	r2, r0
 8003ea4:	2380      	movs	r3, #128	@ 0x80
 8003ea6:	041b      	lsls	r3, r3, #16
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d00f      	beq.n	8003ecc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eac:	4b28      	ldr	r3, [pc, #160]	@ (8003f50 <ADC_Enable+0x104>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4928      	ldr	r1, [pc, #160]	@ (8003f54 <ADC_Enable+0x108>)
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7fc f940 	bl	8000138 <__udivsi3>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003ebc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ebe:	e002      	b.n	8003ec6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f9      	bne.n	8003ec0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7e5b      	ldrb	r3, [r3, #25]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d033      	beq.n	8003f3c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003ed4:	f7ff f9d2 	bl	800327c <HAL_GetTick>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003edc:	e027      	b.n	8003f2e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7ff fb0e 	bl	8003504 <LL_ADC_IsEnabled>
 8003ee8:	1e03      	subs	r3, r0, #0
 8003eea:	d104      	bne.n	8003ef6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7ff faf5 	bl	80034e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ef6:	f7ff f9c1 	bl	800327c <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d914      	bls.n	8003f2e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d00d      	beq.n	8003f2e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f16:	2210      	movs	r2, #16
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f22:	2201      	movs	r2, #1
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e007      	b.n	8003f3e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2201      	movs	r2, #1
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d1d0      	bne.n	8003ede <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	0018      	movs	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b004      	add	sp, #16
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	80000017 	.word	0x80000017
 8003f4c:	40012708 	.word	0x40012708
 8003f50:	20000004 	.word	0x20000004
 8003f54:	00030d40 	.word	0x00030d40

08003f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f58:	b590      	push	{r4, r7, lr}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	0002      	movs	r2, r0
 8003f60:	6039      	str	r1, [r7, #0]
 8003f62:	1dfb      	adds	r3, r7, #7
 8003f64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f66:	1dfb      	adds	r3, r7, #7
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f6c:	d828      	bhi.n	8003fc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800402c <__NVIC_SetPriority+0xd4>)
 8003f70:	1dfb      	adds	r3, r7, #7
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	b25b      	sxtb	r3, r3
 8003f76:	089b      	lsrs	r3, r3, #2
 8003f78:	33c0      	adds	r3, #192	@ 0xc0
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	589b      	ldr	r3, [r3, r2]
 8003f7e:	1dfa      	adds	r2, r7, #7
 8003f80:	7812      	ldrb	r2, [r2, #0]
 8003f82:	0011      	movs	r1, r2
 8003f84:	2203      	movs	r2, #3
 8003f86:	400a      	ands	r2, r1
 8003f88:	00d2      	lsls	r2, r2, #3
 8003f8a:	21ff      	movs	r1, #255	@ 0xff
 8003f8c:	4091      	lsls	r1, r2
 8003f8e:	000a      	movs	r2, r1
 8003f90:	43d2      	mvns	r2, r2
 8003f92:	401a      	ands	r2, r3
 8003f94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	019b      	lsls	r3, r3, #6
 8003f9a:	22ff      	movs	r2, #255	@ 0xff
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	1dfb      	adds	r3, r7, #7
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	4003      	ands	r3, r0
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fac:	481f      	ldr	r0, [pc, #124]	@ (800402c <__NVIC_SetPriority+0xd4>)
 8003fae:	1dfb      	adds	r3, r7, #7
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	b25b      	sxtb	r3, r3
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	33c0      	adds	r3, #192	@ 0xc0
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fbe:	e031      	b.n	8004024 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8004030 <__NVIC_SetPriority+0xd8>)
 8003fc2:	1dfb      	adds	r3, r7, #7
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	230f      	movs	r3, #15
 8003fca:	400b      	ands	r3, r1
 8003fcc:	3b08      	subs	r3, #8
 8003fce:	089b      	lsrs	r3, r3, #2
 8003fd0:	3306      	adds	r3, #6
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	18d3      	adds	r3, r2, r3
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	1dfa      	adds	r2, r7, #7
 8003fdc:	7812      	ldrb	r2, [r2, #0]
 8003fde:	0011      	movs	r1, r2
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	400a      	ands	r2, r1
 8003fe4:	00d2      	lsls	r2, r2, #3
 8003fe6:	21ff      	movs	r1, #255	@ 0xff
 8003fe8:	4091      	lsls	r1, r2
 8003fea:	000a      	movs	r2, r1
 8003fec:	43d2      	mvns	r2, r2
 8003fee:	401a      	ands	r2, r3
 8003ff0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	019b      	lsls	r3, r3, #6
 8003ff6:	22ff      	movs	r2, #255	@ 0xff
 8003ff8:	401a      	ands	r2, r3
 8003ffa:	1dfb      	adds	r3, r7, #7
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	0018      	movs	r0, r3
 8004000:	2303      	movs	r3, #3
 8004002:	4003      	ands	r3, r0
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004008:	4809      	ldr	r0, [pc, #36]	@ (8004030 <__NVIC_SetPriority+0xd8>)
 800400a:	1dfb      	adds	r3, r7, #7
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	001c      	movs	r4, r3
 8004010:	230f      	movs	r3, #15
 8004012:	4023      	ands	r3, r4
 8004014:	3b08      	subs	r3, #8
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	430a      	orrs	r2, r1
 800401a:	3306      	adds	r3, #6
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	18c3      	adds	r3, r0, r3
 8004020:	3304      	adds	r3, #4
 8004022:	601a      	str	r2, [r3, #0]
}
 8004024:	46c0      	nop			@ (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	b003      	add	sp, #12
 800402a:	bd90      	pop	{r4, r7, pc}
 800402c:	e000e100 	.word	0xe000e100
 8004030:	e000ed00 	.word	0xe000ed00

08004034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	1e5a      	subs	r2, r3, #1
 8004040:	2380      	movs	r3, #128	@ 0x80
 8004042:	045b      	lsls	r3, r3, #17
 8004044:	429a      	cmp	r2, r3
 8004046:	d301      	bcc.n	800404c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004048:	2301      	movs	r3, #1
 800404a:	e010      	b.n	800406e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800404c:	4b0a      	ldr	r3, [pc, #40]	@ (8004078 <SysTick_Config+0x44>)
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	3a01      	subs	r2, #1
 8004052:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004054:	2301      	movs	r3, #1
 8004056:	425b      	negs	r3, r3
 8004058:	2103      	movs	r1, #3
 800405a:	0018      	movs	r0, r3
 800405c:	f7ff ff7c 	bl	8003f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <SysTick_Config+0x44>)
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004066:	4b04      	ldr	r3, [pc, #16]	@ (8004078 <SysTick_Config+0x44>)
 8004068:	2207      	movs	r2, #7
 800406a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800406c:	2300      	movs	r3, #0
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b002      	add	sp, #8
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	e000e010 	.word	0xe000e010

0800407c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	210f      	movs	r1, #15
 8004088:	187b      	adds	r3, r7, r1
 800408a:	1c02      	adds	r2, r0, #0
 800408c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	187b      	adds	r3, r7, r1
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	b25b      	sxtb	r3, r3
 8004096:	0011      	movs	r1, r2
 8004098:	0018      	movs	r0, r3
 800409a:	f7ff ff5d 	bl	8003f58 <__NVIC_SetPriority>
}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b004      	add	sp, #16
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f7ff ffbf 	bl	8004034 <SysTick_Config>
 80040b6:	0003      	movs	r3, r0
}
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b002      	add	sp, #8
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ce:	e147      	b.n	8004360 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2101      	movs	r1, #1
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4091      	lsls	r1, r2
 80040da:	000a      	movs	r2, r1
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d100      	bne.n	80040e8 <HAL_GPIO_Init+0x28>
 80040e6:	e138      	b.n	800435a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2203      	movs	r2, #3
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d005      	beq.n	8004100 <HAL_GPIO_Init+0x40>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2203      	movs	r2, #3
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d130      	bne.n	8004162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	409a      	lsls	r2, r3
 800410e:	0013      	movs	r3, r2
 8004110:	43da      	mvns	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	409a      	lsls	r2, r3
 8004122:	0013      	movs	r3, r2
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004136:	2201      	movs	r2, #1
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	409a      	lsls	r2, r3
 800413c:	0013      	movs	r3, r2
 800413e:	43da      	mvns	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	2201      	movs	r2, #1
 800414e:	401a      	ands	r2, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	409a      	lsls	r2, r3
 8004154:	0013      	movs	r3, r2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2203      	movs	r2, #3
 8004168:	4013      	ands	r3, r2
 800416a:	2b03      	cmp	r3, #3
 800416c:	d017      	beq.n	800419e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	2203      	movs	r2, #3
 800417a:	409a      	lsls	r2, r3
 800417c:	0013      	movs	r3, r2
 800417e:	43da      	mvns	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	409a      	lsls	r2, r3
 8004190:	0013      	movs	r3, r2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2203      	movs	r2, #3
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d123      	bne.n	80041f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	08da      	lsrs	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3208      	adds	r2, #8
 80041b2:	0092      	lsls	r2, r2, #2
 80041b4:	58d3      	ldr	r3, [r2, r3]
 80041b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2207      	movs	r2, #7
 80041bc:	4013      	ands	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	220f      	movs	r2, #15
 80041c2:	409a      	lsls	r2, r3
 80041c4:	0013      	movs	r3, r2
 80041c6:	43da      	mvns	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2107      	movs	r1, #7
 80041d6:	400b      	ands	r3, r1
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	409a      	lsls	r2, r3
 80041dc:	0013      	movs	r3, r2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	08da      	lsrs	r2, r3, #3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3208      	adds	r2, #8
 80041ec:	0092      	lsls	r2, r2, #2
 80041ee:	6939      	ldr	r1, [r7, #16]
 80041f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	2203      	movs	r2, #3
 80041fe:	409a      	lsls	r2, r3
 8004200:	0013      	movs	r3, r2
 8004202:	43da      	mvns	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2203      	movs	r2, #3
 8004210:	401a      	ands	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	409a      	lsls	r2, r3
 8004218:	0013      	movs	r3, r2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	23c0      	movs	r3, #192	@ 0xc0
 800422c:	029b      	lsls	r3, r3, #10
 800422e:	4013      	ands	r3, r2
 8004230:	d100      	bne.n	8004234 <HAL_GPIO_Init+0x174>
 8004232:	e092      	b.n	800435a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004234:	4a50      	ldr	r2, [pc, #320]	@ (8004378 <HAL_GPIO_Init+0x2b8>)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	3318      	adds	r3, #24
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	589b      	ldr	r3, [r3, r2]
 8004240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2203      	movs	r2, #3
 8004246:	4013      	ands	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	220f      	movs	r2, #15
 800424c:	409a      	lsls	r2, r3
 800424e:	0013      	movs	r3, r2
 8004250:	43da      	mvns	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4013      	ands	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	23a0      	movs	r3, #160	@ 0xa0
 800425c:	05db      	lsls	r3, r3, #23
 800425e:	429a      	cmp	r2, r3
 8004260:	d013      	beq.n	800428a <HAL_GPIO_Init+0x1ca>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a45      	ldr	r2, [pc, #276]	@ (800437c <HAL_GPIO_Init+0x2bc>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00d      	beq.n	8004286 <HAL_GPIO_Init+0x1c6>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a44      	ldr	r2, [pc, #272]	@ (8004380 <HAL_GPIO_Init+0x2c0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <HAL_GPIO_Init+0x1c2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a43      	ldr	r2, [pc, #268]	@ (8004384 <HAL_GPIO_Init+0x2c4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <HAL_GPIO_Init+0x1be>
 800427a:	2303      	movs	r3, #3
 800427c:	e006      	b.n	800428c <HAL_GPIO_Init+0x1cc>
 800427e:	2305      	movs	r3, #5
 8004280:	e004      	b.n	800428c <HAL_GPIO_Init+0x1cc>
 8004282:	2302      	movs	r3, #2
 8004284:	e002      	b.n	800428c <HAL_GPIO_Init+0x1cc>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_GPIO_Init+0x1cc>
 800428a:	2300      	movs	r3, #0
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	2103      	movs	r1, #3
 8004290:	400a      	ands	r2, r1
 8004292:	00d2      	lsls	r2, r2, #3
 8004294:	4093      	lsls	r3, r2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800429c:	4936      	ldr	r1, [pc, #216]	@ (8004378 <HAL_GPIO_Init+0x2b8>)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	089b      	lsrs	r3, r3, #2
 80042a2:	3318      	adds	r3, #24
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042aa:	4b33      	ldr	r3, [pc, #204]	@ (8004378 <HAL_GPIO_Init+0x2b8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	43da      	mvns	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	2380      	movs	r3, #128	@ 0x80
 80042c0:	035b      	lsls	r3, r3, #13
 80042c2:	4013      	ands	r3, r2
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004378 <HAL_GPIO_Init+0x2b8>)
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80042d4:	4b28      	ldr	r3, [pc, #160]	@ (8004378 <HAL_GPIO_Init+0x2b8>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	43da      	mvns	r2, r3
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	2380      	movs	r3, #128	@ 0x80
 80042ea:	039b      	lsls	r3, r3, #14
 80042ec:	4013      	ands	r3, r2
 80042ee:	d003      	beq.n	80042f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004378 <HAL_GPIO_Init+0x2b8>)
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004378 <HAL_GPIO_Init+0x2b8>)
 8004300:	2384      	movs	r3, #132	@ 0x84
 8004302:	58d3      	ldr	r3, [r2, r3]
 8004304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	43da      	mvns	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	2380      	movs	r3, #128	@ 0x80
 8004316:	029b      	lsls	r3, r3, #10
 8004318:	4013      	ands	r3, r2
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004324:	4914      	ldr	r1, [pc, #80]	@ (8004378 <HAL_GPIO_Init+0x2b8>)
 8004326:	2284      	movs	r2, #132	@ 0x84
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800432c:	4a12      	ldr	r2, [pc, #72]	@ (8004378 <HAL_GPIO_Init+0x2b8>)
 800432e:	2380      	movs	r3, #128	@ 0x80
 8004330:	58d3      	ldr	r3, [r2, r3]
 8004332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	43da      	mvns	r2, r3
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4013      	ands	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	2380      	movs	r3, #128	@ 0x80
 8004344:	025b      	lsls	r3, r3, #9
 8004346:	4013      	ands	r3, r2
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004352:	4909      	ldr	r1, [pc, #36]	@ (8004378 <HAL_GPIO_Init+0x2b8>)
 8004354:	2280      	movs	r2, #128	@ 0x80
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3301      	adds	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	40da      	lsrs	r2, r3
 8004368:	1e13      	subs	r3, r2, #0
 800436a:	d000      	beq.n	800436e <HAL_GPIO_Init+0x2ae>
 800436c:	e6b0      	b.n	80040d0 <HAL_GPIO_Init+0x10>
  }
}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b006      	add	sp, #24
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021800 	.word	0x40021800
 800437c:	50000400 	.word	0x50000400
 8004380:	50000800 	.word	0x50000800
 8004384:	50000c00 	.word	0x50000c00

08004388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	000a      	movs	r2, r1
 8004392:	1cbb      	adds	r3, r7, #2
 8004394:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	1cba      	adds	r2, r7, #2
 800439c:	8812      	ldrh	r2, [r2, #0]
 800439e:	4013      	ands	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80043a2:	230f      	movs	r3, #15
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e003      	b.n	80043b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ac:	230f      	movs	r3, #15
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80043b4:	230f      	movs	r3, #15
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	781b      	ldrb	r3, [r3, #0]
}
 80043ba:	0018      	movs	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	b004      	add	sp, #16
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	0008      	movs	r0, r1
 80043cc:	0011      	movs	r1, r2
 80043ce:	1cbb      	adds	r3, r7, #2
 80043d0:	1c02      	adds	r2, r0, #0
 80043d2:	801a      	strh	r2, [r3, #0]
 80043d4:	1c7b      	adds	r3, r7, #1
 80043d6:	1c0a      	adds	r2, r1, #0
 80043d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043da:	1c7b      	adds	r3, r7, #1
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043e2:	1cbb      	adds	r3, r7, #2
 80043e4:	881a      	ldrh	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043ea:	e003      	b.n	80043f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ec:	1cbb      	adds	r3, r7, #2
 80043ee:	881a      	ldrh	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043f4:	46c0      	nop			@ (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b002      	add	sp, #8
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	000a      	movs	r2, r1
 8004406:	1cbb      	adds	r3, r7, #2
 8004408:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004410:	1cbb      	adds	r3, r7, #2
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4013      	ands	r3, r2
 8004418:	041a      	lsls	r2, r3, #16
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	43db      	mvns	r3, r3
 800441e:	1cb9      	adds	r1, r7, #2
 8004420:	8809      	ldrh	r1, [r1, #0]
 8004422:	400b      	ands	r3, r1
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	619a      	str	r2, [r3, #24]
}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	46bd      	mov	sp, r7
 800442e:	b004      	add	sp, #16
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e04a      	b.n	80044da <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	223d      	movs	r2, #61	@ 0x3d
 8004448:	5c9b      	ldrb	r3, [r3, r2]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d107      	bne.n	8004460 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	223c      	movs	r2, #60	@ 0x3c
 8004454:	2100      	movs	r1, #0
 8004456:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	0018      	movs	r0, r3
 800445c:	f000 f841 	bl	80044e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	223d      	movs	r2, #61	@ 0x3d
 8004464:	2102      	movs	r1, #2
 8004466:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	0019      	movs	r1, r3
 8004472:	0010      	movs	r0, r2
 8004474:	f000 fa22 	bl	80048bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2248      	movs	r2, #72	@ 0x48
 800447c:	2101      	movs	r1, #1
 800447e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	223e      	movs	r2, #62	@ 0x3e
 8004484:	2101      	movs	r1, #1
 8004486:	5499      	strb	r1, [r3, r2]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	223f      	movs	r2, #63	@ 0x3f
 800448c:	2101      	movs	r1, #1
 800448e:	5499      	strb	r1, [r3, r2]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2240      	movs	r2, #64	@ 0x40
 8004494:	2101      	movs	r1, #1
 8004496:	5499      	strb	r1, [r3, r2]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2241      	movs	r2, #65	@ 0x41
 800449c:	2101      	movs	r1, #1
 800449e:	5499      	strb	r1, [r3, r2]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2242      	movs	r2, #66	@ 0x42
 80044a4:	2101      	movs	r1, #1
 80044a6:	5499      	strb	r1, [r3, r2]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2243      	movs	r2, #67	@ 0x43
 80044ac:	2101      	movs	r1, #1
 80044ae:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2244      	movs	r2, #68	@ 0x44
 80044b4:	2101      	movs	r1, #1
 80044b6:	5499      	strb	r1, [r3, r2]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2245      	movs	r2, #69	@ 0x45
 80044bc:	2101      	movs	r1, #1
 80044be:	5499      	strb	r1, [r3, r2]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2246      	movs	r2, #70	@ 0x46
 80044c4:	2101      	movs	r1, #1
 80044c6:	5499      	strb	r1, [r3, r2]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2247      	movs	r2, #71	@ 0x47
 80044cc:	2101      	movs	r1, #1
 80044ce:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	223d      	movs	r2, #61	@ 0x3d
 80044d4:	2101      	movs	r1, #1
 80044d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	b002      	add	sp, #8
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b002      	add	sp, #8
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d108      	bne.n	8004516 <HAL_TIM_PWM_Start+0x22>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	223e      	movs	r2, #62	@ 0x3e
 8004508:	5c9b      	ldrb	r3, [r3, r2]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	1e5a      	subs	r2, r3, #1
 8004510:	4193      	sbcs	r3, r2
 8004512:	b2db      	uxtb	r3, r3
 8004514:	e037      	b.n	8004586 <HAL_TIM_PWM_Start+0x92>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b04      	cmp	r3, #4
 800451a:	d108      	bne.n	800452e <HAL_TIM_PWM_Start+0x3a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	223f      	movs	r2, #63	@ 0x3f
 8004520:	5c9b      	ldrb	r3, [r3, r2]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	1e5a      	subs	r2, r3, #1
 8004528:	4193      	sbcs	r3, r2
 800452a:	b2db      	uxtb	r3, r3
 800452c:	e02b      	b.n	8004586 <HAL_TIM_PWM_Start+0x92>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d108      	bne.n	8004546 <HAL_TIM_PWM_Start+0x52>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2240      	movs	r2, #64	@ 0x40
 8004538:	5c9b      	ldrb	r3, [r3, r2]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	1e5a      	subs	r2, r3, #1
 8004540:	4193      	sbcs	r3, r2
 8004542:	b2db      	uxtb	r3, r3
 8004544:	e01f      	b.n	8004586 <HAL_TIM_PWM_Start+0x92>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d108      	bne.n	800455e <HAL_TIM_PWM_Start+0x6a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2241      	movs	r2, #65	@ 0x41
 8004550:	5c9b      	ldrb	r3, [r3, r2]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	1e5a      	subs	r2, r3, #1
 8004558:	4193      	sbcs	r3, r2
 800455a:	b2db      	uxtb	r3, r3
 800455c:	e013      	b.n	8004586 <HAL_TIM_PWM_Start+0x92>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b10      	cmp	r3, #16
 8004562:	d108      	bne.n	8004576 <HAL_TIM_PWM_Start+0x82>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2242      	movs	r2, #66	@ 0x42
 8004568:	5c9b      	ldrb	r3, [r3, r2]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	1e5a      	subs	r2, r3, #1
 8004570:	4193      	sbcs	r3, r2
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e007      	b.n	8004586 <HAL_TIM_PWM_Start+0x92>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2243      	movs	r2, #67	@ 0x43
 800457a:	5c9b      	ldrb	r3, [r3, r2]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	1e5a      	subs	r2, r3, #1
 8004582:	4193      	sbcs	r3, r2
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e085      	b.n	800469a <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <HAL_TIM_PWM_Start+0xaa>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	223e      	movs	r2, #62	@ 0x3e
 8004598:	2102      	movs	r1, #2
 800459a:	5499      	strb	r1, [r3, r2]
 800459c:	e023      	b.n	80045e6 <HAL_TIM_PWM_Start+0xf2>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Start+0xba>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	223f      	movs	r2, #63	@ 0x3f
 80045a8:	2102      	movs	r1, #2
 80045aa:	5499      	strb	r1, [r3, r2]
 80045ac:	e01b      	b.n	80045e6 <HAL_TIM_PWM_Start+0xf2>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Start+0xca>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2240      	movs	r2, #64	@ 0x40
 80045b8:	2102      	movs	r1, #2
 80045ba:	5499      	strb	r1, [r3, r2]
 80045bc:	e013      	b.n	80045e6 <HAL_TIM_PWM_Start+0xf2>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b0c      	cmp	r3, #12
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_PWM_Start+0xda>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2241      	movs	r2, #65	@ 0x41
 80045c8:	2102      	movs	r1, #2
 80045ca:	5499      	strb	r1, [r3, r2]
 80045cc:	e00b      	b.n	80045e6 <HAL_TIM_PWM_Start+0xf2>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d104      	bne.n	80045de <HAL_TIM_PWM_Start+0xea>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2242      	movs	r2, #66	@ 0x42
 80045d8:	2102      	movs	r1, #2
 80045da:	5499      	strb	r1, [r3, r2]
 80045dc:	e003      	b.n	80045e6 <HAL_TIM_PWM_Start+0xf2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2243      	movs	r2, #67	@ 0x43
 80045e2:	2102      	movs	r1, #2
 80045e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6839      	ldr	r1, [r7, #0]
 80045ec:	2201      	movs	r2, #1
 80045ee:	0018      	movs	r0, r3
 80045f0:	f000 fcac 	bl	8004f4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a2a      	ldr	r2, [pc, #168]	@ (80046a4 <HAL_TIM_PWM_Start+0x1b0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00e      	beq.n	800461c <HAL_TIM_PWM_Start+0x128>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a29      	ldr	r2, [pc, #164]	@ (80046a8 <HAL_TIM_PWM_Start+0x1b4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d009      	beq.n	800461c <HAL_TIM_PWM_Start+0x128>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a27      	ldr	r2, [pc, #156]	@ (80046ac <HAL_TIM_PWM_Start+0x1b8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_TIM_PWM_Start+0x128>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a26      	ldr	r2, [pc, #152]	@ (80046b0 <HAL_TIM_PWM_Start+0x1bc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_TIM_PWM_Start+0x12c>
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <HAL_TIM_PWM_Start+0x12e>
 8004620:	2300      	movs	r3, #0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2180      	movs	r1, #128	@ 0x80
 8004632:	0209      	lsls	r1, r1, #8
 8004634:	430a      	orrs	r2, r1
 8004636:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a19      	ldr	r2, [pc, #100]	@ (80046a4 <HAL_TIM_PWM_Start+0x1b0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_TIM_PWM_Start+0x162>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1b      	ldr	r2, [pc, #108]	@ (80046b4 <HAL_TIM_PWM_Start+0x1c0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIM_PWM_Start+0x162>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a15      	ldr	r2, [pc, #84]	@ (80046a8 <HAL_TIM_PWM_Start+0x1b4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d116      	bne.n	8004684 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a16      	ldr	r2, [pc, #88]	@ (80046b8 <HAL_TIM_PWM_Start+0x1c4>)
 800465e:	4013      	ands	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b06      	cmp	r3, #6
 8004666:	d016      	beq.n	8004696 <HAL_TIM_PWM_Start+0x1a2>
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	025b      	lsls	r3, r3, #9
 800466e:	429a      	cmp	r2, r3
 8004670:	d011      	beq.n	8004696 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2101      	movs	r1, #1
 800467e:	430a      	orrs	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	e008      	b.n	8004696 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2101      	movs	r1, #1
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e000      	b.n	8004698 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004696:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b004      	add	sp, #16
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800
 80046b4:	40000400 	.word	0x40000400
 80046b8:	00010007 	.word	0x00010007

080046bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c8:	2317      	movs	r3, #23
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	223c      	movs	r2, #60	@ 0x3c
 80046d4:	5c9b      	ldrb	r3, [r3, r2]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_TIM_PWM_ConfigChannel+0x22>
 80046da:	2302      	movs	r3, #2
 80046dc:	e0e5      	b.n	80048aa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	223c      	movs	r2, #60	@ 0x3c
 80046e2:	2101      	movs	r1, #1
 80046e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b14      	cmp	r3, #20
 80046ea:	d900      	bls.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80046ec:	e0d1      	b.n	8004892 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	009a      	lsls	r2, r3, #2
 80046f2:	4b70      	ldr	r3, [pc, #448]	@ (80048b4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80046f4:	18d3      	adds	r3, r2, r3
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	0011      	movs	r1, r2
 8004702:	0018      	movs	r0, r3
 8004704:	f000 f95e 	bl	80049c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2108      	movs	r1, #8
 8004714:	430a      	orrs	r2, r1
 8004716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2104      	movs	r1, #4
 8004724:	438a      	bics	r2, r1
 8004726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	619a      	str	r2, [r3, #24]
      break;
 800473a:	e0af      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	0011      	movs	r1, r2
 8004744:	0018      	movs	r0, r3
 8004746:	f000 f9c7 	bl	8004ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699a      	ldr	r2, [r3, #24]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2180      	movs	r1, #128	@ 0x80
 8004756:	0109      	lsls	r1, r1, #4
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4954      	ldr	r1, [pc, #336]	@ (80048b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004768:	400a      	ands	r2, r1
 800476a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6999      	ldr	r1, [r3, #24]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	619a      	str	r2, [r3, #24]
      break;
 8004780:	e08c      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	0011      	movs	r1, r2
 800478a:	0018      	movs	r0, r3
 800478c:	f000 fa28 	bl	8004be0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69da      	ldr	r2, [r3, #28]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2108      	movs	r1, #8
 800479c:	430a      	orrs	r2, r1
 800479e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2104      	movs	r1, #4
 80047ac:	438a      	bics	r2, r1
 80047ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69d9      	ldr	r1, [r3, #28]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	61da      	str	r2, [r3, #28]
      break;
 80047c2:	e06b      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	0011      	movs	r1, r2
 80047cc:	0018      	movs	r0, r3
 80047ce:	f000 fa8f 	bl	8004cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2180      	movs	r1, #128	@ 0x80
 80047de:	0109      	lsls	r1, r1, #4
 80047e0:	430a      	orrs	r2, r1
 80047e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69da      	ldr	r2, [r3, #28]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4932      	ldr	r1, [pc, #200]	@ (80048b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80047f0:	400a      	ands	r2, r1
 80047f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69d9      	ldr	r1, [r3, #28]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	021a      	lsls	r2, r3, #8
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	61da      	str	r2, [r3, #28]
      break;
 8004808:	e048      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	0011      	movs	r1, r2
 8004812:	0018      	movs	r0, r3
 8004814:	f000 fad6 	bl	8004dc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2108      	movs	r1, #8
 8004824:	430a      	orrs	r2, r1
 8004826:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2104      	movs	r1, #4
 8004834:	438a      	bics	r2, r1
 8004836:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800484a:	e027      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	0011      	movs	r1, r2
 8004854:	0018      	movs	r0, r3
 8004856:	f000 fb15 	bl	8004e84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2180      	movs	r1, #128	@ 0x80
 8004866:	0109      	lsls	r1, r1, #4
 8004868:	430a      	orrs	r2, r1
 800486a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4910      	ldr	r1, [pc, #64]	@ (80048b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004878:	400a      	ands	r2, r1
 800487a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	021a      	lsls	r2, r3, #8
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004890:	e004      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004892:	2317      	movs	r3, #23
 8004894:	18fb      	adds	r3, r7, r3
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
      break;
 800489a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	223c      	movs	r2, #60	@ 0x3c
 80048a0:	2100      	movs	r1, #0
 80048a2:	5499      	strb	r1, [r3, r2]

  return status;
 80048a4:	2317      	movs	r3, #23
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	781b      	ldrb	r3, [r3, #0]
}
 80048aa:	0018      	movs	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b006      	add	sp, #24
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	08007ec4 	.word	0x08007ec4
 80048b8:	fffffbff 	.word	0xfffffbff

080048bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a36      	ldr	r2, [pc, #216]	@ (80049a8 <TIM_Base_SetConfig+0xec>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_Base_SetConfig+0x20>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a35      	ldr	r2, [pc, #212]	@ (80049ac <TIM_Base_SetConfig+0xf0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2270      	movs	r2, #112	@ 0x70
 80048e0:	4393      	bics	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2d      	ldr	r2, [pc, #180]	@ (80049a8 <TIM_Base_SetConfig+0xec>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <TIM_Base_SetConfig+0x62>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2c      	ldr	r2, [pc, #176]	@ (80049ac <TIM_Base_SetConfig+0xf0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00f      	beq.n	800491e <TIM_Base_SetConfig+0x62>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2b      	ldr	r2, [pc, #172]	@ (80049b0 <TIM_Base_SetConfig+0xf4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00b      	beq.n	800491e <TIM_Base_SetConfig+0x62>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2a      	ldr	r2, [pc, #168]	@ (80049b4 <TIM_Base_SetConfig+0xf8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <TIM_Base_SetConfig+0x62>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a29      	ldr	r2, [pc, #164]	@ (80049b8 <TIM_Base_SetConfig+0xfc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d003      	beq.n	800491e <TIM_Base_SetConfig+0x62>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a28      	ldr	r2, [pc, #160]	@ (80049bc <TIM_Base_SetConfig+0x100>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d108      	bne.n	8004930 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a27      	ldr	r2, [pc, #156]	@ (80049c0 <TIM_Base_SetConfig+0x104>)
 8004922:	4013      	ands	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2280      	movs	r2, #128	@ 0x80
 8004934:	4393      	bics	r3, r2
 8004936:	001a      	movs	r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a13      	ldr	r2, [pc, #76]	@ (80049a8 <TIM_Base_SetConfig+0xec>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00b      	beq.n	8004976 <TIM_Base_SetConfig+0xba>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a14      	ldr	r2, [pc, #80]	@ (80049b4 <TIM_Base_SetConfig+0xf8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_Base_SetConfig+0xba>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a13      	ldr	r2, [pc, #76]	@ (80049b8 <TIM_Base_SetConfig+0xfc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_Base_SetConfig+0xba>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a12      	ldr	r2, [pc, #72]	@ (80049bc <TIM_Base_SetConfig+0x100>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d103      	bne.n	800497e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2201      	movs	r2, #1
 800498a:	4013      	ands	r3, r2
 800498c:	2b01      	cmp	r3, #1
 800498e:	d106      	bne.n	800499e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2201      	movs	r2, #1
 8004996:	4393      	bics	r3, r2
 8004998:	001a      	movs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	611a      	str	r2, [r3, #16]
  }
}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b004      	add	sp, #16
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40002000 	.word	0x40002000
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40014400 	.word	0x40014400
 80049bc:	40014800 	.word	0x40014800
 80049c0:	fffffcff 	.word	0xfffffcff

080049c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	2201      	movs	r2, #1
 80049da:	4393      	bics	r3, r2
 80049dc:	001a      	movs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4a32      	ldr	r2, [pc, #200]	@ (8004abc <TIM_OC1_SetConfig+0xf8>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2203      	movs	r2, #3
 80049fa:	4393      	bics	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	4393      	bics	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a28      	ldr	r2, [pc, #160]	@ (8004ac0 <TIM_OC1_SetConfig+0xfc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_OC1_SetConfig+0x76>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a27      	ldr	r2, [pc, #156]	@ (8004ac4 <TIM_OC1_SetConfig+0x100>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_OC1_SetConfig+0x76>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a26      	ldr	r2, [pc, #152]	@ (8004ac8 <TIM_OC1_SetConfig+0x104>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_OC1_SetConfig+0x76>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a25      	ldr	r2, [pc, #148]	@ (8004acc <TIM_OC1_SetConfig+0x108>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d10c      	bne.n	8004a54 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	4393      	bics	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	4393      	bics	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a1a      	ldr	r2, [pc, #104]	@ (8004ac0 <TIM_OC1_SetConfig+0xfc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00b      	beq.n	8004a74 <TIM_OC1_SetConfig+0xb0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a19      	ldr	r2, [pc, #100]	@ (8004ac4 <TIM_OC1_SetConfig+0x100>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d007      	beq.n	8004a74 <TIM_OC1_SetConfig+0xb0>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a18      	ldr	r2, [pc, #96]	@ (8004ac8 <TIM_OC1_SetConfig+0x104>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <TIM_OC1_SetConfig+0xb0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a17      	ldr	r2, [pc, #92]	@ (8004acc <TIM_OC1_SetConfig+0x108>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d111      	bne.n	8004a98 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4a16      	ldr	r2, [pc, #88]	@ (8004ad0 <TIM_OC1_SetConfig+0x10c>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4a15      	ldr	r2, [pc, #84]	@ (8004ad4 <TIM_OC1_SetConfig+0x110>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b006      	add	sp, #24
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	fffeff8f 	.word	0xfffeff8f
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800
 8004ad0:	fffffeff 	.word	0xfffffeff
 8004ad4:	fffffdff 	.word	0xfffffdff

08004ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	2210      	movs	r2, #16
 8004aee:	4393      	bics	r3, r2
 8004af0:	001a      	movs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc0 <TIM_OC2_SetConfig+0xe8>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc4 <TIM_OC2_SetConfig+0xec>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2220      	movs	r2, #32
 8004b22:	4393      	bics	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a24      	ldr	r2, [pc, #144]	@ (8004bc8 <TIM_OC2_SetConfig+0xf0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d10d      	bne.n	8004b56 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2280      	movs	r2, #128	@ 0x80
 8004b3e:	4393      	bics	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2240      	movs	r2, #64	@ 0x40
 8004b52:	4393      	bics	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc8 <TIM_OC2_SetConfig+0xf0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <TIM_OC2_SetConfig+0x9e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a1a      	ldr	r2, [pc, #104]	@ (8004bcc <TIM_OC2_SetConfig+0xf4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <TIM_OC2_SetConfig+0x9e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a19      	ldr	r2, [pc, #100]	@ (8004bd0 <TIM_OC2_SetConfig+0xf8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_OC2_SetConfig+0x9e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a18      	ldr	r2, [pc, #96]	@ (8004bd4 <TIM_OC2_SetConfig+0xfc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d113      	bne.n	8004b9e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4a17      	ldr	r2, [pc, #92]	@ (8004bd8 <TIM_OC2_SetConfig+0x100>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4a16      	ldr	r2, [pc, #88]	@ (8004bdc <TIM_OC2_SetConfig+0x104>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	621a      	str	r2, [r3, #32]
}
 8004bb8:	46c0      	nop			@ (mov r8, r8)
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b006      	add	sp, #24
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	feff8fff 	.word	0xfeff8fff
 8004bc4:	fffffcff 	.word	0xfffffcff
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800
 8004bd8:	fffffbff 	.word	0xfffffbff
 8004bdc:	fffff7ff 	.word	0xfffff7ff

08004be0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	4a33      	ldr	r2, [pc, #204]	@ (8004cc4 <TIM_OC3_SetConfig+0xe4>)
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8004cc8 <TIM_OC3_SetConfig+0xe8>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2203      	movs	r2, #3
 8004c14:	4393      	bics	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	4a29      	ldr	r2, [pc, #164]	@ (8004ccc <TIM_OC3_SetConfig+0xec>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a25      	ldr	r2, [pc, #148]	@ (8004cd0 <TIM_OC3_SetConfig+0xf0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d10d      	bne.n	8004c5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	4a24      	ldr	r2, [pc, #144]	@ (8004cd4 <TIM_OC3_SetConfig+0xf4>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	4a20      	ldr	r2, [pc, #128]	@ (8004cd8 <TIM_OC3_SetConfig+0xf8>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd0 <TIM_OC3_SetConfig+0xf0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00b      	beq.n	8004c7a <TIM_OC3_SetConfig+0x9a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a1d      	ldr	r2, [pc, #116]	@ (8004cdc <TIM_OC3_SetConfig+0xfc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d007      	beq.n	8004c7a <TIM_OC3_SetConfig+0x9a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce0 <TIM_OC3_SetConfig+0x100>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d003      	beq.n	8004c7a <TIM_OC3_SetConfig+0x9a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ce4 <TIM_OC3_SetConfig+0x104>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d113      	bne.n	8004ca2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce8 <TIM_OC3_SetConfig+0x108>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4a19      	ldr	r2, [pc, #100]	@ (8004cec <TIM_OC3_SetConfig+0x10c>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	621a      	str	r2, [r3, #32]
}
 8004cbc:	46c0      	nop			@ (mov r8, r8)
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b006      	add	sp, #24
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	fffffeff 	.word	0xfffffeff
 8004cc8:	fffeff8f 	.word	0xfffeff8f
 8004ccc:	fffffdff 	.word	0xfffffdff
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	fffff7ff 	.word	0xfffff7ff
 8004cd8:	fffffbff 	.word	0xfffffbff
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800
 8004ce8:	ffffefff 	.word	0xffffefff
 8004cec:	ffffdfff 	.word	0xffffdfff

08004cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	4a26      	ldr	r2, [pc, #152]	@ (8004da0 <TIM_OC4_SetConfig+0xb0>)
 8004d06:	401a      	ands	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a22      	ldr	r2, [pc, #136]	@ (8004da4 <TIM_OC4_SetConfig+0xb4>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a21      	ldr	r2, [pc, #132]	@ (8004da8 <TIM_OC4_SetConfig+0xb8>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4a1d      	ldr	r2, [pc, #116]	@ (8004dac <TIM_OC4_SetConfig+0xbc>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	031b      	lsls	r3, r3, #12
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <TIM_OC4_SetConfig+0xc0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00b      	beq.n	8004d68 <TIM_OC4_SetConfig+0x78>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a18      	ldr	r2, [pc, #96]	@ (8004db4 <TIM_OC4_SetConfig+0xc4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d007      	beq.n	8004d68 <TIM_OC4_SetConfig+0x78>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a17      	ldr	r2, [pc, #92]	@ (8004db8 <TIM_OC4_SetConfig+0xc8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <TIM_OC4_SetConfig+0x78>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a16      	ldr	r2, [pc, #88]	@ (8004dbc <TIM_OC4_SetConfig+0xcc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d109      	bne.n	8004d7c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4a15      	ldr	r2, [pc, #84]	@ (8004dc0 <TIM_OC4_SetConfig+0xd0>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	019b      	lsls	r3, r3, #6
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b006      	add	sp, #24
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	ffffefff 	.word	0xffffefff
 8004da4:	feff8fff 	.word	0xfeff8fff
 8004da8:	fffffcff 	.word	0xfffffcff
 8004dac:	ffffdfff 	.word	0xffffdfff
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800
 8004dc0:	ffffbfff 	.word	0xffffbfff

08004dc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	4a23      	ldr	r2, [pc, #140]	@ (8004e68 <TIM_OC5_SetConfig+0xa4>)
 8004dda:	401a      	ands	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4a1f      	ldr	r2, [pc, #124]	@ (8004e6c <TIM_OC5_SetConfig+0xa8>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4a1b      	ldr	r2, [pc, #108]	@ (8004e70 <TIM_OC5_SetConfig+0xac>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a17      	ldr	r2, [pc, #92]	@ (8004e74 <TIM_OC5_SetConfig+0xb0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_OC5_SetConfig+0x6e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a16      	ldr	r2, [pc, #88]	@ (8004e78 <TIM_OC5_SetConfig+0xb4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <TIM_OC5_SetConfig+0x6e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a15      	ldr	r2, [pc, #84]	@ (8004e7c <TIM_OC5_SetConfig+0xb8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_OC5_SetConfig+0x6e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a14      	ldr	r2, [pc, #80]	@ (8004e80 <TIM_OC5_SetConfig+0xbc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d109      	bne.n	8004e46 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	4a0c      	ldr	r2, [pc, #48]	@ (8004e68 <TIM_OC5_SetConfig+0xa4>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	621a      	str	r2, [r3, #32]
}
 8004e60:	46c0      	nop			@ (mov r8, r8)
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b006      	add	sp, #24
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	fffeffff 	.word	0xfffeffff
 8004e6c:	fffeff8f 	.word	0xfffeff8f
 8004e70:	fffdffff 	.word	0xfffdffff
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	4a24      	ldr	r2, [pc, #144]	@ (8004f2c <TIM_OC6_SetConfig+0xa8>)
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4a20      	ldr	r2, [pc, #128]	@ (8004f30 <TIM_OC6_SetConfig+0xac>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f34 <TIM_OC6_SetConfig+0xb0>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	051b      	lsls	r3, r3, #20
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a18      	ldr	r2, [pc, #96]	@ (8004f38 <TIM_OC6_SetConfig+0xb4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <TIM_OC6_SetConfig+0x70>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a17      	ldr	r2, [pc, #92]	@ (8004f3c <TIM_OC6_SetConfig+0xb8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_OC6_SetConfig+0x70>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a16      	ldr	r2, [pc, #88]	@ (8004f40 <TIM_OC6_SetConfig+0xbc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_OC6_SetConfig+0x70>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a15      	ldr	r2, [pc, #84]	@ (8004f44 <TIM_OC6_SetConfig+0xc0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d109      	bne.n	8004f08 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4a14      	ldr	r2, [pc, #80]	@ (8004f48 <TIM_OC6_SetConfig+0xc4>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	029b      	lsls	r3, r3, #10
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	46bd      	mov	sp, r7
 8004f26:	b006      	add	sp, #24
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	46c0      	nop			@ (mov r8, r8)
 8004f2c:	ffefffff 	.word	0xffefffff
 8004f30:	feff8fff 	.word	0xfeff8fff
 8004f34:	ffdfffff 	.word	0xffdfffff
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800
 8004f48:	fffbffff 	.word	0xfffbffff

08004f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	221f      	movs	r2, #31
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2201      	movs	r2, #1
 8004f60:	409a      	lsls	r2, r3
 8004f62:	0013      	movs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	43d2      	mvns	r2, r2
 8004f6e:	401a      	ands	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1a      	ldr	r2, [r3, #32]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	211f      	movs	r1, #31
 8004f7c:	400b      	ands	r3, r1
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	4099      	lsls	r1, r3
 8004f82:	000b      	movs	r3, r1
 8004f84:	431a      	orrs	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	46c0      	nop			@ (mov r8, r8)
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b006      	add	sp, #24
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <__cvt>:
 8004f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f94:	001f      	movs	r7, r3
 8004f96:	2300      	movs	r3, #0
 8004f98:	0016      	movs	r6, r2
 8004f9a:	b08b      	sub	sp, #44	@ 0x2c
 8004f9c:	429f      	cmp	r7, r3
 8004f9e:	da04      	bge.n	8004faa <__cvt+0x18>
 8004fa0:	2180      	movs	r1, #128	@ 0x80
 8004fa2:	0609      	lsls	r1, r1, #24
 8004fa4:	187b      	adds	r3, r7, r1
 8004fa6:	001f      	movs	r7, r3
 8004fa8:	232d      	movs	r3, #45	@ 0x2d
 8004faa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004fac:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8004fae:	7013      	strb	r3, [r2, #0]
 8004fb0:	2320      	movs	r3, #32
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	439d      	bics	r5, r3
 8004fb6:	2d46      	cmp	r5, #70	@ 0x46
 8004fb8:	d007      	beq.n	8004fca <__cvt+0x38>
 8004fba:	002b      	movs	r3, r5
 8004fbc:	3b45      	subs	r3, #69	@ 0x45
 8004fbe:	4259      	negs	r1, r3
 8004fc0:	414b      	adcs	r3, r1
 8004fc2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004fc4:	3a01      	subs	r2, #1
 8004fc6:	18cb      	adds	r3, r1, r3
 8004fc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8004fca:	ab09      	add	r3, sp, #36	@ 0x24
 8004fcc:	9304      	str	r3, [sp, #16]
 8004fce:	ab08      	add	r3, sp, #32
 8004fd0:	9303      	str	r3, [sp, #12]
 8004fd2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004fd4:	9200      	str	r2, [sp, #0]
 8004fd6:	9302      	str	r3, [sp, #8]
 8004fd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004fda:	0032      	movs	r2, r6
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	003b      	movs	r3, r7
 8004fe0:	f000 febe 	bl	8005d60 <_dtoa_r>
 8004fe4:	0004      	movs	r4, r0
 8004fe6:	2d47      	cmp	r5, #71	@ 0x47
 8004fe8:	d11b      	bne.n	8005022 <__cvt+0x90>
 8004fea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004fec:	07db      	lsls	r3, r3, #31
 8004fee:	d511      	bpl.n	8005014 <__cvt+0x82>
 8004ff0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004ff2:	18c3      	adds	r3, r0, r3
 8004ff4:	9307      	str	r3, [sp, #28]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	0030      	movs	r0, r6
 8004ffc:	0039      	movs	r1, r7
 8004ffe:	f7fb fa21 	bl	8000444 <__aeabi_dcmpeq>
 8005002:	2800      	cmp	r0, #0
 8005004:	d001      	beq.n	800500a <__cvt+0x78>
 8005006:	9b07      	ldr	r3, [sp, #28]
 8005008:	9309      	str	r3, [sp, #36]	@ 0x24
 800500a:	2230      	movs	r2, #48	@ 0x30
 800500c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800500e:	9907      	ldr	r1, [sp, #28]
 8005010:	428b      	cmp	r3, r1
 8005012:	d320      	bcc.n	8005056 <__cvt+0xc4>
 8005014:	0020      	movs	r0, r4
 8005016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005018:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800501a:	1b1b      	subs	r3, r3, r4
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	b00b      	add	sp, #44	@ 0x2c
 8005020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005022:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005024:	18c3      	adds	r3, r0, r3
 8005026:	9307      	str	r3, [sp, #28]
 8005028:	2d46      	cmp	r5, #70	@ 0x46
 800502a:	d1e4      	bne.n	8004ff6 <__cvt+0x64>
 800502c:	7803      	ldrb	r3, [r0, #0]
 800502e:	2b30      	cmp	r3, #48	@ 0x30
 8005030:	d10c      	bne.n	800504c <__cvt+0xba>
 8005032:	2200      	movs	r2, #0
 8005034:	2300      	movs	r3, #0
 8005036:	0030      	movs	r0, r6
 8005038:	0039      	movs	r1, r7
 800503a:	f7fb fa03 	bl	8000444 <__aeabi_dcmpeq>
 800503e:	2800      	cmp	r0, #0
 8005040:	d104      	bne.n	800504c <__cvt+0xba>
 8005042:	2301      	movs	r3, #1
 8005044:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800504e:	9a07      	ldr	r2, [sp, #28]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	18d3      	adds	r3, r2, r3
 8005054:	e7ce      	b.n	8004ff4 <__cvt+0x62>
 8005056:	1c59      	adds	r1, r3, #1
 8005058:	9109      	str	r1, [sp, #36]	@ 0x24
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	e7d6      	b.n	800500c <__cvt+0x7a>

0800505e <__exponent>:
 800505e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005060:	232b      	movs	r3, #43	@ 0x2b
 8005062:	0005      	movs	r5, r0
 8005064:	000c      	movs	r4, r1
 8005066:	b085      	sub	sp, #20
 8005068:	7002      	strb	r2, [r0, #0]
 800506a:	2900      	cmp	r1, #0
 800506c:	da01      	bge.n	8005072 <__exponent+0x14>
 800506e:	424c      	negs	r4, r1
 8005070:	3302      	adds	r3, #2
 8005072:	706b      	strb	r3, [r5, #1]
 8005074:	2c09      	cmp	r4, #9
 8005076:	dd2c      	ble.n	80050d2 <__exponent+0x74>
 8005078:	ab02      	add	r3, sp, #8
 800507a:	1dde      	adds	r6, r3, #7
 800507c:	0020      	movs	r0, r4
 800507e:	210a      	movs	r1, #10
 8005080:	f7fb f9ca 	bl	8000418 <__aeabi_idivmod>
 8005084:	0037      	movs	r7, r6
 8005086:	3130      	adds	r1, #48	@ 0x30
 8005088:	3e01      	subs	r6, #1
 800508a:	0020      	movs	r0, r4
 800508c:	7031      	strb	r1, [r6, #0]
 800508e:	210a      	movs	r1, #10
 8005090:	9401      	str	r4, [sp, #4]
 8005092:	f7fb f8db 	bl	800024c <__divsi3>
 8005096:	9b01      	ldr	r3, [sp, #4]
 8005098:	0004      	movs	r4, r0
 800509a:	2b63      	cmp	r3, #99	@ 0x63
 800509c:	dcee      	bgt.n	800507c <__exponent+0x1e>
 800509e:	1eba      	subs	r2, r7, #2
 80050a0:	1ca8      	adds	r0, r5, #2
 80050a2:	0001      	movs	r1, r0
 80050a4:	0013      	movs	r3, r2
 80050a6:	3430      	adds	r4, #48	@ 0x30
 80050a8:	7014      	strb	r4, [r2, #0]
 80050aa:	ac02      	add	r4, sp, #8
 80050ac:	3407      	adds	r4, #7
 80050ae:	429c      	cmp	r4, r3
 80050b0:	d80a      	bhi.n	80050c8 <__exponent+0x6a>
 80050b2:	2300      	movs	r3, #0
 80050b4:	42a2      	cmp	r2, r4
 80050b6:	d803      	bhi.n	80050c0 <__exponent+0x62>
 80050b8:	3309      	adds	r3, #9
 80050ba:	aa02      	add	r2, sp, #8
 80050bc:	189b      	adds	r3, r3, r2
 80050be:	1bdb      	subs	r3, r3, r7
 80050c0:	18c0      	adds	r0, r0, r3
 80050c2:	1b40      	subs	r0, r0, r5
 80050c4:	b005      	add	sp, #20
 80050c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c8:	781c      	ldrb	r4, [r3, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	700c      	strb	r4, [r1, #0]
 80050ce:	3101      	adds	r1, #1
 80050d0:	e7eb      	b.n	80050aa <__exponent+0x4c>
 80050d2:	2330      	movs	r3, #48	@ 0x30
 80050d4:	18e4      	adds	r4, r4, r3
 80050d6:	70ab      	strb	r3, [r5, #2]
 80050d8:	1d28      	adds	r0, r5, #4
 80050da:	70ec      	strb	r4, [r5, #3]
 80050dc:	e7f1      	b.n	80050c2 <__exponent+0x64>
	...

080050e0 <_printf_float>:
 80050e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e2:	b097      	sub	sp, #92	@ 0x5c
 80050e4:	000d      	movs	r5, r1
 80050e6:	920a      	str	r2, [sp, #40]	@ 0x28
 80050e8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80050ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80050ee:	f000 fd1f 	bl	8005b30 <_localeconv_r>
 80050f2:	6803      	ldr	r3, [r0, #0]
 80050f4:	0018      	movs	r0, r3
 80050f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80050f8:	f7fb f802 	bl	8000100 <strlen>
 80050fc:	2300      	movs	r3, #0
 80050fe:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005100:	9314      	str	r3, [sp, #80]	@ 0x50
 8005102:	7e2b      	ldrb	r3, [r5, #24]
 8005104:	2207      	movs	r2, #7
 8005106:	930c      	str	r3, [sp, #48]	@ 0x30
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	930e      	str	r3, [sp, #56]	@ 0x38
 800510c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	05c9      	lsls	r1, r1, #23
 8005112:	d545      	bpl.n	80051a0 <_printf_float+0xc0>
 8005114:	189b      	adds	r3, r3, r2
 8005116:	4393      	bics	r3, r2
 8005118:	001a      	movs	r2, r3
 800511a:	3208      	adds	r2, #8
 800511c:	6022      	str	r2, [r4, #0]
 800511e:	2201      	movs	r2, #1
 8005120:	681e      	ldr	r6, [r3, #0]
 8005122:	685f      	ldr	r7, [r3, #4]
 8005124:	007b      	lsls	r3, r7, #1
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	9311      	str	r3, [sp, #68]	@ 0x44
 800512a:	9610      	str	r6, [sp, #64]	@ 0x40
 800512c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800512e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005130:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005132:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005134:	4ba7      	ldr	r3, [pc, #668]	@ (80053d4 <_printf_float+0x2f4>)
 8005136:	4252      	negs	r2, r2
 8005138:	f7fd f8be 	bl	80022b8 <__aeabi_dcmpun>
 800513c:	2800      	cmp	r0, #0
 800513e:	d131      	bne.n	80051a4 <_printf_float+0xc4>
 8005140:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005142:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005144:	2201      	movs	r2, #1
 8005146:	4ba3      	ldr	r3, [pc, #652]	@ (80053d4 <_printf_float+0x2f4>)
 8005148:	4252      	negs	r2, r2
 800514a:	f7fb f98b 	bl	8000464 <__aeabi_dcmple>
 800514e:	2800      	cmp	r0, #0
 8005150:	d128      	bne.n	80051a4 <_printf_float+0xc4>
 8005152:	2200      	movs	r2, #0
 8005154:	2300      	movs	r3, #0
 8005156:	0030      	movs	r0, r6
 8005158:	0039      	movs	r1, r7
 800515a:	f7fb f979 	bl	8000450 <__aeabi_dcmplt>
 800515e:	2800      	cmp	r0, #0
 8005160:	d003      	beq.n	800516a <_printf_float+0x8a>
 8005162:	002b      	movs	r3, r5
 8005164:	222d      	movs	r2, #45	@ 0x2d
 8005166:	3343      	adds	r3, #67	@ 0x43
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800516c:	4f9a      	ldr	r7, [pc, #616]	@ (80053d8 <_printf_float+0x2f8>)
 800516e:	2b47      	cmp	r3, #71	@ 0x47
 8005170:	d900      	bls.n	8005174 <_printf_float+0x94>
 8005172:	4f9a      	ldr	r7, [pc, #616]	@ (80053dc <_printf_float+0x2fc>)
 8005174:	2303      	movs	r3, #3
 8005176:	2400      	movs	r4, #0
 8005178:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800517a:	612b      	str	r3, [r5, #16]
 800517c:	3301      	adds	r3, #1
 800517e:	439a      	bics	r2, r3
 8005180:	602a      	str	r2, [r5, #0]
 8005182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005184:	0029      	movs	r1, r5
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800518a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800518c:	aa15      	add	r2, sp, #84	@ 0x54
 800518e:	f000 f9e5 	bl	800555c <_printf_common>
 8005192:	3001      	adds	r0, #1
 8005194:	d000      	beq.n	8005198 <_printf_float+0xb8>
 8005196:	e09f      	b.n	80052d8 <_printf_float+0x1f8>
 8005198:	2001      	movs	r0, #1
 800519a:	4240      	negs	r0, r0
 800519c:	b017      	add	sp, #92	@ 0x5c
 800519e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051a0:	3307      	adds	r3, #7
 80051a2:	e7b8      	b.n	8005116 <_printf_float+0x36>
 80051a4:	0032      	movs	r2, r6
 80051a6:	003b      	movs	r3, r7
 80051a8:	0030      	movs	r0, r6
 80051aa:	0039      	movs	r1, r7
 80051ac:	f7fd f884 	bl	80022b8 <__aeabi_dcmpun>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d00b      	beq.n	80051cc <_printf_float+0xec>
 80051b4:	2f00      	cmp	r7, #0
 80051b6:	da03      	bge.n	80051c0 <_printf_float+0xe0>
 80051b8:	002b      	movs	r3, r5
 80051ba:	222d      	movs	r2, #45	@ 0x2d
 80051bc:	3343      	adds	r3, #67	@ 0x43
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80051c2:	4f87      	ldr	r7, [pc, #540]	@ (80053e0 <_printf_float+0x300>)
 80051c4:	2b47      	cmp	r3, #71	@ 0x47
 80051c6:	d9d5      	bls.n	8005174 <_printf_float+0x94>
 80051c8:	4f86      	ldr	r7, [pc, #536]	@ (80053e4 <_printf_float+0x304>)
 80051ca:	e7d3      	b.n	8005174 <_printf_float+0x94>
 80051cc:	2220      	movs	r2, #32
 80051ce:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80051d0:	686b      	ldr	r3, [r5, #4]
 80051d2:	4394      	bics	r4, r2
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	d146      	bne.n	8005266 <_printf_float+0x186>
 80051d8:	3307      	adds	r3, #7
 80051da:	606b      	str	r3, [r5, #4]
 80051dc:	2380      	movs	r3, #128	@ 0x80
 80051de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4313      	orrs	r3, r2
 80051e4:	2200      	movs	r2, #0
 80051e6:	602b      	str	r3, [r5, #0]
 80051e8:	9206      	str	r2, [sp, #24]
 80051ea:	aa14      	add	r2, sp, #80	@ 0x50
 80051ec:	9205      	str	r2, [sp, #20]
 80051ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051f0:	a90a      	add	r1, sp, #40	@ 0x28
 80051f2:	9204      	str	r2, [sp, #16]
 80051f4:	aa13      	add	r2, sp, #76	@ 0x4c
 80051f6:	9203      	str	r2, [sp, #12]
 80051f8:	2223      	movs	r2, #35	@ 0x23
 80051fa:	1852      	adds	r2, r2, r1
 80051fc:	9202      	str	r2, [sp, #8]
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	686b      	ldr	r3, [r5, #4]
 8005202:	0032      	movs	r2, r6
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005208:	003b      	movs	r3, r7
 800520a:	f7ff fec2 	bl	8004f92 <__cvt>
 800520e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005210:	0007      	movs	r7, r0
 8005212:	2c47      	cmp	r4, #71	@ 0x47
 8005214:	d12d      	bne.n	8005272 <_printf_float+0x192>
 8005216:	1cd3      	adds	r3, r2, #3
 8005218:	db02      	blt.n	8005220 <_printf_float+0x140>
 800521a:	686b      	ldr	r3, [r5, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	dd48      	ble.n	80052b2 <_printf_float+0x1d2>
 8005220:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005222:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005224:	3b02      	subs	r3, #2
 8005226:	b2db      	uxtb	r3, r3
 8005228:	930c      	str	r3, [sp, #48]	@ 0x30
 800522a:	0028      	movs	r0, r5
 800522c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800522e:	3901      	subs	r1, #1
 8005230:	3050      	adds	r0, #80	@ 0x50
 8005232:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005234:	f7ff ff13 	bl	800505e <__exponent>
 8005238:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800523a:	0004      	movs	r4, r0
 800523c:	1813      	adds	r3, r2, r0
 800523e:	612b      	str	r3, [r5, #16]
 8005240:	2a01      	cmp	r2, #1
 8005242:	dc02      	bgt.n	800524a <_printf_float+0x16a>
 8005244:	682a      	ldr	r2, [r5, #0]
 8005246:	07d2      	lsls	r2, r2, #31
 8005248:	d501      	bpl.n	800524e <_printf_float+0x16e>
 800524a:	3301      	adds	r3, #1
 800524c:	612b      	str	r3, [r5, #16]
 800524e:	2323      	movs	r3, #35	@ 0x23
 8005250:	aa0a      	add	r2, sp, #40	@ 0x28
 8005252:	189b      	adds	r3, r3, r2
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d100      	bne.n	800525c <_printf_float+0x17c>
 800525a:	e792      	b.n	8005182 <_printf_float+0xa2>
 800525c:	002b      	movs	r3, r5
 800525e:	222d      	movs	r2, #45	@ 0x2d
 8005260:	3343      	adds	r3, #67	@ 0x43
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	e78d      	b.n	8005182 <_printf_float+0xa2>
 8005266:	2c47      	cmp	r4, #71	@ 0x47
 8005268:	d1b8      	bne.n	80051dc <_printf_float+0xfc>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1b6      	bne.n	80051dc <_printf_float+0xfc>
 800526e:	3301      	adds	r3, #1
 8005270:	e7b3      	b.n	80051da <_printf_float+0xfa>
 8005272:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005274:	0011      	movs	r1, r2
 8005276:	2b65      	cmp	r3, #101	@ 0x65
 8005278:	d9d7      	bls.n	800522a <_printf_float+0x14a>
 800527a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800527c:	2b66      	cmp	r3, #102	@ 0x66
 800527e:	d11a      	bne.n	80052b6 <_printf_float+0x1d6>
 8005280:	686b      	ldr	r3, [r5, #4]
 8005282:	2a00      	cmp	r2, #0
 8005284:	dd09      	ble.n	800529a <_printf_float+0x1ba>
 8005286:	612a      	str	r2, [r5, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <_printf_float+0x1b2>
 800528c:	6829      	ldr	r1, [r5, #0]
 800528e:	07c9      	lsls	r1, r1, #31
 8005290:	d50b      	bpl.n	80052aa <_printf_float+0x1ca>
 8005292:	3301      	adds	r3, #1
 8005294:	189b      	adds	r3, r3, r2
 8005296:	612b      	str	r3, [r5, #16]
 8005298:	e007      	b.n	80052aa <_printf_float+0x1ca>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d103      	bne.n	80052a6 <_printf_float+0x1c6>
 800529e:	2201      	movs	r2, #1
 80052a0:	6829      	ldr	r1, [r5, #0]
 80052a2:	4211      	tst	r1, r2
 80052a4:	d000      	beq.n	80052a8 <_printf_float+0x1c8>
 80052a6:	1c9a      	adds	r2, r3, #2
 80052a8:	612a      	str	r2, [r5, #16]
 80052aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80052ac:	2400      	movs	r4, #0
 80052ae:	65ab      	str	r3, [r5, #88]	@ 0x58
 80052b0:	e7cd      	b.n	800524e <_printf_float+0x16e>
 80052b2:	2367      	movs	r3, #103	@ 0x67
 80052b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80052b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80052b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80052ba:	4299      	cmp	r1, r3
 80052bc:	db06      	blt.n	80052cc <_printf_float+0x1ec>
 80052be:	682b      	ldr	r3, [r5, #0]
 80052c0:	6129      	str	r1, [r5, #16]
 80052c2:	07db      	lsls	r3, r3, #31
 80052c4:	d5f1      	bpl.n	80052aa <_printf_float+0x1ca>
 80052c6:	3101      	adds	r1, #1
 80052c8:	6129      	str	r1, [r5, #16]
 80052ca:	e7ee      	b.n	80052aa <_printf_float+0x1ca>
 80052cc:	2201      	movs	r2, #1
 80052ce:	2900      	cmp	r1, #0
 80052d0:	dce0      	bgt.n	8005294 <_printf_float+0x1b4>
 80052d2:	1892      	adds	r2, r2, r2
 80052d4:	1a52      	subs	r2, r2, r1
 80052d6:	e7dd      	b.n	8005294 <_printf_float+0x1b4>
 80052d8:	682a      	ldr	r2, [r5, #0]
 80052da:	0553      	lsls	r3, r2, #21
 80052dc:	d408      	bmi.n	80052f0 <_printf_float+0x210>
 80052de:	692b      	ldr	r3, [r5, #16]
 80052e0:	003a      	movs	r2, r7
 80052e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80052e8:	47a0      	blx	r4
 80052ea:	3001      	adds	r0, #1
 80052ec:	d129      	bne.n	8005342 <_printf_float+0x262>
 80052ee:	e753      	b.n	8005198 <_printf_float+0xb8>
 80052f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052f2:	2b65      	cmp	r3, #101	@ 0x65
 80052f4:	d800      	bhi.n	80052f8 <_printf_float+0x218>
 80052f6:	e0da      	b.n	80054ae <_printf_float+0x3ce>
 80052f8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80052fa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80052fc:	2200      	movs	r2, #0
 80052fe:	2300      	movs	r3, #0
 8005300:	f7fb f8a0 	bl	8000444 <__aeabi_dcmpeq>
 8005304:	2800      	cmp	r0, #0
 8005306:	d033      	beq.n	8005370 <_printf_float+0x290>
 8005308:	2301      	movs	r3, #1
 800530a:	4a37      	ldr	r2, [pc, #220]	@ (80053e8 <_printf_float+0x308>)
 800530c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800530e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005310:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005312:	47a0      	blx	r4
 8005314:	3001      	adds	r0, #1
 8005316:	d100      	bne.n	800531a <_printf_float+0x23a>
 8005318:	e73e      	b.n	8005198 <_printf_float+0xb8>
 800531a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800531c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800531e:	42b3      	cmp	r3, r6
 8005320:	db02      	blt.n	8005328 <_printf_float+0x248>
 8005322:	682b      	ldr	r3, [r5, #0]
 8005324:	07db      	lsls	r3, r3, #31
 8005326:	d50c      	bpl.n	8005342 <_printf_float+0x262>
 8005328:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800532a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800532c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800532e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005330:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005332:	47a0      	blx	r4
 8005334:	2400      	movs	r4, #0
 8005336:	3001      	adds	r0, #1
 8005338:	d100      	bne.n	800533c <_printf_float+0x25c>
 800533a:	e72d      	b.n	8005198 <_printf_float+0xb8>
 800533c:	1e73      	subs	r3, r6, #1
 800533e:	42a3      	cmp	r3, r4
 8005340:	dc0a      	bgt.n	8005358 <_printf_float+0x278>
 8005342:	682b      	ldr	r3, [r5, #0]
 8005344:	079b      	lsls	r3, r3, #30
 8005346:	d500      	bpl.n	800534a <_printf_float+0x26a>
 8005348:	e105      	b.n	8005556 <_printf_float+0x476>
 800534a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800534c:	68e8      	ldr	r0, [r5, #12]
 800534e:	4298      	cmp	r0, r3
 8005350:	db00      	blt.n	8005354 <_printf_float+0x274>
 8005352:	e723      	b.n	800519c <_printf_float+0xbc>
 8005354:	0018      	movs	r0, r3
 8005356:	e721      	b.n	800519c <_printf_float+0xbc>
 8005358:	002a      	movs	r2, r5
 800535a:	2301      	movs	r3, #1
 800535c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800535e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005360:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005362:	321a      	adds	r2, #26
 8005364:	47b8      	blx	r7
 8005366:	3001      	adds	r0, #1
 8005368:	d100      	bne.n	800536c <_printf_float+0x28c>
 800536a:	e715      	b.n	8005198 <_printf_float+0xb8>
 800536c:	3401      	adds	r4, #1
 800536e:	e7e5      	b.n	800533c <_printf_float+0x25c>
 8005370:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005372:	2b00      	cmp	r3, #0
 8005374:	dc3a      	bgt.n	80053ec <_printf_float+0x30c>
 8005376:	2301      	movs	r3, #1
 8005378:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <_printf_float+0x308>)
 800537a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800537c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800537e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005380:	47a0      	blx	r4
 8005382:	3001      	adds	r0, #1
 8005384:	d100      	bne.n	8005388 <_printf_float+0x2a8>
 8005386:	e707      	b.n	8005198 <_printf_float+0xb8>
 8005388:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800538a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800538c:	4333      	orrs	r3, r6
 800538e:	d102      	bne.n	8005396 <_printf_float+0x2b6>
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	07db      	lsls	r3, r3, #31
 8005394:	d5d5      	bpl.n	8005342 <_printf_float+0x262>
 8005396:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005398:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800539a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800539c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800539e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80053a0:	47a0      	blx	r4
 80053a2:	2300      	movs	r3, #0
 80053a4:	3001      	adds	r0, #1
 80053a6:	d100      	bne.n	80053aa <_printf_float+0x2ca>
 80053a8:	e6f6      	b.n	8005198 <_printf_float+0xb8>
 80053aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80053ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80053ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80053b0:	425b      	negs	r3, r3
 80053b2:	4293      	cmp	r3, r2
 80053b4:	dc01      	bgt.n	80053ba <_printf_float+0x2da>
 80053b6:	0033      	movs	r3, r6
 80053b8:	e792      	b.n	80052e0 <_printf_float+0x200>
 80053ba:	002a      	movs	r2, r5
 80053bc:	2301      	movs	r3, #1
 80053be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80053c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053c2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80053c4:	321a      	adds	r2, #26
 80053c6:	47a0      	blx	r4
 80053c8:	3001      	adds	r0, #1
 80053ca:	d100      	bne.n	80053ce <_printf_float+0x2ee>
 80053cc:	e6e4      	b.n	8005198 <_printf_float+0xb8>
 80053ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80053d0:	3301      	adds	r3, #1
 80053d2:	e7ea      	b.n	80053aa <_printf_float+0x2ca>
 80053d4:	7fefffff 	.word	0x7fefffff
 80053d8:	08007f18 	.word	0x08007f18
 80053dc:	08007f1c 	.word	0x08007f1c
 80053e0:	08007f20 	.word	0x08007f20
 80053e4:	08007f24 	.word	0x08007f24
 80053e8:	08007f28 	.word	0x08007f28
 80053ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80053ee:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80053f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80053f2:	429e      	cmp	r6, r3
 80053f4:	dd00      	ble.n	80053f8 <_printf_float+0x318>
 80053f6:	001e      	movs	r6, r3
 80053f8:	2e00      	cmp	r6, #0
 80053fa:	dc31      	bgt.n	8005460 <_printf_float+0x380>
 80053fc:	43f3      	mvns	r3, r6
 80053fe:	2400      	movs	r4, #0
 8005400:	17db      	asrs	r3, r3, #31
 8005402:	4033      	ands	r3, r6
 8005404:	930e      	str	r3, [sp, #56]	@ 0x38
 8005406:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800540a:	1af3      	subs	r3, r6, r3
 800540c:	42a3      	cmp	r3, r4
 800540e:	dc30      	bgt.n	8005472 <_printf_float+0x392>
 8005410:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005412:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005414:	429a      	cmp	r2, r3
 8005416:	dc38      	bgt.n	800548a <_printf_float+0x3aa>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	07db      	lsls	r3, r3, #31
 800541c:	d435      	bmi.n	800548a <_printf_float+0x3aa>
 800541e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8005420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005422:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005424:	1b9b      	subs	r3, r3, r6
 8005426:	1b14      	subs	r4, r2, r4
 8005428:	429c      	cmp	r4, r3
 800542a:	dd00      	ble.n	800542e <_printf_float+0x34e>
 800542c:	001c      	movs	r4, r3
 800542e:	2c00      	cmp	r4, #0
 8005430:	dc34      	bgt.n	800549c <_printf_float+0x3bc>
 8005432:	43e3      	mvns	r3, r4
 8005434:	2600      	movs	r6, #0
 8005436:	17db      	asrs	r3, r3, #31
 8005438:	401c      	ands	r4, r3
 800543a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800543c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	1b1b      	subs	r3, r3, r4
 8005442:	42b3      	cmp	r3, r6
 8005444:	dc00      	bgt.n	8005448 <_printf_float+0x368>
 8005446:	e77c      	b.n	8005342 <_printf_float+0x262>
 8005448:	002a      	movs	r2, r5
 800544a:	2301      	movs	r3, #1
 800544c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800544e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005450:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005452:	321a      	adds	r2, #26
 8005454:	47b8      	blx	r7
 8005456:	3001      	adds	r0, #1
 8005458:	d100      	bne.n	800545c <_printf_float+0x37c>
 800545a:	e69d      	b.n	8005198 <_printf_float+0xb8>
 800545c:	3601      	adds	r6, #1
 800545e:	e7ec      	b.n	800543a <_printf_float+0x35a>
 8005460:	0033      	movs	r3, r6
 8005462:	003a      	movs	r2, r7
 8005464:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005468:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800546a:	47a0      	blx	r4
 800546c:	3001      	adds	r0, #1
 800546e:	d1c5      	bne.n	80053fc <_printf_float+0x31c>
 8005470:	e692      	b.n	8005198 <_printf_float+0xb8>
 8005472:	002a      	movs	r2, r5
 8005474:	2301      	movs	r3, #1
 8005476:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005478:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800547a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800547c:	321a      	adds	r2, #26
 800547e:	47b0      	blx	r6
 8005480:	3001      	adds	r0, #1
 8005482:	d100      	bne.n	8005486 <_printf_float+0x3a6>
 8005484:	e688      	b.n	8005198 <_printf_float+0xb8>
 8005486:	3401      	adds	r4, #1
 8005488:	e7bd      	b.n	8005406 <_printf_float+0x326>
 800548a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800548c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800548e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005490:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005492:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005494:	47a0      	blx	r4
 8005496:	3001      	adds	r0, #1
 8005498:	d1c1      	bne.n	800541e <_printf_float+0x33e>
 800549a:	e67d      	b.n	8005198 <_printf_float+0xb8>
 800549c:	19ba      	adds	r2, r7, r6
 800549e:	0023      	movs	r3, r4
 80054a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80054a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054a4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80054a6:	47b0      	blx	r6
 80054a8:	3001      	adds	r0, #1
 80054aa:	d1c2      	bne.n	8005432 <_printf_float+0x352>
 80054ac:	e674      	b.n	8005198 <_printf_float+0xb8>
 80054ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	dc02      	bgt.n	80054bc <_printf_float+0x3dc>
 80054b6:	2301      	movs	r3, #1
 80054b8:	421a      	tst	r2, r3
 80054ba:	d039      	beq.n	8005530 <_printf_float+0x450>
 80054bc:	2301      	movs	r3, #1
 80054be:	003a      	movs	r2, r7
 80054c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80054c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054c4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80054c6:	47b0      	blx	r6
 80054c8:	3001      	adds	r0, #1
 80054ca:	d100      	bne.n	80054ce <_printf_float+0x3ee>
 80054cc:	e664      	b.n	8005198 <_printf_float+0xb8>
 80054ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80054d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80054d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054d6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80054d8:	47b0      	blx	r6
 80054da:	3001      	adds	r0, #1
 80054dc:	d100      	bne.n	80054e0 <_printf_float+0x400>
 80054de:	e65b      	b.n	8005198 <_printf_float+0xb8>
 80054e0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80054e2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80054e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054e6:	2200      	movs	r2, #0
 80054e8:	3b01      	subs	r3, #1
 80054ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80054ec:	2300      	movs	r3, #0
 80054ee:	f7fa ffa9 	bl	8000444 <__aeabi_dcmpeq>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d11a      	bne.n	800552c <_printf_float+0x44c>
 80054f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054f8:	1c7a      	adds	r2, r7, #1
 80054fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80054fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054fe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005500:	47b0      	blx	r6
 8005502:	3001      	adds	r0, #1
 8005504:	d10e      	bne.n	8005524 <_printf_float+0x444>
 8005506:	e647      	b.n	8005198 <_printf_float+0xb8>
 8005508:	002a      	movs	r2, r5
 800550a:	2301      	movs	r3, #1
 800550c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800550e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005510:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005512:	321a      	adds	r2, #26
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	d100      	bne.n	800551c <_printf_float+0x43c>
 800551a:	e63d      	b.n	8005198 <_printf_float+0xb8>
 800551c:	3601      	adds	r6, #1
 800551e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005520:	429e      	cmp	r6, r3
 8005522:	dbf1      	blt.n	8005508 <_printf_float+0x428>
 8005524:	002a      	movs	r2, r5
 8005526:	0023      	movs	r3, r4
 8005528:	3250      	adds	r2, #80	@ 0x50
 800552a:	e6da      	b.n	80052e2 <_printf_float+0x202>
 800552c:	2600      	movs	r6, #0
 800552e:	e7f6      	b.n	800551e <_printf_float+0x43e>
 8005530:	003a      	movs	r2, r7
 8005532:	e7e2      	b.n	80054fa <_printf_float+0x41a>
 8005534:	002a      	movs	r2, r5
 8005536:	2301      	movs	r3, #1
 8005538:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800553a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800553c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800553e:	3219      	adds	r2, #25
 8005540:	47b0      	blx	r6
 8005542:	3001      	adds	r0, #1
 8005544:	d100      	bne.n	8005548 <_printf_float+0x468>
 8005546:	e627      	b.n	8005198 <_printf_float+0xb8>
 8005548:	3401      	adds	r4, #1
 800554a:	68eb      	ldr	r3, [r5, #12]
 800554c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	42a3      	cmp	r3, r4
 8005552:	dcef      	bgt.n	8005534 <_printf_float+0x454>
 8005554:	e6f9      	b.n	800534a <_printf_float+0x26a>
 8005556:	2400      	movs	r4, #0
 8005558:	e7f7      	b.n	800554a <_printf_float+0x46a>
 800555a:	46c0      	nop			@ (mov r8, r8)

0800555c <_printf_common>:
 800555c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800555e:	0016      	movs	r6, r2
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	688a      	ldr	r2, [r1, #8]
 8005564:	690b      	ldr	r3, [r1, #16]
 8005566:	000c      	movs	r4, r1
 8005568:	9000      	str	r0, [sp, #0]
 800556a:	4293      	cmp	r3, r2
 800556c:	da00      	bge.n	8005570 <_printf_common+0x14>
 800556e:	0013      	movs	r3, r2
 8005570:	0022      	movs	r2, r4
 8005572:	6033      	str	r3, [r6, #0]
 8005574:	3243      	adds	r2, #67	@ 0x43
 8005576:	7812      	ldrb	r2, [r2, #0]
 8005578:	2a00      	cmp	r2, #0
 800557a:	d001      	beq.n	8005580 <_printf_common+0x24>
 800557c:	3301      	adds	r3, #1
 800557e:	6033      	str	r3, [r6, #0]
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	069b      	lsls	r3, r3, #26
 8005584:	d502      	bpl.n	800558c <_printf_common+0x30>
 8005586:	6833      	ldr	r3, [r6, #0]
 8005588:	3302      	adds	r3, #2
 800558a:	6033      	str	r3, [r6, #0]
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	2306      	movs	r3, #6
 8005590:	0015      	movs	r5, r2
 8005592:	401d      	ands	r5, r3
 8005594:	421a      	tst	r2, r3
 8005596:	d027      	beq.n	80055e8 <_printf_common+0x8c>
 8005598:	0023      	movs	r3, r4
 800559a:	3343      	adds	r3, #67	@ 0x43
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	1e5a      	subs	r2, r3, #1
 80055a0:	4193      	sbcs	r3, r2
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	0692      	lsls	r2, r2, #26
 80055a6:	d430      	bmi.n	800560a <_printf_common+0xae>
 80055a8:	0022      	movs	r2, r4
 80055aa:	9901      	ldr	r1, [sp, #4]
 80055ac:	9800      	ldr	r0, [sp, #0]
 80055ae:	9d08      	ldr	r5, [sp, #32]
 80055b0:	3243      	adds	r2, #67	@ 0x43
 80055b2:	47a8      	blx	r5
 80055b4:	3001      	adds	r0, #1
 80055b6:	d025      	beq.n	8005604 <_printf_common+0xa8>
 80055b8:	2206      	movs	r2, #6
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	2500      	movs	r5, #0
 80055be:	4013      	ands	r3, r2
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d105      	bne.n	80055d0 <_printf_common+0x74>
 80055c4:	6833      	ldr	r3, [r6, #0]
 80055c6:	68e5      	ldr	r5, [r4, #12]
 80055c8:	1aed      	subs	r5, r5, r3
 80055ca:	43eb      	mvns	r3, r5
 80055cc:	17db      	asrs	r3, r3, #31
 80055ce:	401d      	ands	r5, r3
 80055d0:	68a3      	ldr	r3, [r4, #8]
 80055d2:	6922      	ldr	r2, [r4, #16]
 80055d4:	4293      	cmp	r3, r2
 80055d6:	dd01      	ble.n	80055dc <_printf_common+0x80>
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	18ed      	adds	r5, r5, r3
 80055dc:	2600      	movs	r6, #0
 80055de:	42b5      	cmp	r5, r6
 80055e0:	d120      	bne.n	8005624 <_printf_common+0xc8>
 80055e2:	2000      	movs	r0, #0
 80055e4:	e010      	b.n	8005608 <_printf_common+0xac>
 80055e6:	3501      	adds	r5, #1
 80055e8:	68e3      	ldr	r3, [r4, #12]
 80055ea:	6832      	ldr	r2, [r6, #0]
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	42ab      	cmp	r3, r5
 80055f0:	ddd2      	ble.n	8005598 <_printf_common+0x3c>
 80055f2:	0022      	movs	r2, r4
 80055f4:	2301      	movs	r3, #1
 80055f6:	9901      	ldr	r1, [sp, #4]
 80055f8:	9800      	ldr	r0, [sp, #0]
 80055fa:	9f08      	ldr	r7, [sp, #32]
 80055fc:	3219      	adds	r2, #25
 80055fe:	47b8      	blx	r7
 8005600:	3001      	adds	r0, #1
 8005602:	d1f0      	bne.n	80055e6 <_printf_common+0x8a>
 8005604:	2001      	movs	r0, #1
 8005606:	4240      	negs	r0, r0
 8005608:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800560a:	2030      	movs	r0, #48	@ 0x30
 800560c:	18e1      	adds	r1, r4, r3
 800560e:	3143      	adds	r1, #67	@ 0x43
 8005610:	7008      	strb	r0, [r1, #0]
 8005612:	0021      	movs	r1, r4
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	3145      	adds	r1, #69	@ 0x45
 8005618:	7809      	ldrb	r1, [r1, #0]
 800561a:	18a2      	adds	r2, r4, r2
 800561c:	3243      	adds	r2, #67	@ 0x43
 800561e:	3302      	adds	r3, #2
 8005620:	7011      	strb	r1, [r2, #0]
 8005622:	e7c1      	b.n	80055a8 <_printf_common+0x4c>
 8005624:	0022      	movs	r2, r4
 8005626:	2301      	movs	r3, #1
 8005628:	9901      	ldr	r1, [sp, #4]
 800562a:	9800      	ldr	r0, [sp, #0]
 800562c:	9f08      	ldr	r7, [sp, #32]
 800562e:	321a      	adds	r2, #26
 8005630:	47b8      	blx	r7
 8005632:	3001      	adds	r0, #1
 8005634:	d0e6      	beq.n	8005604 <_printf_common+0xa8>
 8005636:	3601      	adds	r6, #1
 8005638:	e7d1      	b.n	80055de <_printf_common+0x82>
	...

0800563c <_printf_i>:
 800563c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800563e:	b08b      	sub	sp, #44	@ 0x2c
 8005640:	9206      	str	r2, [sp, #24]
 8005642:	000a      	movs	r2, r1
 8005644:	3243      	adds	r2, #67	@ 0x43
 8005646:	9307      	str	r3, [sp, #28]
 8005648:	9005      	str	r0, [sp, #20]
 800564a:	9203      	str	r2, [sp, #12]
 800564c:	7e0a      	ldrb	r2, [r1, #24]
 800564e:	000c      	movs	r4, r1
 8005650:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005652:	2a78      	cmp	r2, #120	@ 0x78
 8005654:	d809      	bhi.n	800566a <_printf_i+0x2e>
 8005656:	2a62      	cmp	r2, #98	@ 0x62
 8005658:	d80b      	bhi.n	8005672 <_printf_i+0x36>
 800565a:	2a00      	cmp	r2, #0
 800565c:	d100      	bne.n	8005660 <_printf_i+0x24>
 800565e:	e0bc      	b.n	80057da <_printf_i+0x19e>
 8005660:	497b      	ldr	r1, [pc, #492]	@ (8005850 <_printf_i+0x214>)
 8005662:	9104      	str	r1, [sp, #16]
 8005664:	2a58      	cmp	r2, #88	@ 0x58
 8005666:	d100      	bne.n	800566a <_printf_i+0x2e>
 8005668:	e090      	b.n	800578c <_printf_i+0x150>
 800566a:	0025      	movs	r5, r4
 800566c:	3542      	adds	r5, #66	@ 0x42
 800566e:	702a      	strb	r2, [r5, #0]
 8005670:	e022      	b.n	80056b8 <_printf_i+0x7c>
 8005672:	0010      	movs	r0, r2
 8005674:	3863      	subs	r0, #99	@ 0x63
 8005676:	2815      	cmp	r0, #21
 8005678:	d8f7      	bhi.n	800566a <_printf_i+0x2e>
 800567a:	f7fa fd53 	bl	8000124 <__gnu_thumb1_case_shi>
 800567e:	0016      	.short	0x0016
 8005680:	fff6001f 	.word	0xfff6001f
 8005684:	fff6fff6 	.word	0xfff6fff6
 8005688:	001ffff6 	.word	0x001ffff6
 800568c:	fff6fff6 	.word	0xfff6fff6
 8005690:	fff6fff6 	.word	0xfff6fff6
 8005694:	003600a1 	.word	0x003600a1
 8005698:	fff60080 	.word	0xfff60080
 800569c:	00b2fff6 	.word	0x00b2fff6
 80056a0:	0036fff6 	.word	0x0036fff6
 80056a4:	fff6fff6 	.word	0xfff6fff6
 80056a8:	0084      	.short	0x0084
 80056aa:	0025      	movs	r5, r4
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	3542      	adds	r5, #66	@ 0x42
 80056b0:	1d11      	adds	r1, r2, #4
 80056b2:	6019      	str	r1, [r3, #0]
 80056b4:	6813      	ldr	r3, [r2, #0]
 80056b6:	702b      	strb	r3, [r5, #0]
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0a0      	b.n	80057fe <_printf_i+0x1c2>
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	6809      	ldr	r1, [r1, #0]
 80056c0:	1d02      	adds	r2, r0, #4
 80056c2:	060d      	lsls	r5, r1, #24
 80056c4:	d50b      	bpl.n	80056de <_printf_i+0xa2>
 80056c6:	6806      	ldr	r6, [r0, #0]
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	2e00      	cmp	r6, #0
 80056cc:	da03      	bge.n	80056d6 <_printf_i+0x9a>
 80056ce:	232d      	movs	r3, #45	@ 0x2d
 80056d0:	9a03      	ldr	r2, [sp, #12]
 80056d2:	4276      	negs	r6, r6
 80056d4:	7013      	strb	r3, [r2, #0]
 80056d6:	4b5e      	ldr	r3, [pc, #376]	@ (8005850 <_printf_i+0x214>)
 80056d8:	270a      	movs	r7, #10
 80056da:	9304      	str	r3, [sp, #16]
 80056dc:	e018      	b.n	8005710 <_printf_i+0xd4>
 80056de:	6806      	ldr	r6, [r0, #0]
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	0649      	lsls	r1, r1, #25
 80056e4:	d5f1      	bpl.n	80056ca <_printf_i+0x8e>
 80056e6:	b236      	sxth	r6, r6
 80056e8:	e7ef      	b.n	80056ca <_printf_i+0x8e>
 80056ea:	6808      	ldr	r0, [r1, #0]
 80056ec:	6819      	ldr	r1, [r3, #0]
 80056ee:	c940      	ldmia	r1!, {r6}
 80056f0:	0605      	lsls	r5, r0, #24
 80056f2:	d402      	bmi.n	80056fa <_printf_i+0xbe>
 80056f4:	0640      	lsls	r0, r0, #25
 80056f6:	d500      	bpl.n	80056fa <_printf_i+0xbe>
 80056f8:	b2b6      	uxth	r6, r6
 80056fa:	6019      	str	r1, [r3, #0]
 80056fc:	4b54      	ldr	r3, [pc, #336]	@ (8005850 <_printf_i+0x214>)
 80056fe:	270a      	movs	r7, #10
 8005700:	9304      	str	r3, [sp, #16]
 8005702:	2a6f      	cmp	r2, #111	@ 0x6f
 8005704:	d100      	bne.n	8005708 <_printf_i+0xcc>
 8005706:	3f02      	subs	r7, #2
 8005708:	0023      	movs	r3, r4
 800570a:	2200      	movs	r2, #0
 800570c:	3343      	adds	r3, #67	@ 0x43
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	6863      	ldr	r3, [r4, #4]
 8005712:	60a3      	str	r3, [r4, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	db03      	blt.n	8005720 <_printf_i+0xe4>
 8005718:	2104      	movs	r1, #4
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	438a      	bics	r2, r1
 800571e:	6022      	str	r2, [r4, #0]
 8005720:	2e00      	cmp	r6, #0
 8005722:	d102      	bne.n	800572a <_printf_i+0xee>
 8005724:	9d03      	ldr	r5, [sp, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <_printf_i+0x108>
 800572a:	9d03      	ldr	r5, [sp, #12]
 800572c:	0030      	movs	r0, r6
 800572e:	0039      	movs	r1, r7
 8005730:	f7fa fd88 	bl	8000244 <__aeabi_uidivmod>
 8005734:	9b04      	ldr	r3, [sp, #16]
 8005736:	3d01      	subs	r5, #1
 8005738:	5c5b      	ldrb	r3, [r3, r1]
 800573a:	702b      	strb	r3, [r5, #0]
 800573c:	0033      	movs	r3, r6
 800573e:	0006      	movs	r6, r0
 8005740:	429f      	cmp	r7, r3
 8005742:	d9f3      	bls.n	800572c <_printf_i+0xf0>
 8005744:	2f08      	cmp	r7, #8
 8005746:	d109      	bne.n	800575c <_printf_i+0x120>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	07db      	lsls	r3, r3, #31
 800574c:	d506      	bpl.n	800575c <_printf_i+0x120>
 800574e:	6862      	ldr	r2, [r4, #4]
 8005750:	6923      	ldr	r3, [r4, #16]
 8005752:	429a      	cmp	r2, r3
 8005754:	dc02      	bgt.n	800575c <_printf_i+0x120>
 8005756:	2330      	movs	r3, #48	@ 0x30
 8005758:	3d01      	subs	r5, #1
 800575a:	702b      	strb	r3, [r5, #0]
 800575c:	9b03      	ldr	r3, [sp, #12]
 800575e:	1b5b      	subs	r3, r3, r5
 8005760:	6123      	str	r3, [r4, #16]
 8005762:	9b07      	ldr	r3, [sp, #28]
 8005764:	0021      	movs	r1, r4
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	9805      	ldr	r0, [sp, #20]
 800576a:	9b06      	ldr	r3, [sp, #24]
 800576c:	aa09      	add	r2, sp, #36	@ 0x24
 800576e:	f7ff fef5 	bl	800555c <_printf_common>
 8005772:	3001      	adds	r0, #1
 8005774:	d148      	bne.n	8005808 <_printf_i+0x1cc>
 8005776:	2001      	movs	r0, #1
 8005778:	4240      	negs	r0, r0
 800577a:	b00b      	add	sp, #44	@ 0x2c
 800577c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800577e:	2220      	movs	r2, #32
 8005780:	6809      	ldr	r1, [r1, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	6022      	str	r2, [r4, #0]
 8005786:	2278      	movs	r2, #120	@ 0x78
 8005788:	4932      	ldr	r1, [pc, #200]	@ (8005854 <_printf_i+0x218>)
 800578a:	9104      	str	r1, [sp, #16]
 800578c:	0021      	movs	r1, r4
 800578e:	3145      	adds	r1, #69	@ 0x45
 8005790:	700a      	strb	r2, [r1, #0]
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	c940      	ldmia	r1!, {r6}
 8005798:	0610      	lsls	r0, r2, #24
 800579a:	d402      	bmi.n	80057a2 <_printf_i+0x166>
 800579c:	0650      	lsls	r0, r2, #25
 800579e:	d500      	bpl.n	80057a2 <_printf_i+0x166>
 80057a0:	b2b6      	uxth	r6, r6
 80057a2:	6019      	str	r1, [r3, #0]
 80057a4:	07d3      	lsls	r3, r2, #31
 80057a6:	d502      	bpl.n	80057ae <_printf_i+0x172>
 80057a8:	2320      	movs	r3, #32
 80057aa:	4313      	orrs	r3, r2
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	2e00      	cmp	r6, #0
 80057b0:	d001      	beq.n	80057b6 <_printf_i+0x17a>
 80057b2:	2710      	movs	r7, #16
 80057b4:	e7a8      	b.n	8005708 <_printf_i+0xcc>
 80057b6:	2220      	movs	r2, #32
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	4393      	bics	r3, r2
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	e7f8      	b.n	80057b2 <_printf_i+0x176>
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	680d      	ldr	r5, [r1, #0]
 80057c4:	1d10      	adds	r0, r2, #4
 80057c6:	6949      	ldr	r1, [r1, #20]
 80057c8:	6018      	str	r0, [r3, #0]
 80057ca:	6813      	ldr	r3, [r2, #0]
 80057cc:	062e      	lsls	r6, r5, #24
 80057ce:	d501      	bpl.n	80057d4 <_printf_i+0x198>
 80057d0:	6019      	str	r1, [r3, #0]
 80057d2:	e002      	b.n	80057da <_printf_i+0x19e>
 80057d4:	066d      	lsls	r5, r5, #25
 80057d6:	d5fb      	bpl.n	80057d0 <_printf_i+0x194>
 80057d8:	8019      	strh	r1, [r3, #0]
 80057da:	2300      	movs	r3, #0
 80057dc:	9d03      	ldr	r5, [sp, #12]
 80057de:	6123      	str	r3, [r4, #16]
 80057e0:	e7bf      	b.n	8005762 <_printf_i+0x126>
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	1d11      	adds	r1, r2, #4
 80057e6:	6019      	str	r1, [r3, #0]
 80057e8:	6815      	ldr	r5, [r2, #0]
 80057ea:	2100      	movs	r1, #0
 80057ec:	0028      	movs	r0, r5
 80057ee:	6862      	ldr	r2, [r4, #4]
 80057f0:	f000 fa1d 	bl	8005c2e <memchr>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d001      	beq.n	80057fc <_printf_i+0x1c0>
 80057f8:	1b40      	subs	r0, r0, r5
 80057fa:	6060      	str	r0, [r4, #4]
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	2300      	movs	r3, #0
 8005802:	9a03      	ldr	r2, [sp, #12]
 8005804:	7013      	strb	r3, [r2, #0]
 8005806:	e7ac      	b.n	8005762 <_printf_i+0x126>
 8005808:	002a      	movs	r2, r5
 800580a:	6923      	ldr	r3, [r4, #16]
 800580c:	9906      	ldr	r1, [sp, #24]
 800580e:	9805      	ldr	r0, [sp, #20]
 8005810:	9d07      	ldr	r5, [sp, #28]
 8005812:	47a8      	blx	r5
 8005814:	3001      	adds	r0, #1
 8005816:	d0ae      	beq.n	8005776 <_printf_i+0x13a>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	079b      	lsls	r3, r3, #30
 800581c:	d415      	bmi.n	800584a <_printf_i+0x20e>
 800581e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005820:	68e0      	ldr	r0, [r4, #12]
 8005822:	4298      	cmp	r0, r3
 8005824:	daa9      	bge.n	800577a <_printf_i+0x13e>
 8005826:	0018      	movs	r0, r3
 8005828:	e7a7      	b.n	800577a <_printf_i+0x13e>
 800582a:	0022      	movs	r2, r4
 800582c:	2301      	movs	r3, #1
 800582e:	9906      	ldr	r1, [sp, #24]
 8005830:	9805      	ldr	r0, [sp, #20]
 8005832:	9e07      	ldr	r6, [sp, #28]
 8005834:	3219      	adds	r2, #25
 8005836:	47b0      	blx	r6
 8005838:	3001      	adds	r0, #1
 800583a:	d09c      	beq.n	8005776 <_printf_i+0x13a>
 800583c:	3501      	adds	r5, #1
 800583e:	68e3      	ldr	r3, [r4, #12]
 8005840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	42ab      	cmp	r3, r5
 8005846:	dcf0      	bgt.n	800582a <_printf_i+0x1ee>
 8005848:	e7e9      	b.n	800581e <_printf_i+0x1e2>
 800584a:	2500      	movs	r5, #0
 800584c:	e7f7      	b.n	800583e <_printf_i+0x202>
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	08007f2a 	.word	0x08007f2a
 8005854:	08007f3b 	.word	0x08007f3b

08005858 <std>:
 8005858:	2300      	movs	r3, #0
 800585a:	b510      	push	{r4, lr}
 800585c:	0004      	movs	r4, r0
 800585e:	6003      	str	r3, [r0, #0]
 8005860:	6043      	str	r3, [r0, #4]
 8005862:	6083      	str	r3, [r0, #8]
 8005864:	8181      	strh	r1, [r0, #12]
 8005866:	6643      	str	r3, [r0, #100]	@ 0x64
 8005868:	81c2      	strh	r2, [r0, #14]
 800586a:	6103      	str	r3, [r0, #16]
 800586c:	6143      	str	r3, [r0, #20]
 800586e:	6183      	str	r3, [r0, #24]
 8005870:	0019      	movs	r1, r3
 8005872:	2208      	movs	r2, #8
 8005874:	305c      	adds	r0, #92	@ 0x5c
 8005876:	f000 f953 	bl	8005b20 <memset>
 800587a:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <std+0x50>)
 800587c:	6224      	str	r4, [r4, #32]
 800587e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005880:	4b0a      	ldr	r3, [pc, #40]	@ (80058ac <std+0x54>)
 8005882:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005884:	4b0a      	ldr	r3, [pc, #40]	@ (80058b0 <std+0x58>)
 8005886:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005888:	4b0a      	ldr	r3, [pc, #40]	@ (80058b4 <std+0x5c>)
 800588a:	6323      	str	r3, [r4, #48]	@ 0x30
 800588c:	4b0a      	ldr	r3, [pc, #40]	@ (80058b8 <std+0x60>)
 800588e:	429c      	cmp	r4, r3
 8005890:	d005      	beq.n	800589e <std+0x46>
 8005892:	4b0a      	ldr	r3, [pc, #40]	@ (80058bc <std+0x64>)
 8005894:	429c      	cmp	r4, r3
 8005896:	d002      	beq.n	800589e <std+0x46>
 8005898:	4b09      	ldr	r3, [pc, #36]	@ (80058c0 <std+0x68>)
 800589a:	429c      	cmp	r4, r3
 800589c:	d103      	bne.n	80058a6 <std+0x4e>
 800589e:	0020      	movs	r0, r4
 80058a0:	3058      	adds	r0, #88	@ 0x58
 80058a2:	f000 f9c1 	bl	8005c28 <__retarget_lock_init_recursive>
 80058a6:	bd10      	pop	{r4, pc}
 80058a8:	08005a89 	.word	0x08005a89
 80058ac:	08005ab1 	.word	0x08005ab1
 80058b0:	08005ae9 	.word	0x08005ae9
 80058b4:	08005b15 	.word	0x08005b15
 80058b8:	200002c8 	.word	0x200002c8
 80058bc:	20000330 	.word	0x20000330
 80058c0:	20000398 	.word	0x20000398

080058c4 <stdio_exit_handler>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	4a03      	ldr	r2, [pc, #12]	@ (80058d4 <stdio_exit_handler+0x10>)
 80058c8:	4903      	ldr	r1, [pc, #12]	@ (80058d8 <stdio_exit_handler+0x14>)
 80058ca:	4804      	ldr	r0, [pc, #16]	@ (80058dc <stdio_exit_handler+0x18>)
 80058cc:	f000 f86c 	bl	80059a8 <_fwalk_sglue>
 80058d0:	bd10      	pop	{r4, pc}
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	20000010 	.word	0x20000010
 80058d8:	08007665 	.word	0x08007665
 80058dc:	20000020 	.word	0x20000020

080058e0 <cleanup_stdio>:
 80058e0:	6841      	ldr	r1, [r0, #4]
 80058e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005910 <cleanup_stdio+0x30>)
 80058e4:	b510      	push	{r4, lr}
 80058e6:	0004      	movs	r4, r0
 80058e8:	4299      	cmp	r1, r3
 80058ea:	d001      	beq.n	80058f0 <cleanup_stdio+0x10>
 80058ec:	f001 feba 	bl	8007664 <_fflush_r>
 80058f0:	68a1      	ldr	r1, [r4, #8]
 80058f2:	4b08      	ldr	r3, [pc, #32]	@ (8005914 <cleanup_stdio+0x34>)
 80058f4:	4299      	cmp	r1, r3
 80058f6:	d002      	beq.n	80058fe <cleanup_stdio+0x1e>
 80058f8:	0020      	movs	r0, r4
 80058fa:	f001 feb3 	bl	8007664 <_fflush_r>
 80058fe:	68e1      	ldr	r1, [r4, #12]
 8005900:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <cleanup_stdio+0x38>)
 8005902:	4299      	cmp	r1, r3
 8005904:	d002      	beq.n	800590c <cleanup_stdio+0x2c>
 8005906:	0020      	movs	r0, r4
 8005908:	f001 feac 	bl	8007664 <_fflush_r>
 800590c:	bd10      	pop	{r4, pc}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	200002c8 	.word	0x200002c8
 8005914:	20000330 	.word	0x20000330
 8005918:	20000398 	.word	0x20000398

0800591c <global_stdio_init.part.0>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4b09      	ldr	r3, [pc, #36]	@ (8005944 <global_stdio_init.part.0+0x28>)
 8005920:	4a09      	ldr	r2, [pc, #36]	@ (8005948 <global_stdio_init.part.0+0x2c>)
 8005922:	2104      	movs	r1, #4
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	4809      	ldr	r0, [pc, #36]	@ (800594c <global_stdio_init.part.0+0x30>)
 8005928:	2200      	movs	r2, #0
 800592a:	f7ff ff95 	bl	8005858 <std>
 800592e:	2201      	movs	r2, #1
 8005930:	2109      	movs	r1, #9
 8005932:	4807      	ldr	r0, [pc, #28]	@ (8005950 <global_stdio_init.part.0+0x34>)
 8005934:	f7ff ff90 	bl	8005858 <std>
 8005938:	2202      	movs	r2, #2
 800593a:	2112      	movs	r1, #18
 800593c:	4805      	ldr	r0, [pc, #20]	@ (8005954 <global_stdio_init.part.0+0x38>)
 800593e:	f7ff ff8b 	bl	8005858 <std>
 8005942:	bd10      	pop	{r4, pc}
 8005944:	20000400 	.word	0x20000400
 8005948:	080058c5 	.word	0x080058c5
 800594c:	200002c8 	.word	0x200002c8
 8005950:	20000330 	.word	0x20000330
 8005954:	20000398 	.word	0x20000398

08005958 <__sfp_lock_acquire>:
 8005958:	b510      	push	{r4, lr}
 800595a:	4802      	ldr	r0, [pc, #8]	@ (8005964 <__sfp_lock_acquire+0xc>)
 800595c:	f000 f965 	bl	8005c2a <__retarget_lock_acquire_recursive>
 8005960:	bd10      	pop	{r4, pc}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	20000409 	.word	0x20000409

08005968 <__sfp_lock_release>:
 8005968:	b510      	push	{r4, lr}
 800596a:	4802      	ldr	r0, [pc, #8]	@ (8005974 <__sfp_lock_release+0xc>)
 800596c:	f000 f95e 	bl	8005c2c <__retarget_lock_release_recursive>
 8005970:	bd10      	pop	{r4, pc}
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	20000409 	.word	0x20000409

08005978 <__sinit>:
 8005978:	b510      	push	{r4, lr}
 800597a:	0004      	movs	r4, r0
 800597c:	f7ff ffec 	bl	8005958 <__sfp_lock_acquire>
 8005980:	6a23      	ldr	r3, [r4, #32]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <__sinit+0x14>
 8005986:	f7ff ffef 	bl	8005968 <__sfp_lock_release>
 800598a:	bd10      	pop	{r4, pc}
 800598c:	4b04      	ldr	r3, [pc, #16]	@ (80059a0 <__sinit+0x28>)
 800598e:	6223      	str	r3, [r4, #32]
 8005990:	4b04      	ldr	r3, [pc, #16]	@ (80059a4 <__sinit+0x2c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f6      	bne.n	8005986 <__sinit+0xe>
 8005998:	f7ff ffc0 	bl	800591c <global_stdio_init.part.0>
 800599c:	e7f3      	b.n	8005986 <__sinit+0xe>
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	080058e1 	.word	0x080058e1
 80059a4:	20000400 	.word	0x20000400

080059a8 <_fwalk_sglue>:
 80059a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059aa:	0014      	movs	r4, r2
 80059ac:	2600      	movs	r6, #0
 80059ae:	9000      	str	r0, [sp, #0]
 80059b0:	9101      	str	r1, [sp, #4]
 80059b2:	68a5      	ldr	r5, [r4, #8]
 80059b4:	6867      	ldr	r7, [r4, #4]
 80059b6:	3f01      	subs	r7, #1
 80059b8:	d504      	bpl.n	80059c4 <_fwalk_sglue+0x1c>
 80059ba:	6824      	ldr	r4, [r4, #0]
 80059bc:	2c00      	cmp	r4, #0
 80059be:	d1f8      	bne.n	80059b2 <_fwalk_sglue+0xa>
 80059c0:	0030      	movs	r0, r6
 80059c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059c4:	89ab      	ldrh	r3, [r5, #12]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d908      	bls.n	80059dc <_fwalk_sglue+0x34>
 80059ca:	220e      	movs	r2, #14
 80059cc:	5eab      	ldrsh	r3, [r5, r2]
 80059ce:	3301      	adds	r3, #1
 80059d0:	d004      	beq.n	80059dc <_fwalk_sglue+0x34>
 80059d2:	0029      	movs	r1, r5
 80059d4:	9800      	ldr	r0, [sp, #0]
 80059d6:	9b01      	ldr	r3, [sp, #4]
 80059d8:	4798      	blx	r3
 80059da:	4306      	orrs	r6, r0
 80059dc:	3568      	adds	r5, #104	@ 0x68
 80059de:	e7ea      	b.n	80059b6 <_fwalk_sglue+0xe>

080059e0 <sniprintf>:
 80059e0:	b40c      	push	{r2, r3}
 80059e2:	b530      	push	{r4, r5, lr}
 80059e4:	4b17      	ldr	r3, [pc, #92]	@ (8005a44 <sniprintf+0x64>)
 80059e6:	000c      	movs	r4, r1
 80059e8:	681d      	ldr	r5, [r3, #0]
 80059ea:	b09d      	sub	sp, #116	@ 0x74
 80059ec:	2900      	cmp	r1, #0
 80059ee:	da08      	bge.n	8005a02 <sniprintf+0x22>
 80059f0:	238b      	movs	r3, #139	@ 0x8b
 80059f2:	2001      	movs	r0, #1
 80059f4:	602b      	str	r3, [r5, #0]
 80059f6:	4240      	negs	r0, r0
 80059f8:	b01d      	add	sp, #116	@ 0x74
 80059fa:	bc30      	pop	{r4, r5}
 80059fc:	bc08      	pop	{r3}
 80059fe:	b002      	add	sp, #8
 8005a00:	4718      	bx	r3
 8005a02:	2382      	movs	r3, #130	@ 0x82
 8005a04:	466a      	mov	r2, sp
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	8293      	strh	r3, [r2, #20]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	9002      	str	r0, [sp, #8]
 8005a0e:	9006      	str	r0, [sp, #24]
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d000      	beq.n	8005a16 <sniprintf+0x36>
 8005a14:	1e4b      	subs	r3, r1, #1
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	9307      	str	r3, [sp, #28]
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	466a      	mov	r2, sp
 8005a1e:	425b      	negs	r3, r3
 8005a20:	82d3      	strh	r3, [r2, #22]
 8005a22:	0028      	movs	r0, r5
 8005a24:	ab21      	add	r3, sp, #132	@ 0x84
 8005a26:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a28:	a902      	add	r1, sp, #8
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	f001 fc96 	bl	800735c <_svfiprintf_r>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	da01      	bge.n	8005a38 <sniprintf+0x58>
 8005a34:	238b      	movs	r3, #139	@ 0x8b
 8005a36:	602b      	str	r3, [r5, #0]
 8005a38:	2c00      	cmp	r4, #0
 8005a3a:	d0dd      	beq.n	80059f8 <sniprintf+0x18>
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	9b02      	ldr	r3, [sp, #8]
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	e7d9      	b.n	80059f8 <sniprintf+0x18>
 8005a44:	2000001c 	.word	0x2000001c

08005a48 <siprintf>:
 8005a48:	b40e      	push	{r1, r2, r3}
 8005a4a:	b500      	push	{lr}
 8005a4c:	490b      	ldr	r1, [pc, #44]	@ (8005a7c <siprintf+0x34>)
 8005a4e:	b09c      	sub	sp, #112	@ 0x70
 8005a50:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a52:	9002      	str	r0, [sp, #8]
 8005a54:	9006      	str	r0, [sp, #24]
 8005a56:	9107      	str	r1, [sp, #28]
 8005a58:	9104      	str	r1, [sp, #16]
 8005a5a:	4809      	ldr	r0, [pc, #36]	@ (8005a80 <siprintf+0x38>)
 8005a5c:	4909      	ldr	r1, [pc, #36]	@ (8005a84 <siprintf+0x3c>)
 8005a5e:	cb04      	ldmia	r3!, {r2}
 8005a60:	9105      	str	r1, [sp, #20]
 8005a62:	6800      	ldr	r0, [r0, #0]
 8005a64:	a902      	add	r1, sp, #8
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	f001 fc78 	bl	800735c <_svfiprintf_r>
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	9b02      	ldr	r3, [sp, #8]
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	b01c      	add	sp, #112	@ 0x70
 8005a74:	bc08      	pop	{r3}
 8005a76:	b003      	add	sp, #12
 8005a78:	4718      	bx	r3
 8005a7a:	46c0      	nop			@ (mov r8, r8)
 8005a7c:	7fffffff 	.word	0x7fffffff
 8005a80:	2000001c 	.word	0x2000001c
 8005a84:	ffff0208 	.word	0xffff0208

08005a88 <__sread>:
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	000c      	movs	r4, r1
 8005a8c:	250e      	movs	r5, #14
 8005a8e:	5f49      	ldrsh	r1, [r1, r5]
 8005a90:	f000 f878 	bl	8005b84 <_read_r>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	db03      	blt.n	8005aa0 <__sread+0x18>
 8005a98:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005a9a:	181b      	adds	r3, r3, r0
 8005a9c:	6563      	str	r3, [r4, #84]	@ 0x54
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	4a02      	ldr	r2, [pc, #8]	@ (8005aac <__sread+0x24>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	81a3      	strh	r3, [r4, #12]
 8005aa8:	e7f9      	b.n	8005a9e <__sread+0x16>
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	ffffefff 	.word	0xffffefff

08005ab0 <__swrite>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	001f      	movs	r7, r3
 8005ab4:	898b      	ldrh	r3, [r1, #12]
 8005ab6:	0005      	movs	r5, r0
 8005ab8:	000c      	movs	r4, r1
 8005aba:	0016      	movs	r6, r2
 8005abc:	05db      	lsls	r3, r3, #23
 8005abe:	d505      	bpl.n	8005acc <__swrite+0x1c>
 8005ac0:	230e      	movs	r3, #14
 8005ac2:	5ec9      	ldrsh	r1, [r1, r3]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	f000 f848 	bl	8005b5c <_lseek_r>
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	4a05      	ldr	r2, [pc, #20]	@ (8005ae4 <__swrite+0x34>)
 8005ad0:	0028      	movs	r0, r5
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	0032      	movs	r2, r6
 8005ad8:	230e      	movs	r3, #14
 8005ada:	5ee1      	ldrsh	r1, [r4, r3]
 8005adc:	003b      	movs	r3, r7
 8005ade:	f000 f865 	bl	8005bac <_write_r>
 8005ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae4:	ffffefff 	.word	0xffffefff

08005ae8 <__sseek>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	000c      	movs	r4, r1
 8005aec:	250e      	movs	r5, #14
 8005aee:	5f49      	ldrsh	r1, [r1, r5]
 8005af0:	f000 f834 	bl	8005b5c <_lseek_r>
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	1c42      	adds	r2, r0, #1
 8005af8:	d103      	bne.n	8005b02 <__sseek+0x1a>
 8005afa:	4a05      	ldr	r2, [pc, #20]	@ (8005b10 <__sseek+0x28>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	81a3      	strh	r3, [r4, #12]
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
 8005b02:	2280      	movs	r2, #128	@ 0x80
 8005b04:	0152      	lsls	r2, r2, #5
 8005b06:	4313      	orrs	r3, r2
 8005b08:	81a3      	strh	r3, [r4, #12]
 8005b0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b0c:	e7f8      	b.n	8005b00 <__sseek+0x18>
 8005b0e:	46c0      	nop			@ (mov r8, r8)
 8005b10:	ffffefff 	.word	0xffffefff

08005b14 <__sclose>:
 8005b14:	b510      	push	{r4, lr}
 8005b16:	230e      	movs	r3, #14
 8005b18:	5ec9      	ldrsh	r1, [r1, r3]
 8005b1a:	f000 f80d 	bl	8005b38 <_close_r>
 8005b1e:	bd10      	pop	{r4, pc}

08005b20 <memset>:
 8005b20:	0003      	movs	r3, r0
 8005b22:	1882      	adds	r2, r0, r2
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d100      	bne.n	8005b2a <memset+0xa>
 8005b28:	4770      	bx	lr
 8005b2a:	7019      	strb	r1, [r3, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	e7f9      	b.n	8005b24 <memset+0x4>

08005b30 <_localeconv_r>:
 8005b30:	4800      	ldr	r0, [pc, #0]	@ (8005b34 <_localeconv_r+0x4>)
 8005b32:	4770      	bx	lr
 8005b34:	2000015c 	.word	0x2000015c

08005b38 <_close_r>:
 8005b38:	2300      	movs	r3, #0
 8005b3a:	b570      	push	{r4, r5, r6, lr}
 8005b3c:	4d06      	ldr	r5, [pc, #24]	@ (8005b58 <_close_r+0x20>)
 8005b3e:	0004      	movs	r4, r0
 8005b40:	0008      	movs	r0, r1
 8005b42:	602b      	str	r3, [r5, #0]
 8005b44:	f7fd fa8b 	bl	800305e <_close>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d103      	bne.n	8005b54 <_close_r+0x1c>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d000      	beq.n	8005b54 <_close_r+0x1c>
 8005b52:	6023      	str	r3, [r4, #0]
 8005b54:	bd70      	pop	{r4, r5, r6, pc}
 8005b56:	46c0      	nop			@ (mov r8, r8)
 8005b58:	20000404 	.word	0x20000404

08005b5c <_lseek_r>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	0004      	movs	r4, r0
 8005b60:	0008      	movs	r0, r1
 8005b62:	0011      	movs	r1, r2
 8005b64:	001a      	movs	r2, r3
 8005b66:	2300      	movs	r3, #0
 8005b68:	4d05      	ldr	r5, [pc, #20]	@ (8005b80 <_lseek_r+0x24>)
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	f7fd fa98 	bl	80030a0 <_lseek>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d103      	bne.n	8005b7c <_lseek_r+0x20>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d000      	beq.n	8005b7c <_lseek_r+0x20>
 8005b7a:	6023      	str	r3, [r4, #0]
 8005b7c:	bd70      	pop	{r4, r5, r6, pc}
 8005b7e:	46c0      	nop			@ (mov r8, r8)
 8005b80:	20000404 	.word	0x20000404

08005b84 <_read_r>:
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	0004      	movs	r4, r0
 8005b88:	0008      	movs	r0, r1
 8005b8a:	0011      	movs	r1, r2
 8005b8c:	001a      	movs	r2, r3
 8005b8e:	2300      	movs	r3, #0
 8005b90:	4d05      	ldr	r5, [pc, #20]	@ (8005ba8 <_read_r+0x24>)
 8005b92:	602b      	str	r3, [r5, #0]
 8005b94:	f7fd fa2a 	bl	8002fec <_read>
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	d103      	bne.n	8005ba4 <_read_r+0x20>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d000      	beq.n	8005ba4 <_read_r+0x20>
 8005ba2:	6023      	str	r3, [r4, #0]
 8005ba4:	bd70      	pop	{r4, r5, r6, pc}
 8005ba6:	46c0      	nop			@ (mov r8, r8)
 8005ba8:	20000404 	.word	0x20000404

08005bac <_write_r>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	0004      	movs	r4, r0
 8005bb0:	0008      	movs	r0, r1
 8005bb2:	0011      	movs	r1, r2
 8005bb4:	001a      	movs	r2, r3
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	4d05      	ldr	r5, [pc, #20]	@ (8005bd0 <_write_r+0x24>)
 8005bba:	602b      	str	r3, [r5, #0]
 8005bbc:	f7fd fa33 	bl	8003026 <_write>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d103      	bne.n	8005bcc <_write_r+0x20>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d000      	beq.n	8005bcc <_write_r+0x20>
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	bd70      	pop	{r4, r5, r6, pc}
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	20000404 	.word	0x20000404

08005bd4 <__errno>:
 8005bd4:	4b01      	ldr	r3, [pc, #4]	@ (8005bdc <__errno+0x8>)
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	4770      	bx	lr
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	2000001c 	.word	0x2000001c

08005be0 <__libc_init_array>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	2600      	movs	r6, #0
 8005be4:	4c0c      	ldr	r4, [pc, #48]	@ (8005c18 <__libc_init_array+0x38>)
 8005be6:	4d0d      	ldr	r5, [pc, #52]	@ (8005c1c <__libc_init_array+0x3c>)
 8005be8:	1b64      	subs	r4, r4, r5
 8005bea:	10a4      	asrs	r4, r4, #2
 8005bec:	42a6      	cmp	r6, r4
 8005bee:	d109      	bne.n	8005c04 <__libc_init_array+0x24>
 8005bf0:	2600      	movs	r6, #0
 8005bf2:	f002 f907 	bl	8007e04 <_init>
 8005bf6:	4c0a      	ldr	r4, [pc, #40]	@ (8005c20 <__libc_init_array+0x40>)
 8005bf8:	4d0a      	ldr	r5, [pc, #40]	@ (8005c24 <__libc_init_array+0x44>)
 8005bfa:	1b64      	subs	r4, r4, r5
 8005bfc:	10a4      	asrs	r4, r4, #2
 8005bfe:	42a6      	cmp	r6, r4
 8005c00:	d105      	bne.n	8005c0e <__libc_init_array+0x2e>
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	00b3      	lsls	r3, r6, #2
 8005c06:	58eb      	ldr	r3, [r5, r3]
 8005c08:	4798      	blx	r3
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	e7ee      	b.n	8005bec <__libc_init_array+0xc>
 8005c0e:	00b3      	lsls	r3, r6, #2
 8005c10:	58eb      	ldr	r3, [r5, r3]
 8005c12:	4798      	blx	r3
 8005c14:	3601      	adds	r6, #1
 8005c16:	e7f2      	b.n	8005bfe <__libc_init_array+0x1e>
 8005c18:	08008288 	.word	0x08008288
 8005c1c:	08008288 	.word	0x08008288
 8005c20:	0800828c 	.word	0x0800828c
 8005c24:	08008288 	.word	0x08008288

08005c28 <__retarget_lock_init_recursive>:
 8005c28:	4770      	bx	lr

08005c2a <__retarget_lock_acquire_recursive>:
 8005c2a:	4770      	bx	lr

08005c2c <__retarget_lock_release_recursive>:
 8005c2c:	4770      	bx	lr

08005c2e <memchr>:
 8005c2e:	b2c9      	uxtb	r1, r1
 8005c30:	1882      	adds	r2, r0, r2
 8005c32:	4290      	cmp	r0, r2
 8005c34:	d101      	bne.n	8005c3a <memchr+0xc>
 8005c36:	2000      	movs	r0, #0
 8005c38:	4770      	bx	lr
 8005c3a:	7803      	ldrb	r3, [r0, #0]
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	d0fb      	beq.n	8005c38 <memchr+0xa>
 8005c40:	3001      	adds	r0, #1
 8005c42:	e7f6      	b.n	8005c32 <memchr+0x4>

08005c44 <quorem>:
 8005c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c46:	6902      	ldr	r2, [r0, #16]
 8005c48:	690f      	ldr	r7, [r1, #16]
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	0006      	movs	r6, r0
 8005c4e:	000b      	movs	r3, r1
 8005c50:	2000      	movs	r0, #0
 8005c52:	9102      	str	r1, [sp, #8]
 8005c54:	42ba      	cmp	r2, r7
 8005c56:	db6d      	blt.n	8005d34 <quorem+0xf0>
 8005c58:	3f01      	subs	r7, #1
 8005c5a:	00bc      	lsls	r4, r7, #2
 8005c5c:	3314      	adds	r3, #20
 8005c5e:	9305      	str	r3, [sp, #20]
 8005c60:	191b      	adds	r3, r3, r4
 8005c62:	9303      	str	r3, [sp, #12]
 8005c64:	0033      	movs	r3, r6
 8005c66:	3314      	adds	r3, #20
 8005c68:	191c      	adds	r4, r3, r4
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	9304      	str	r3, [sp, #16]
 8005c70:	9b03      	ldr	r3, [sp, #12]
 8005c72:	9804      	ldr	r0, [sp, #16]
 8005c74:	681d      	ldr	r5, [r3, #0]
 8005c76:	3501      	adds	r5, #1
 8005c78:	0029      	movs	r1, r5
 8005c7a:	f7fa fa5d 	bl	8000138 <__udivsi3>
 8005c7e:	9b04      	ldr	r3, [sp, #16]
 8005c80:	9000      	str	r0, [sp, #0]
 8005c82:	42ab      	cmp	r3, r5
 8005c84:	d32b      	bcc.n	8005cde <quorem+0x9a>
 8005c86:	9b05      	ldr	r3, [sp, #20]
 8005c88:	9d01      	ldr	r5, [sp, #4]
 8005c8a:	469c      	mov	ip, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9305      	str	r3, [sp, #20]
 8005c90:	9304      	str	r3, [sp, #16]
 8005c92:	4662      	mov	r2, ip
 8005c94:	ca08      	ldmia	r2!, {r3}
 8005c96:	6828      	ldr	r0, [r5, #0]
 8005c98:	4694      	mov	ip, r2
 8005c9a:	9a00      	ldr	r2, [sp, #0]
 8005c9c:	b299      	uxth	r1, r3
 8005c9e:	4351      	muls	r1, r2
 8005ca0:	9a05      	ldr	r2, [sp, #20]
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	1889      	adds	r1, r1, r2
 8005ca6:	9a00      	ldr	r2, [sp, #0]
 8005ca8:	4353      	muls	r3, r2
 8005caa:	0c0a      	lsrs	r2, r1, #16
 8005cac:	189b      	adds	r3, r3, r2
 8005cae:	0c1a      	lsrs	r2, r3, #16
 8005cb0:	b289      	uxth	r1, r1
 8005cb2:	9205      	str	r2, [sp, #20]
 8005cb4:	b282      	uxth	r2, r0
 8005cb6:	1a52      	subs	r2, r2, r1
 8005cb8:	9904      	ldr	r1, [sp, #16]
 8005cba:	0c00      	lsrs	r0, r0, #16
 8005cbc:	1852      	adds	r2, r2, r1
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	1411      	asrs	r1, r2, #16
 8005cc2:	1ac3      	subs	r3, r0, r3
 8005cc4:	185b      	adds	r3, r3, r1
 8005cc6:	1419      	asrs	r1, r3, #16
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	9104      	str	r1, [sp, #16]
 8005cd2:	c504      	stmia	r5!, {r2}
 8005cd4:	4563      	cmp	r3, ip
 8005cd6:	d2dc      	bcs.n	8005c92 <quorem+0x4e>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d030      	beq.n	8005d40 <quorem+0xfc>
 8005cde:	0030      	movs	r0, r6
 8005ce0:	9902      	ldr	r1, [sp, #8]
 8005ce2:	f001 f9c5 	bl	8007070 <__mcmp>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	db23      	blt.n	8005d32 <quorem+0xee>
 8005cea:	0034      	movs	r4, r6
 8005cec:	2500      	movs	r5, #0
 8005cee:	9902      	ldr	r1, [sp, #8]
 8005cf0:	3414      	adds	r4, #20
 8005cf2:	3114      	adds	r1, #20
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	c901      	ldmia	r1!, {r0}
 8005cf8:	9302      	str	r3, [sp, #8]
 8005cfa:	466b      	mov	r3, sp
 8005cfc:	891b      	ldrh	r3, [r3, #8]
 8005cfe:	b282      	uxth	r2, r0
 8005d00:	1a9a      	subs	r2, r3, r2
 8005d02:	9b02      	ldr	r3, [sp, #8]
 8005d04:	1952      	adds	r2, r2, r5
 8005d06:	0c00      	lsrs	r0, r0, #16
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	1a1b      	subs	r3, r3, r0
 8005d0c:	1410      	asrs	r0, r2, #16
 8005d0e:	181b      	adds	r3, r3, r0
 8005d10:	141d      	asrs	r5, r3, #16
 8005d12:	b292      	uxth	r2, r2
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	431a      	orrs	r2, r3
 8005d18:	9b03      	ldr	r3, [sp, #12]
 8005d1a:	c404      	stmia	r4!, {r2}
 8005d1c:	428b      	cmp	r3, r1
 8005d1e:	d2e9      	bcs.n	8005cf4 <quorem+0xb0>
 8005d20:	9a01      	ldr	r2, [sp, #4]
 8005d22:	00bb      	lsls	r3, r7, #2
 8005d24:	18d3      	adds	r3, r2, r3
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	2a00      	cmp	r2, #0
 8005d2a:	d013      	beq.n	8005d54 <quorem+0x110>
 8005d2c:	9b00      	ldr	r3, [sp, #0]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	9800      	ldr	r0, [sp, #0]
 8005d34:	b007      	add	sp, #28
 8005d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <quorem+0x104>
 8005d3e:	3f01      	subs	r7, #1
 8005d40:	9b01      	ldr	r3, [sp, #4]
 8005d42:	3c04      	subs	r4, #4
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	d3f7      	bcc.n	8005d38 <quorem+0xf4>
 8005d48:	6137      	str	r7, [r6, #16]
 8005d4a:	e7c8      	b.n	8005cde <quorem+0x9a>
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	d104      	bne.n	8005d5c <quorem+0x118>
 8005d52:	3f01      	subs	r7, #1
 8005d54:	9a01      	ldr	r2, [sp, #4]
 8005d56:	3b04      	subs	r3, #4
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d3f7      	bcc.n	8005d4c <quorem+0x108>
 8005d5c:	6137      	str	r7, [r6, #16]
 8005d5e:	e7e5      	b.n	8005d2c <quorem+0xe8>

08005d60 <_dtoa_r>:
 8005d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d62:	0014      	movs	r4, r2
 8005d64:	001d      	movs	r5, r3
 8005d66:	69c6      	ldr	r6, [r0, #28]
 8005d68:	b09d      	sub	sp, #116	@ 0x74
 8005d6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8005d6c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8005d6e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8005d70:	9003      	str	r0, [sp, #12]
 8005d72:	2e00      	cmp	r6, #0
 8005d74:	d10f      	bne.n	8005d96 <_dtoa_r+0x36>
 8005d76:	2010      	movs	r0, #16
 8005d78:	f000 fe30 	bl	80069dc <malloc>
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	1e02      	subs	r2, r0, #0
 8005d80:	61d8      	str	r0, [r3, #28]
 8005d82:	d104      	bne.n	8005d8e <_dtoa_r+0x2e>
 8005d84:	21ef      	movs	r1, #239	@ 0xef
 8005d86:	4bc7      	ldr	r3, [pc, #796]	@ (80060a4 <_dtoa_r+0x344>)
 8005d88:	48c7      	ldr	r0, [pc, #796]	@ (80060a8 <_dtoa_r+0x348>)
 8005d8a:	f001 fcc5 	bl	8007718 <__assert_func>
 8005d8e:	6046      	str	r6, [r0, #4]
 8005d90:	6086      	str	r6, [r0, #8]
 8005d92:	6006      	str	r6, [r0, #0]
 8005d94:	60c6      	str	r6, [r0, #12]
 8005d96:	9b03      	ldr	r3, [sp, #12]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	6819      	ldr	r1, [r3, #0]
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	d00b      	beq.n	8005db8 <_dtoa_r+0x58>
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	2301      	movs	r3, #1
 8005da4:	4093      	lsls	r3, r2
 8005da6:	604a      	str	r2, [r1, #4]
 8005da8:	608b      	str	r3, [r1, #8]
 8005daa:	9803      	ldr	r0, [sp, #12]
 8005dac:	f000 ff16 	bl	8006bdc <_Bfree>
 8005db0:	2200      	movs	r2, #0
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	2d00      	cmp	r5, #0
 8005dba:	da1e      	bge.n	8005dfa <_dtoa_r+0x9a>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	006b      	lsls	r3, r5, #1
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dc6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005dc8:	4bb8      	ldr	r3, [pc, #736]	@ (80060ac <_dtoa_r+0x34c>)
 8005dca:	4ab8      	ldr	r2, [pc, #736]	@ (80060ac <_dtoa_r+0x34c>)
 8005dcc:	403b      	ands	r3, r7
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d116      	bne.n	8005e00 <_dtoa_r+0xa0>
 8005dd2:	4bb7      	ldr	r3, [pc, #732]	@ (80060b0 <_dtoa_r+0x350>)
 8005dd4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	033b      	lsls	r3, r7, #12
 8005dda:	0b1b      	lsrs	r3, r3, #12
 8005ddc:	4323      	orrs	r3, r4
 8005dde:	d101      	bne.n	8005de4 <_dtoa_r+0x84>
 8005de0:	f000 fd83 	bl	80068ea <_dtoa_r+0xb8a>
 8005de4:	4bb3      	ldr	r3, [pc, #716]	@ (80060b4 <_dtoa_r+0x354>)
 8005de6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005de8:	9308      	str	r3, [sp, #32]
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	d002      	beq.n	8005df4 <_dtoa_r+0x94>
 8005dee:	4bb2      	ldr	r3, [pc, #712]	@ (80060b8 <_dtoa_r+0x358>)
 8005df0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	9808      	ldr	r0, [sp, #32]
 8005df6:	b01d      	add	sp, #116	@ 0x74
 8005df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	603b      	str	r3, [r7, #0]
 8005dfe:	e7e2      	b.n	8005dc6 <_dtoa_r+0x66>
 8005e00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e04:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005e0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f7fa fb18 	bl	8000444 <__aeabi_dcmpeq>
 8005e14:	1e06      	subs	r6, r0, #0
 8005e16:	d00b      	beq.n	8005e30 <_dtoa_r+0xd0>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <_dtoa_r+0xca>
 8005e24:	4ba5      	ldr	r3, [pc, #660]	@ (80060bc <_dtoa_r+0x35c>)
 8005e26:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4ba5      	ldr	r3, [pc, #660]	@ (80060c0 <_dtoa_r+0x360>)
 8005e2c:	9308      	str	r3, [sp, #32]
 8005e2e:	e7e1      	b.n	8005df4 <_dtoa_r+0x94>
 8005e30:	ab1a      	add	r3, sp, #104	@ 0x68
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	9803      	ldr	r0, [sp, #12]
 8005e3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005e3e:	f001 f9cd 	bl	80071dc <__d2b>
 8005e42:	007a      	lsls	r2, r7, #1
 8005e44:	9005      	str	r0, [sp, #20]
 8005e46:	0d52      	lsrs	r2, r2, #21
 8005e48:	d100      	bne.n	8005e4c <_dtoa_r+0xec>
 8005e4a:	e07b      	b.n	8005f44 <_dtoa_r+0x1e4>
 8005e4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005e4e:	9618      	str	r6, [sp, #96]	@ 0x60
 8005e50:	0319      	lsls	r1, r3, #12
 8005e52:	4b9c      	ldr	r3, [pc, #624]	@ (80060c4 <_dtoa_r+0x364>)
 8005e54:	0b09      	lsrs	r1, r1, #12
 8005e56:	430b      	orrs	r3, r1
 8005e58:	499b      	ldr	r1, [pc, #620]	@ (80060c8 <_dtoa_r+0x368>)
 8005e5a:	1857      	adds	r7, r2, r1
 8005e5c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005e5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005e60:	0019      	movs	r1, r3
 8005e62:	2200      	movs	r2, #0
 8005e64:	4b99      	ldr	r3, [pc, #612]	@ (80060cc <_dtoa_r+0x36c>)
 8005e66:	f7fb fe8b 	bl	8001b80 <__aeabi_dsub>
 8005e6a:	4a99      	ldr	r2, [pc, #612]	@ (80060d0 <_dtoa_r+0x370>)
 8005e6c:	4b99      	ldr	r3, [pc, #612]	@ (80060d4 <_dtoa_r+0x374>)
 8005e6e:	f7fb fbbf 	bl	80015f0 <__aeabi_dmul>
 8005e72:	4a99      	ldr	r2, [pc, #612]	@ (80060d8 <_dtoa_r+0x378>)
 8005e74:	4b99      	ldr	r3, [pc, #612]	@ (80060dc <_dtoa_r+0x37c>)
 8005e76:	f7fa fc13 	bl	80006a0 <__aeabi_dadd>
 8005e7a:	0004      	movs	r4, r0
 8005e7c:	0038      	movs	r0, r7
 8005e7e:	000d      	movs	r5, r1
 8005e80:	f7fc fa78 	bl	8002374 <__aeabi_i2d>
 8005e84:	4a96      	ldr	r2, [pc, #600]	@ (80060e0 <_dtoa_r+0x380>)
 8005e86:	4b97      	ldr	r3, [pc, #604]	@ (80060e4 <_dtoa_r+0x384>)
 8005e88:	f7fb fbb2 	bl	80015f0 <__aeabi_dmul>
 8005e8c:	0002      	movs	r2, r0
 8005e8e:	000b      	movs	r3, r1
 8005e90:	0020      	movs	r0, r4
 8005e92:	0029      	movs	r1, r5
 8005e94:	f7fa fc04 	bl	80006a0 <__aeabi_dadd>
 8005e98:	0004      	movs	r4, r0
 8005e9a:	000d      	movs	r5, r1
 8005e9c:	f7fc fa2e 	bl	80022fc <__aeabi_d2iz>
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	9004      	str	r0, [sp, #16]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	0020      	movs	r0, r4
 8005ea8:	0029      	movs	r1, r5
 8005eaa:	f7fa fad1 	bl	8000450 <__aeabi_dcmplt>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d00b      	beq.n	8005eca <_dtoa_r+0x16a>
 8005eb2:	9804      	ldr	r0, [sp, #16]
 8005eb4:	f7fc fa5e 	bl	8002374 <__aeabi_i2d>
 8005eb8:	002b      	movs	r3, r5
 8005eba:	0022      	movs	r2, r4
 8005ebc:	f7fa fac2 	bl	8000444 <__aeabi_dcmpeq>
 8005ec0:	4243      	negs	r3, r0
 8005ec2:	4158      	adcs	r0, r3
 8005ec4:	9b04      	ldr	r3, [sp, #16]
 8005ec6:	1a1b      	subs	r3, r3, r0
 8005ec8:	9304      	str	r3, [sp, #16]
 8005eca:	2301      	movs	r3, #1
 8005ecc:	9315      	str	r3, [sp, #84]	@ 0x54
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	2b16      	cmp	r3, #22
 8005ed2:	d810      	bhi.n	8005ef6 <_dtoa_r+0x196>
 8005ed4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005ed6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005ed8:	9a04      	ldr	r2, [sp, #16]
 8005eda:	4b83      	ldr	r3, [pc, #524]	@ (80060e8 <_dtoa_r+0x388>)
 8005edc:	00d2      	lsls	r2, r2, #3
 8005ede:	189b      	adds	r3, r3, r2
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f7fa fab4 	bl	8000450 <__aeabi_dcmplt>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d047      	beq.n	8005f7c <_dtoa_r+0x21c>
 8005eec:	9b04      	ldr	r3, [sp, #16]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9315      	str	r3, [sp, #84]	@ 0x54
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005efa:	9206      	str	r2, [sp, #24]
 8005efc:	1bdb      	subs	r3, r3, r7
 8005efe:	1e5a      	subs	r2, r3, #1
 8005f00:	d53e      	bpl.n	8005f80 <_dtoa_r+0x220>
 8005f02:	2201      	movs	r2, #1
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	9306      	str	r3, [sp, #24]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	930d      	str	r3, [sp, #52]	@ 0x34
 8005f0c:	9b04      	ldr	r3, [sp, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	db38      	blt.n	8005f84 <_dtoa_r+0x224>
 8005f12:	9a04      	ldr	r2, [sp, #16]
 8005f14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f16:	4694      	mov	ip, r2
 8005f18:	4463      	add	r3, ip
 8005f1a:	930d      	str	r3, [sp, #52]	@ 0x34
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9214      	str	r2, [sp, #80]	@ 0x50
 8005f20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005f24:	2401      	movs	r4, #1
 8005f26:	2b09      	cmp	r3, #9
 8005f28:	d867      	bhi.n	8005ffa <_dtoa_r+0x29a>
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	dd02      	ble.n	8005f34 <_dtoa_r+0x1d4>
 8005f2e:	2400      	movs	r4, #0
 8005f30:	3b04      	subs	r3, #4
 8005f32:	9322      	str	r3, [sp, #136]	@ 0x88
 8005f34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005f36:	1e98      	subs	r0, r3, #2
 8005f38:	2803      	cmp	r0, #3
 8005f3a:	d867      	bhi.n	800600c <_dtoa_r+0x2ac>
 8005f3c:	f7fa f8e8 	bl	8000110 <__gnu_thumb1_case_uqi>
 8005f40:	5b383a2b 	.word	0x5b383a2b
 8005f44:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8005f46:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8005f48:	18f6      	adds	r6, r6, r3
 8005f4a:	4b68      	ldr	r3, [pc, #416]	@ (80060ec <_dtoa_r+0x38c>)
 8005f4c:	18f2      	adds	r2, r6, r3
 8005f4e:	2a20      	cmp	r2, #32
 8005f50:	dd0f      	ble.n	8005f72 <_dtoa_r+0x212>
 8005f52:	2340      	movs	r3, #64	@ 0x40
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	409f      	lsls	r7, r3
 8005f58:	4b65      	ldr	r3, [pc, #404]	@ (80060f0 <_dtoa_r+0x390>)
 8005f5a:	0038      	movs	r0, r7
 8005f5c:	18f3      	adds	r3, r6, r3
 8005f5e:	40dc      	lsrs	r4, r3
 8005f60:	4320      	orrs	r0, r4
 8005f62:	f7fc fa35 	bl	80023d0 <__aeabi_ui2d>
 8005f66:	2201      	movs	r2, #1
 8005f68:	4b62      	ldr	r3, [pc, #392]	@ (80060f4 <_dtoa_r+0x394>)
 8005f6a:	1e77      	subs	r7, r6, #1
 8005f6c:	18cb      	adds	r3, r1, r3
 8005f6e:	9218      	str	r2, [sp, #96]	@ 0x60
 8005f70:	e776      	b.n	8005e60 <_dtoa_r+0x100>
 8005f72:	2320      	movs	r3, #32
 8005f74:	0020      	movs	r0, r4
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	4098      	lsls	r0, r3
 8005f7a:	e7f2      	b.n	8005f62 <_dtoa_r+0x202>
 8005f7c:	9015      	str	r0, [sp, #84]	@ 0x54
 8005f7e:	e7ba      	b.n	8005ef6 <_dtoa_r+0x196>
 8005f80:	920d      	str	r2, [sp, #52]	@ 0x34
 8005f82:	e7c3      	b.n	8005f0c <_dtoa_r+0x1ac>
 8005f84:	9b06      	ldr	r3, [sp, #24]
 8005f86:	9a04      	ldr	r2, [sp, #16]
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	9306      	str	r3, [sp, #24]
 8005f8c:	4253      	negs	r3, r2
 8005f8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f90:	2300      	movs	r3, #0
 8005f92:	9314      	str	r3, [sp, #80]	@ 0x50
 8005f94:	e7c5      	b.n	8005f22 <_dtoa_r+0x1c2>
 8005f96:	2300      	movs	r3, #0
 8005f98:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dc13      	bgt.n	8005fcc <_dtoa_r+0x26c>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	001a      	movs	r2, r3
 8005fa8:	930e      	str	r3, [sp, #56]	@ 0x38
 8005faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fac:	9223      	str	r2, [sp, #140]	@ 0x8c
 8005fae:	e00d      	b.n	8005fcc <_dtoa_r+0x26c>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e7f1      	b.n	8005f98 <_dtoa_r+0x238>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005fb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8005fba:	4694      	mov	ip, r2
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	4463      	add	r3, ip
 8005fc0:	930e      	str	r3, [sp, #56]	@ 0x38
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dc00      	bgt.n	8005fcc <_dtoa_r+0x26c>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	9a03      	ldr	r2, [sp, #12]
 8005fce:	2100      	movs	r1, #0
 8005fd0:	69d0      	ldr	r0, [r2, #28]
 8005fd2:	2204      	movs	r2, #4
 8005fd4:	0015      	movs	r5, r2
 8005fd6:	3514      	adds	r5, #20
 8005fd8:	429d      	cmp	r5, r3
 8005fda:	d91b      	bls.n	8006014 <_dtoa_r+0x2b4>
 8005fdc:	6041      	str	r1, [r0, #4]
 8005fde:	9803      	ldr	r0, [sp, #12]
 8005fe0:	f000 fdb8 	bl	8006b54 <_Balloc>
 8005fe4:	9008      	str	r0, [sp, #32]
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	d117      	bne.n	800601a <_dtoa_r+0x2ba>
 8005fea:	21b0      	movs	r1, #176	@ 0xb0
 8005fec:	4b42      	ldr	r3, [pc, #264]	@ (80060f8 <_dtoa_r+0x398>)
 8005fee:	482e      	ldr	r0, [pc, #184]	@ (80060a8 <_dtoa_r+0x348>)
 8005ff0:	9a08      	ldr	r2, [sp, #32]
 8005ff2:	31ff      	adds	r1, #255	@ 0xff
 8005ff4:	e6c9      	b.n	8005d8a <_dtoa_r+0x2a>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e7dd      	b.n	8005fb6 <_dtoa_r+0x256>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9410      	str	r4, [sp, #64]	@ 0x40
 8005ffe:	9322      	str	r3, [sp, #136]	@ 0x88
 8006000:	3b01      	subs	r3, #1
 8006002:	930e      	str	r3, [sp, #56]	@ 0x38
 8006004:	9309      	str	r3, [sp, #36]	@ 0x24
 8006006:	2200      	movs	r2, #0
 8006008:	3313      	adds	r3, #19
 800600a:	e7cf      	b.n	8005fac <_dtoa_r+0x24c>
 800600c:	2301      	movs	r3, #1
 800600e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006010:	3b02      	subs	r3, #2
 8006012:	e7f6      	b.n	8006002 <_dtoa_r+0x2a2>
 8006014:	3101      	adds	r1, #1
 8006016:	0052      	lsls	r2, r2, #1
 8006018:	e7dc      	b.n	8005fd4 <_dtoa_r+0x274>
 800601a:	9b03      	ldr	r3, [sp, #12]
 800601c:	9a08      	ldr	r2, [sp, #32]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006024:	2b0e      	cmp	r3, #14
 8006026:	d900      	bls.n	800602a <_dtoa_r+0x2ca>
 8006028:	e0d9      	b.n	80061de <_dtoa_r+0x47e>
 800602a:	2c00      	cmp	r4, #0
 800602c:	d100      	bne.n	8006030 <_dtoa_r+0x2d0>
 800602e:	e0d6      	b.n	80061de <_dtoa_r+0x47e>
 8006030:	9b04      	ldr	r3, [sp, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	dd64      	ble.n	8006100 <_dtoa_r+0x3a0>
 8006036:	210f      	movs	r1, #15
 8006038:	9a04      	ldr	r2, [sp, #16]
 800603a:	4b2b      	ldr	r3, [pc, #172]	@ (80060e8 <_dtoa_r+0x388>)
 800603c:	400a      	ands	r2, r1
 800603e:	00d2      	lsls	r2, r2, #3
 8006040:	189b      	adds	r3, r3, r2
 8006042:	681e      	ldr	r6, [r3, #0]
 8006044:	685f      	ldr	r7, [r3, #4]
 8006046:	9b04      	ldr	r3, [sp, #16]
 8006048:	2402      	movs	r4, #2
 800604a:	111d      	asrs	r5, r3, #4
 800604c:	05db      	lsls	r3, r3, #23
 800604e:	d50a      	bpl.n	8006066 <_dtoa_r+0x306>
 8006050:	4b2a      	ldr	r3, [pc, #168]	@ (80060fc <_dtoa_r+0x39c>)
 8006052:	400d      	ands	r5, r1
 8006054:	6a1a      	ldr	r2, [r3, #32]
 8006056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006058:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800605a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800605c:	f7fa fe84 	bl	8000d68 <__aeabi_ddiv>
 8006060:	900a      	str	r0, [sp, #40]	@ 0x28
 8006062:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006064:	3401      	adds	r4, #1
 8006066:	4b25      	ldr	r3, [pc, #148]	@ (80060fc <_dtoa_r+0x39c>)
 8006068:	930c      	str	r3, [sp, #48]	@ 0x30
 800606a:	2d00      	cmp	r5, #0
 800606c:	d108      	bne.n	8006080 <_dtoa_r+0x320>
 800606e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006070:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006072:	0032      	movs	r2, r6
 8006074:	003b      	movs	r3, r7
 8006076:	f7fa fe77 	bl	8000d68 <__aeabi_ddiv>
 800607a:	900a      	str	r0, [sp, #40]	@ 0x28
 800607c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800607e:	e05a      	b.n	8006136 <_dtoa_r+0x3d6>
 8006080:	2301      	movs	r3, #1
 8006082:	421d      	tst	r5, r3
 8006084:	d009      	beq.n	800609a <_dtoa_r+0x33a>
 8006086:	18e4      	adds	r4, r4, r3
 8006088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800608a:	0030      	movs	r0, r6
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	0039      	movs	r1, r7
 8006092:	f7fb faad 	bl	80015f0 <__aeabi_dmul>
 8006096:	0006      	movs	r6, r0
 8006098:	000f      	movs	r7, r1
 800609a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800609c:	106d      	asrs	r5, r5, #1
 800609e:	3308      	adds	r3, #8
 80060a0:	e7e2      	b.n	8006068 <_dtoa_r+0x308>
 80060a2:	46c0      	nop			@ (mov r8, r8)
 80060a4:	08007f59 	.word	0x08007f59
 80060a8:	08007f70 	.word	0x08007f70
 80060ac:	7ff00000 	.word	0x7ff00000
 80060b0:	0000270f 	.word	0x0000270f
 80060b4:	08007f55 	.word	0x08007f55
 80060b8:	08007f58 	.word	0x08007f58
 80060bc:	08007f29 	.word	0x08007f29
 80060c0:	08007f28 	.word	0x08007f28
 80060c4:	3ff00000 	.word	0x3ff00000
 80060c8:	fffffc01 	.word	0xfffffc01
 80060cc:	3ff80000 	.word	0x3ff80000
 80060d0:	636f4361 	.word	0x636f4361
 80060d4:	3fd287a7 	.word	0x3fd287a7
 80060d8:	8b60c8b3 	.word	0x8b60c8b3
 80060dc:	3fc68a28 	.word	0x3fc68a28
 80060e0:	509f79fb 	.word	0x509f79fb
 80060e4:	3fd34413 	.word	0x3fd34413
 80060e8:	08008068 	.word	0x08008068
 80060ec:	00000432 	.word	0x00000432
 80060f0:	00000412 	.word	0x00000412
 80060f4:	fe100000 	.word	0xfe100000
 80060f8:	08007fc8 	.word	0x08007fc8
 80060fc:	08008040 	.word	0x08008040
 8006100:	9b04      	ldr	r3, [sp, #16]
 8006102:	2402      	movs	r4, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d016      	beq.n	8006136 <_dtoa_r+0x3d6>
 8006108:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800610a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800610c:	220f      	movs	r2, #15
 800610e:	425d      	negs	r5, r3
 8006110:	402a      	ands	r2, r5
 8006112:	4bd7      	ldr	r3, [pc, #860]	@ (8006470 <_dtoa_r+0x710>)
 8006114:	00d2      	lsls	r2, r2, #3
 8006116:	189b      	adds	r3, r3, r2
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f7fb fa68 	bl	80015f0 <__aeabi_dmul>
 8006120:	2701      	movs	r7, #1
 8006122:	2300      	movs	r3, #0
 8006124:	900a      	str	r0, [sp, #40]	@ 0x28
 8006126:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006128:	4ed2      	ldr	r6, [pc, #840]	@ (8006474 <_dtoa_r+0x714>)
 800612a:	112d      	asrs	r5, r5, #4
 800612c:	2d00      	cmp	r5, #0
 800612e:	d000      	beq.n	8006132 <_dtoa_r+0x3d2>
 8006130:	e0ba      	b.n	80062a8 <_dtoa_r+0x548>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1a1      	bne.n	800607a <_dtoa_r+0x31a>
 8006136:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006138:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800613a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800613c:	2b00      	cmp	r3, #0
 800613e:	d100      	bne.n	8006142 <_dtoa_r+0x3e2>
 8006140:	e0bd      	b.n	80062be <_dtoa_r+0x55e>
 8006142:	2200      	movs	r2, #0
 8006144:	0030      	movs	r0, r6
 8006146:	0039      	movs	r1, r7
 8006148:	4bcb      	ldr	r3, [pc, #812]	@ (8006478 <_dtoa_r+0x718>)
 800614a:	f7fa f981 	bl	8000450 <__aeabi_dcmplt>
 800614e:	2800      	cmp	r0, #0
 8006150:	d100      	bne.n	8006154 <_dtoa_r+0x3f4>
 8006152:	e0b4      	b.n	80062be <_dtoa_r+0x55e>
 8006154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	d100      	bne.n	800615c <_dtoa_r+0x3fc>
 800615a:	e0b0      	b.n	80062be <_dtoa_r+0x55e>
 800615c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800615e:	2b00      	cmp	r3, #0
 8006160:	dd39      	ble.n	80061d6 <_dtoa_r+0x476>
 8006162:	9b04      	ldr	r3, [sp, #16]
 8006164:	2200      	movs	r2, #0
 8006166:	3b01      	subs	r3, #1
 8006168:	930c      	str	r3, [sp, #48]	@ 0x30
 800616a:	0030      	movs	r0, r6
 800616c:	4bc3      	ldr	r3, [pc, #780]	@ (800647c <_dtoa_r+0x71c>)
 800616e:	0039      	movs	r1, r7
 8006170:	f7fb fa3e 	bl	80015f0 <__aeabi_dmul>
 8006174:	900a      	str	r0, [sp, #40]	@ 0x28
 8006176:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006178:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800617a:	3401      	adds	r4, #1
 800617c:	0020      	movs	r0, r4
 800617e:	9311      	str	r3, [sp, #68]	@ 0x44
 8006180:	f7fc f8f8 	bl	8002374 <__aeabi_i2d>
 8006184:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006188:	f7fb fa32 	bl	80015f0 <__aeabi_dmul>
 800618c:	4bbc      	ldr	r3, [pc, #752]	@ (8006480 <_dtoa_r+0x720>)
 800618e:	2200      	movs	r2, #0
 8006190:	f7fa fa86 	bl	80006a0 <__aeabi_dadd>
 8006194:	4bbb      	ldr	r3, [pc, #748]	@ (8006484 <_dtoa_r+0x724>)
 8006196:	0006      	movs	r6, r0
 8006198:	18cf      	adds	r7, r1, r3
 800619a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800619c:	2b00      	cmp	r3, #0
 800619e:	d000      	beq.n	80061a2 <_dtoa_r+0x442>
 80061a0:	e091      	b.n	80062c6 <_dtoa_r+0x566>
 80061a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80061a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80061a6:	2200      	movs	r2, #0
 80061a8:	4bb7      	ldr	r3, [pc, #732]	@ (8006488 <_dtoa_r+0x728>)
 80061aa:	f7fb fce9 	bl	8001b80 <__aeabi_dsub>
 80061ae:	0032      	movs	r2, r6
 80061b0:	003b      	movs	r3, r7
 80061b2:	0004      	movs	r4, r0
 80061b4:	000d      	movs	r5, r1
 80061b6:	f7fa f95f 	bl	8000478 <__aeabi_dcmpgt>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d000      	beq.n	80061c0 <_dtoa_r+0x460>
 80061be:	e29d      	b.n	80066fc <_dtoa_r+0x99c>
 80061c0:	2180      	movs	r1, #128	@ 0x80
 80061c2:	0609      	lsls	r1, r1, #24
 80061c4:	187b      	adds	r3, r7, r1
 80061c6:	0032      	movs	r2, r6
 80061c8:	0020      	movs	r0, r4
 80061ca:	0029      	movs	r1, r5
 80061cc:	f7fa f940 	bl	8000450 <__aeabi_dcmplt>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d000      	beq.n	80061d6 <_dtoa_r+0x476>
 80061d4:	e130      	b.n	8006438 <_dtoa_r+0x6d8>
 80061d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80061d8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80061da:	930a      	str	r3, [sp, #40]	@ 0x28
 80061dc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80061de:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	da00      	bge.n	80061e6 <_dtoa_r+0x486>
 80061e4:	e177      	b.n	80064d6 <_dtoa_r+0x776>
 80061e6:	9a04      	ldr	r2, [sp, #16]
 80061e8:	2a0e      	cmp	r2, #14
 80061ea:	dd00      	ble.n	80061ee <_dtoa_r+0x48e>
 80061ec:	e173      	b.n	80064d6 <_dtoa_r+0x776>
 80061ee:	4ba0      	ldr	r3, [pc, #640]	@ (8006470 <_dtoa_r+0x710>)
 80061f0:	00d2      	lsls	r2, r2, #3
 80061f2:	189b      	adds	r3, r3, r2
 80061f4:	685c      	ldr	r4, [r3, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	9306      	str	r3, [sp, #24]
 80061fa:	9407      	str	r4, [sp, #28]
 80061fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da03      	bge.n	800620a <_dtoa_r+0x4aa>
 8006202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	dc00      	bgt.n	800620a <_dtoa_r+0x4aa>
 8006208:	e106      	b.n	8006418 <_dtoa_r+0x6b8>
 800620a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800620c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800620e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006210:	9d08      	ldr	r5, [sp, #32]
 8006212:	3b01      	subs	r3, #1
 8006214:	195b      	adds	r3, r3, r5
 8006216:	930a      	str	r3, [sp, #40]	@ 0x28
 8006218:	9a06      	ldr	r2, [sp, #24]
 800621a:	9b07      	ldr	r3, [sp, #28]
 800621c:	0030      	movs	r0, r6
 800621e:	0039      	movs	r1, r7
 8006220:	f7fa fda2 	bl	8000d68 <__aeabi_ddiv>
 8006224:	f7fc f86a 	bl	80022fc <__aeabi_d2iz>
 8006228:	9009      	str	r0, [sp, #36]	@ 0x24
 800622a:	f7fc f8a3 	bl	8002374 <__aeabi_i2d>
 800622e:	9a06      	ldr	r2, [sp, #24]
 8006230:	9b07      	ldr	r3, [sp, #28]
 8006232:	f7fb f9dd 	bl	80015f0 <__aeabi_dmul>
 8006236:	0002      	movs	r2, r0
 8006238:	000b      	movs	r3, r1
 800623a:	0030      	movs	r0, r6
 800623c:	0039      	movs	r1, r7
 800623e:	f7fb fc9f 	bl	8001b80 <__aeabi_dsub>
 8006242:	002b      	movs	r3, r5
 8006244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006246:	3501      	adds	r5, #1
 8006248:	3230      	adds	r2, #48	@ 0x30
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800624e:	002c      	movs	r4, r5
 8006250:	429a      	cmp	r2, r3
 8006252:	d000      	beq.n	8006256 <_dtoa_r+0x4f6>
 8006254:	e131      	b.n	80064ba <_dtoa_r+0x75a>
 8006256:	0002      	movs	r2, r0
 8006258:	000b      	movs	r3, r1
 800625a:	f7fa fa21 	bl	80006a0 <__aeabi_dadd>
 800625e:	9a06      	ldr	r2, [sp, #24]
 8006260:	9b07      	ldr	r3, [sp, #28]
 8006262:	0006      	movs	r6, r0
 8006264:	000f      	movs	r7, r1
 8006266:	f7fa f907 	bl	8000478 <__aeabi_dcmpgt>
 800626a:	2800      	cmp	r0, #0
 800626c:	d000      	beq.n	8006270 <_dtoa_r+0x510>
 800626e:	e10f      	b.n	8006490 <_dtoa_r+0x730>
 8006270:	9a06      	ldr	r2, [sp, #24]
 8006272:	9b07      	ldr	r3, [sp, #28]
 8006274:	0030      	movs	r0, r6
 8006276:	0039      	movs	r1, r7
 8006278:	f7fa f8e4 	bl	8000444 <__aeabi_dcmpeq>
 800627c:	2800      	cmp	r0, #0
 800627e:	d003      	beq.n	8006288 <_dtoa_r+0x528>
 8006280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006282:	07dd      	lsls	r5, r3, #31
 8006284:	d500      	bpl.n	8006288 <_dtoa_r+0x528>
 8006286:	e103      	b.n	8006490 <_dtoa_r+0x730>
 8006288:	9905      	ldr	r1, [sp, #20]
 800628a:	9803      	ldr	r0, [sp, #12]
 800628c:	f000 fca6 	bl	8006bdc <_Bfree>
 8006290:	2300      	movs	r3, #0
 8006292:	7023      	strb	r3, [r4, #0]
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006298:	3301      	adds	r3, #1
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d100      	bne.n	80062a4 <_dtoa_r+0x544>
 80062a2:	e5a7      	b.n	8005df4 <_dtoa_r+0x94>
 80062a4:	601c      	str	r4, [r3, #0]
 80062a6:	e5a5      	b.n	8005df4 <_dtoa_r+0x94>
 80062a8:	423d      	tst	r5, r7
 80062aa:	d005      	beq.n	80062b8 <_dtoa_r+0x558>
 80062ac:	6832      	ldr	r2, [r6, #0]
 80062ae:	6873      	ldr	r3, [r6, #4]
 80062b0:	f7fb f99e 	bl	80015f0 <__aeabi_dmul>
 80062b4:	003b      	movs	r3, r7
 80062b6:	3401      	adds	r4, #1
 80062b8:	106d      	asrs	r5, r5, #1
 80062ba:	3608      	adds	r6, #8
 80062bc:	e736      	b.n	800612c <_dtoa_r+0x3cc>
 80062be:	9b04      	ldr	r3, [sp, #16]
 80062c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80062c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c4:	e75a      	b.n	800617c <_dtoa_r+0x41c>
 80062c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80062c8:	4b69      	ldr	r3, [pc, #420]	@ (8006470 <_dtoa_r+0x710>)
 80062ca:	3a01      	subs	r2, #1
 80062cc:	00d2      	lsls	r2, r2, #3
 80062ce:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80062d0:	189b      	adds	r3, r3, r2
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2900      	cmp	r1, #0
 80062d8:	d04c      	beq.n	8006374 <_dtoa_r+0x614>
 80062da:	2000      	movs	r0, #0
 80062dc:	496b      	ldr	r1, [pc, #428]	@ (800648c <_dtoa_r+0x72c>)
 80062de:	f7fa fd43 	bl	8000d68 <__aeabi_ddiv>
 80062e2:	0032      	movs	r2, r6
 80062e4:	003b      	movs	r3, r7
 80062e6:	f7fb fc4b 	bl	8001b80 <__aeabi_dsub>
 80062ea:	9a08      	ldr	r2, [sp, #32]
 80062ec:	0006      	movs	r6, r0
 80062ee:	4694      	mov	ip, r2
 80062f0:	000f      	movs	r7, r1
 80062f2:	9b08      	ldr	r3, [sp, #32]
 80062f4:	9316      	str	r3, [sp, #88]	@ 0x58
 80062f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062f8:	4463      	add	r3, ip
 80062fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80062fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80062fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006300:	f7fb fffc 	bl	80022fc <__aeabi_d2iz>
 8006304:	0005      	movs	r5, r0
 8006306:	f7fc f835 	bl	8002374 <__aeabi_i2d>
 800630a:	0002      	movs	r2, r0
 800630c:	000b      	movs	r3, r1
 800630e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006310:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006312:	f7fb fc35 	bl	8001b80 <__aeabi_dsub>
 8006316:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006318:	3530      	adds	r5, #48	@ 0x30
 800631a:	1c5c      	adds	r4, r3, #1
 800631c:	701d      	strb	r5, [r3, #0]
 800631e:	0032      	movs	r2, r6
 8006320:	003b      	movs	r3, r7
 8006322:	900a      	str	r0, [sp, #40]	@ 0x28
 8006324:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006326:	f7fa f893 	bl	8000450 <__aeabi_dcmplt>
 800632a:	2800      	cmp	r0, #0
 800632c:	d16a      	bne.n	8006404 <_dtoa_r+0x6a4>
 800632e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006330:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006332:	2000      	movs	r0, #0
 8006334:	4950      	ldr	r1, [pc, #320]	@ (8006478 <_dtoa_r+0x718>)
 8006336:	f7fb fc23 	bl	8001b80 <__aeabi_dsub>
 800633a:	0032      	movs	r2, r6
 800633c:	003b      	movs	r3, r7
 800633e:	f7fa f887 	bl	8000450 <__aeabi_dcmplt>
 8006342:	2800      	cmp	r0, #0
 8006344:	d000      	beq.n	8006348 <_dtoa_r+0x5e8>
 8006346:	e0a5      	b.n	8006494 <_dtoa_r+0x734>
 8006348:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800634a:	42a3      	cmp	r3, r4
 800634c:	d100      	bne.n	8006350 <_dtoa_r+0x5f0>
 800634e:	e742      	b.n	80061d6 <_dtoa_r+0x476>
 8006350:	2200      	movs	r2, #0
 8006352:	0030      	movs	r0, r6
 8006354:	0039      	movs	r1, r7
 8006356:	4b49      	ldr	r3, [pc, #292]	@ (800647c <_dtoa_r+0x71c>)
 8006358:	f7fb f94a 	bl	80015f0 <__aeabi_dmul>
 800635c:	2200      	movs	r2, #0
 800635e:	0006      	movs	r6, r0
 8006360:	000f      	movs	r7, r1
 8006362:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006364:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006366:	4b45      	ldr	r3, [pc, #276]	@ (800647c <_dtoa_r+0x71c>)
 8006368:	f7fb f942 	bl	80015f0 <__aeabi_dmul>
 800636c:	9416      	str	r4, [sp, #88]	@ 0x58
 800636e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006370:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006372:	e7c3      	b.n	80062fc <_dtoa_r+0x59c>
 8006374:	0030      	movs	r0, r6
 8006376:	0039      	movs	r1, r7
 8006378:	f7fb f93a 	bl	80015f0 <__aeabi_dmul>
 800637c:	9d08      	ldr	r5, [sp, #32]
 800637e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006380:	002b      	movs	r3, r5
 8006382:	4694      	mov	ip, r2
 8006384:	9016      	str	r0, [sp, #88]	@ 0x58
 8006386:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006388:	4463      	add	r3, ip
 800638a:	9319      	str	r3, [sp, #100]	@ 0x64
 800638c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800638e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006390:	f7fb ffb4 	bl	80022fc <__aeabi_d2iz>
 8006394:	0004      	movs	r4, r0
 8006396:	f7fb ffed 	bl	8002374 <__aeabi_i2d>
 800639a:	000b      	movs	r3, r1
 800639c:	0002      	movs	r2, r0
 800639e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80063a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063a2:	f7fb fbed 	bl	8001b80 <__aeabi_dsub>
 80063a6:	3430      	adds	r4, #48	@ 0x30
 80063a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063aa:	702c      	strb	r4, [r5, #0]
 80063ac:	3501      	adds	r5, #1
 80063ae:	0006      	movs	r6, r0
 80063b0:	000f      	movs	r7, r1
 80063b2:	42ab      	cmp	r3, r5
 80063b4:	d129      	bne.n	800640a <_dtoa_r+0x6aa>
 80063b6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80063b8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80063ba:	9b08      	ldr	r3, [sp, #32]
 80063bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80063be:	469c      	mov	ip, r3
 80063c0:	2200      	movs	r2, #0
 80063c2:	4b32      	ldr	r3, [pc, #200]	@ (800648c <_dtoa_r+0x72c>)
 80063c4:	4464      	add	r4, ip
 80063c6:	f7fa f96b 	bl	80006a0 <__aeabi_dadd>
 80063ca:	0002      	movs	r2, r0
 80063cc:	000b      	movs	r3, r1
 80063ce:	0030      	movs	r0, r6
 80063d0:	0039      	movs	r1, r7
 80063d2:	f7fa f851 	bl	8000478 <__aeabi_dcmpgt>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d15c      	bne.n	8006494 <_dtoa_r+0x734>
 80063da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80063dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80063de:	2000      	movs	r0, #0
 80063e0:	492a      	ldr	r1, [pc, #168]	@ (800648c <_dtoa_r+0x72c>)
 80063e2:	f7fb fbcd 	bl	8001b80 <__aeabi_dsub>
 80063e6:	0002      	movs	r2, r0
 80063e8:	000b      	movs	r3, r1
 80063ea:	0030      	movs	r0, r6
 80063ec:	0039      	movs	r1, r7
 80063ee:	f7fa f82f 	bl	8000450 <__aeabi_dcmplt>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d100      	bne.n	80063f8 <_dtoa_r+0x698>
 80063f6:	e6ee      	b.n	80061d6 <_dtoa_r+0x476>
 80063f8:	0023      	movs	r3, r4
 80063fa:	3c01      	subs	r4, #1
 80063fc:	7822      	ldrb	r2, [r4, #0]
 80063fe:	2a30      	cmp	r2, #48	@ 0x30
 8006400:	d0fa      	beq.n	80063f8 <_dtoa_r+0x698>
 8006402:	001c      	movs	r4, r3
 8006404:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006406:	9304      	str	r3, [sp, #16]
 8006408:	e73e      	b.n	8006288 <_dtoa_r+0x528>
 800640a:	2200      	movs	r2, #0
 800640c:	4b1b      	ldr	r3, [pc, #108]	@ (800647c <_dtoa_r+0x71c>)
 800640e:	f7fb f8ef 	bl	80015f0 <__aeabi_dmul>
 8006412:	900a      	str	r0, [sp, #40]	@ 0x28
 8006414:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006416:	e7b9      	b.n	800638c <_dtoa_r+0x62c>
 8006418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10c      	bne.n	8006438 <_dtoa_r+0x6d8>
 800641e:	9806      	ldr	r0, [sp, #24]
 8006420:	9907      	ldr	r1, [sp, #28]
 8006422:	2200      	movs	r2, #0
 8006424:	4b18      	ldr	r3, [pc, #96]	@ (8006488 <_dtoa_r+0x728>)
 8006426:	f7fb f8e3 	bl	80015f0 <__aeabi_dmul>
 800642a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800642c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800642e:	f7fa f82d 	bl	800048c <__aeabi_dcmpge>
 8006432:	2800      	cmp	r0, #0
 8006434:	d100      	bne.n	8006438 <_dtoa_r+0x6d8>
 8006436:	e164      	b.n	8006702 <_dtoa_r+0x9a2>
 8006438:	2600      	movs	r6, #0
 800643a:	0037      	movs	r7, r6
 800643c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800643e:	9c08      	ldr	r4, [sp, #32]
 8006440:	43db      	mvns	r3, r3
 8006442:	930c      	str	r3, [sp, #48]	@ 0x30
 8006444:	2300      	movs	r3, #0
 8006446:	9304      	str	r3, [sp, #16]
 8006448:	0031      	movs	r1, r6
 800644a:	9803      	ldr	r0, [sp, #12]
 800644c:	f000 fbc6 	bl	8006bdc <_Bfree>
 8006450:	2f00      	cmp	r7, #0
 8006452:	d0d7      	beq.n	8006404 <_dtoa_r+0x6a4>
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d005      	beq.n	8006466 <_dtoa_r+0x706>
 800645a:	42bb      	cmp	r3, r7
 800645c:	d003      	beq.n	8006466 <_dtoa_r+0x706>
 800645e:	0019      	movs	r1, r3
 8006460:	9803      	ldr	r0, [sp, #12]
 8006462:	f000 fbbb 	bl	8006bdc <_Bfree>
 8006466:	0039      	movs	r1, r7
 8006468:	9803      	ldr	r0, [sp, #12]
 800646a:	f000 fbb7 	bl	8006bdc <_Bfree>
 800646e:	e7c9      	b.n	8006404 <_dtoa_r+0x6a4>
 8006470:	08008068 	.word	0x08008068
 8006474:	08008040 	.word	0x08008040
 8006478:	3ff00000 	.word	0x3ff00000
 800647c:	40240000 	.word	0x40240000
 8006480:	401c0000 	.word	0x401c0000
 8006484:	fcc00000 	.word	0xfcc00000
 8006488:	40140000 	.word	0x40140000
 800648c:	3fe00000 	.word	0x3fe00000
 8006490:	9b04      	ldr	r3, [sp, #16]
 8006492:	930c      	str	r3, [sp, #48]	@ 0x30
 8006494:	0023      	movs	r3, r4
 8006496:	001c      	movs	r4, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	781a      	ldrb	r2, [r3, #0]
 800649c:	2a39      	cmp	r2, #57	@ 0x39
 800649e:	d108      	bne.n	80064b2 <_dtoa_r+0x752>
 80064a0:	9a08      	ldr	r2, [sp, #32]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d1f7      	bne.n	8006496 <_dtoa_r+0x736>
 80064a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80064a8:	9908      	ldr	r1, [sp, #32]
 80064aa:	3201      	adds	r2, #1
 80064ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80064ae:	2230      	movs	r2, #48	@ 0x30
 80064b0:	700a      	strb	r2, [r1, #0]
 80064b2:	781a      	ldrb	r2, [r3, #0]
 80064b4:	3201      	adds	r2, #1
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	e7a4      	b.n	8006404 <_dtoa_r+0x6a4>
 80064ba:	2200      	movs	r2, #0
 80064bc:	4bc6      	ldr	r3, [pc, #792]	@ (80067d8 <_dtoa_r+0xa78>)
 80064be:	f7fb f897 	bl	80015f0 <__aeabi_dmul>
 80064c2:	2200      	movs	r2, #0
 80064c4:	2300      	movs	r3, #0
 80064c6:	0006      	movs	r6, r0
 80064c8:	000f      	movs	r7, r1
 80064ca:	f7f9 ffbb 	bl	8000444 <__aeabi_dcmpeq>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d100      	bne.n	80064d4 <_dtoa_r+0x774>
 80064d2:	e6a1      	b.n	8006218 <_dtoa_r+0x4b8>
 80064d4:	e6d8      	b.n	8006288 <_dtoa_r+0x528>
 80064d6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80064d8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80064da:	9c06      	ldr	r4, [sp, #24]
 80064dc:	2f00      	cmp	r7, #0
 80064de:	d014      	beq.n	800650a <_dtoa_r+0x7aa>
 80064e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80064e2:	2a01      	cmp	r2, #1
 80064e4:	dd00      	ble.n	80064e8 <_dtoa_r+0x788>
 80064e6:	e0c8      	b.n	800667a <_dtoa_r+0x91a>
 80064e8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	d100      	bne.n	80064f0 <_dtoa_r+0x790>
 80064ee:	e0be      	b.n	800666e <_dtoa_r+0x90e>
 80064f0:	4aba      	ldr	r2, [pc, #744]	@ (80067dc <_dtoa_r+0xa7c>)
 80064f2:	189b      	adds	r3, r3, r2
 80064f4:	9a06      	ldr	r2, [sp, #24]
 80064f6:	2101      	movs	r1, #1
 80064f8:	18d2      	adds	r2, r2, r3
 80064fa:	9206      	str	r2, [sp, #24]
 80064fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80064fe:	9803      	ldr	r0, [sp, #12]
 8006500:	18d3      	adds	r3, r2, r3
 8006502:	930d      	str	r3, [sp, #52]	@ 0x34
 8006504:	f000 fc22 	bl	8006d4c <__i2b>
 8006508:	0007      	movs	r7, r0
 800650a:	2c00      	cmp	r4, #0
 800650c:	d00e      	beq.n	800652c <_dtoa_r+0x7cc>
 800650e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006510:	2b00      	cmp	r3, #0
 8006512:	dd0b      	ble.n	800652c <_dtoa_r+0x7cc>
 8006514:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006516:	0023      	movs	r3, r4
 8006518:	4294      	cmp	r4, r2
 800651a:	dd00      	ble.n	800651e <_dtoa_r+0x7be>
 800651c:	0013      	movs	r3, r2
 800651e:	9a06      	ldr	r2, [sp, #24]
 8006520:	1ae4      	subs	r4, r4, r3
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	9206      	str	r2, [sp, #24]
 8006526:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	930d      	str	r3, [sp, #52]	@ 0x34
 800652c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01f      	beq.n	8006572 <_dtoa_r+0x812>
 8006532:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006534:	2b00      	cmp	r3, #0
 8006536:	d100      	bne.n	800653a <_dtoa_r+0x7da>
 8006538:	e0b5      	b.n	80066a6 <_dtoa_r+0x946>
 800653a:	2d00      	cmp	r5, #0
 800653c:	d010      	beq.n	8006560 <_dtoa_r+0x800>
 800653e:	0039      	movs	r1, r7
 8006540:	002a      	movs	r2, r5
 8006542:	9803      	ldr	r0, [sp, #12]
 8006544:	f000 fccc 	bl	8006ee0 <__pow5mult>
 8006548:	9a05      	ldr	r2, [sp, #20]
 800654a:	0001      	movs	r1, r0
 800654c:	0007      	movs	r7, r0
 800654e:	9803      	ldr	r0, [sp, #12]
 8006550:	f000 fc14 	bl	8006d7c <__multiply>
 8006554:	0006      	movs	r6, r0
 8006556:	9905      	ldr	r1, [sp, #20]
 8006558:	9803      	ldr	r0, [sp, #12]
 800655a:	f000 fb3f 	bl	8006bdc <_Bfree>
 800655e:	9605      	str	r6, [sp, #20]
 8006560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006562:	1b5a      	subs	r2, r3, r5
 8006564:	42ab      	cmp	r3, r5
 8006566:	d004      	beq.n	8006572 <_dtoa_r+0x812>
 8006568:	9905      	ldr	r1, [sp, #20]
 800656a:	9803      	ldr	r0, [sp, #12]
 800656c:	f000 fcb8 	bl	8006ee0 <__pow5mult>
 8006570:	9005      	str	r0, [sp, #20]
 8006572:	2101      	movs	r1, #1
 8006574:	9803      	ldr	r0, [sp, #12]
 8006576:	f000 fbe9 	bl	8006d4c <__i2b>
 800657a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800657c:	0006      	movs	r6, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d100      	bne.n	8006584 <_dtoa_r+0x824>
 8006582:	e1bc      	b.n	80068fe <_dtoa_r+0xb9e>
 8006584:	001a      	movs	r2, r3
 8006586:	0001      	movs	r1, r0
 8006588:	9803      	ldr	r0, [sp, #12]
 800658a:	f000 fca9 	bl	8006ee0 <__pow5mult>
 800658e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006590:	0006      	movs	r6, r0
 8006592:	2500      	movs	r5, #0
 8006594:	2b01      	cmp	r3, #1
 8006596:	dc16      	bgt.n	80065c6 <_dtoa_r+0x866>
 8006598:	2500      	movs	r5, #0
 800659a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800659c:	42ab      	cmp	r3, r5
 800659e:	d10e      	bne.n	80065be <_dtoa_r+0x85e>
 80065a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065a2:	031b      	lsls	r3, r3, #12
 80065a4:	42ab      	cmp	r3, r5
 80065a6:	d10a      	bne.n	80065be <_dtoa_r+0x85e>
 80065a8:	4b8d      	ldr	r3, [pc, #564]	@ (80067e0 <_dtoa_r+0xa80>)
 80065aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80065ac:	4213      	tst	r3, r2
 80065ae:	d006      	beq.n	80065be <_dtoa_r+0x85e>
 80065b0:	9b06      	ldr	r3, [sp, #24]
 80065b2:	3501      	adds	r5, #1
 80065b4:	3301      	adds	r3, #1
 80065b6:	9306      	str	r3, [sp, #24]
 80065b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065ba:	3301      	adds	r3, #1
 80065bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80065be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065c0:	2001      	movs	r0, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <_dtoa_r+0x878>
 80065c6:	6933      	ldr	r3, [r6, #16]
 80065c8:	3303      	adds	r3, #3
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	18f3      	adds	r3, r6, r3
 80065ce:	6858      	ldr	r0, [r3, #4]
 80065d0:	f000 fb6c 	bl	8006cac <__hi0bits>
 80065d4:	2320      	movs	r3, #32
 80065d6:	1a18      	subs	r0, r3, r0
 80065d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065da:	1818      	adds	r0, r3, r0
 80065dc:	0002      	movs	r2, r0
 80065de:	231f      	movs	r3, #31
 80065e0:	401a      	ands	r2, r3
 80065e2:	4218      	tst	r0, r3
 80065e4:	d065      	beq.n	80066b2 <_dtoa_r+0x952>
 80065e6:	3301      	adds	r3, #1
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	dd5d      	ble.n	80066aa <_dtoa_r+0x94a>
 80065ee:	231c      	movs	r3, #28
 80065f0:	1a9b      	subs	r3, r3, r2
 80065f2:	9a06      	ldr	r2, [sp, #24]
 80065f4:	18e4      	adds	r4, r4, r3
 80065f6:	18d2      	adds	r2, r2, r3
 80065f8:	9206      	str	r2, [sp, #24]
 80065fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065fc:	18d3      	adds	r3, r2, r3
 80065fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8006600:	9b06      	ldr	r3, [sp, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	dd05      	ble.n	8006612 <_dtoa_r+0x8b2>
 8006606:	001a      	movs	r2, r3
 8006608:	9905      	ldr	r1, [sp, #20]
 800660a:	9803      	ldr	r0, [sp, #12]
 800660c:	f000 fcc4 	bl	8006f98 <__lshift>
 8006610:	9005      	str	r0, [sp, #20]
 8006612:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006614:	2b00      	cmp	r3, #0
 8006616:	dd05      	ble.n	8006624 <_dtoa_r+0x8c4>
 8006618:	0031      	movs	r1, r6
 800661a:	001a      	movs	r2, r3
 800661c:	9803      	ldr	r0, [sp, #12]
 800661e:	f000 fcbb 	bl	8006f98 <__lshift>
 8006622:	0006      	movs	r6, r0
 8006624:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006626:	2b00      	cmp	r3, #0
 8006628:	d045      	beq.n	80066b6 <_dtoa_r+0x956>
 800662a:	0031      	movs	r1, r6
 800662c:	9805      	ldr	r0, [sp, #20]
 800662e:	f000 fd1f 	bl	8007070 <__mcmp>
 8006632:	2800      	cmp	r0, #0
 8006634:	da3f      	bge.n	80066b6 <_dtoa_r+0x956>
 8006636:	9b04      	ldr	r3, [sp, #16]
 8006638:	220a      	movs	r2, #10
 800663a:	3b01      	subs	r3, #1
 800663c:	930c      	str	r3, [sp, #48]	@ 0x30
 800663e:	9905      	ldr	r1, [sp, #20]
 8006640:	2300      	movs	r3, #0
 8006642:	9803      	ldr	r0, [sp, #12]
 8006644:	f000 faee 	bl	8006c24 <__multadd>
 8006648:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800664a:	9005      	str	r0, [sp, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d100      	bne.n	8006652 <_dtoa_r+0x8f2>
 8006650:	e15c      	b.n	800690c <_dtoa_r+0xbac>
 8006652:	2300      	movs	r3, #0
 8006654:	0039      	movs	r1, r7
 8006656:	220a      	movs	r2, #10
 8006658:	9803      	ldr	r0, [sp, #12]
 800665a:	f000 fae3 	bl	8006c24 <__multadd>
 800665e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006660:	0007      	movs	r7, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	dc55      	bgt.n	8006712 <_dtoa_r+0x9b2>
 8006666:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006668:	2b02      	cmp	r3, #2
 800666a:	dc2d      	bgt.n	80066c8 <_dtoa_r+0x968>
 800666c:	e051      	b.n	8006712 <_dtoa_r+0x9b2>
 800666e:	2336      	movs	r3, #54	@ 0x36
 8006670:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006672:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006674:	9c06      	ldr	r4, [sp, #24]
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	e73c      	b.n	80064f4 <_dtoa_r+0x794>
 800667a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800667c:	1e5d      	subs	r5, r3, #1
 800667e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006680:	42ab      	cmp	r3, r5
 8006682:	db08      	blt.n	8006696 <_dtoa_r+0x936>
 8006684:	1b5d      	subs	r5, r3, r5
 8006686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006688:	9c06      	ldr	r4, [sp, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	db00      	blt.n	8006690 <_dtoa_r+0x930>
 800668e:	e731      	b.n	80064f4 <_dtoa_r+0x794>
 8006690:	1ae4      	subs	r4, r4, r3
 8006692:	2300      	movs	r3, #0
 8006694:	e72e      	b.n	80064f4 <_dtoa_r+0x794>
 8006696:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006698:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800669a:	1aeb      	subs	r3, r5, r3
 800669c:	18d3      	adds	r3, r2, r3
 800669e:	950f      	str	r5, [sp, #60]	@ 0x3c
 80066a0:	9314      	str	r3, [sp, #80]	@ 0x50
 80066a2:	2500      	movs	r5, #0
 80066a4:	e7ef      	b.n	8006686 <_dtoa_r+0x926>
 80066a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80066a8:	e75e      	b.n	8006568 <_dtoa_r+0x808>
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d0a8      	beq.n	8006600 <_dtoa_r+0x8a0>
 80066ae:	331c      	adds	r3, #28
 80066b0:	e79f      	b.n	80065f2 <_dtoa_r+0x892>
 80066b2:	0013      	movs	r3, r2
 80066b4:	e7fb      	b.n	80066ae <_dtoa_r+0x94e>
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80066ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80066be:	2b00      	cmp	r3, #0
 80066c0:	dc23      	bgt.n	800670a <_dtoa_r+0x9aa>
 80066c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	dd20      	ble.n	800670a <_dtoa_r+0x9aa>
 80066c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d000      	beq.n	80066d0 <_dtoa_r+0x970>
 80066ce:	e6b5      	b.n	800643c <_dtoa_r+0x6dc>
 80066d0:	0031      	movs	r1, r6
 80066d2:	2205      	movs	r2, #5
 80066d4:	9803      	ldr	r0, [sp, #12]
 80066d6:	f000 faa5 	bl	8006c24 <__multadd>
 80066da:	0006      	movs	r6, r0
 80066dc:	0001      	movs	r1, r0
 80066de:	9805      	ldr	r0, [sp, #20]
 80066e0:	f000 fcc6 	bl	8007070 <__mcmp>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	dc00      	bgt.n	80066ea <_dtoa_r+0x98a>
 80066e8:	e6a8      	b.n	800643c <_dtoa_r+0x6dc>
 80066ea:	9b08      	ldr	r3, [sp, #32]
 80066ec:	9a08      	ldr	r2, [sp, #32]
 80066ee:	1c5c      	adds	r4, r3, #1
 80066f0:	2331      	movs	r3, #49	@ 0x31
 80066f2:	7013      	strb	r3, [r2, #0]
 80066f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066f6:	3301      	adds	r3, #1
 80066f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80066fa:	e6a3      	b.n	8006444 <_dtoa_r+0x6e4>
 80066fc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80066fe:	0037      	movs	r7, r6
 8006700:	e7f3      	b.n	80066ea <_dtoa_r+0x98a>
 8006702:	9b04      	ldr	r3, [sp, #16]
 8006704:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8006706:	930c      	str	r3, [sp, #48]	@ 0x30
 8006708:	e7f9      	b.n	80066fe <_dtoa_r+0x99e>
 800670a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d100      	bne.n	8006712 <_dtoa_r+0x9b2>
 8006710:	e100      	b.n	8006914 <_dtoa_r+0xbb4>
 8006712:	2c00      	cmp	r4, #0
 8006714:	dd05      	ble.n	8006722 <_dtoa_r+0x9c2>
 8006716:	0039      	movs	r1, r7
 8006718:	0022      	movs	r2, r4
 800671a:	9803      	ldr	r0, [sp, #12]
 800671c:	f000 fc3c 	bl	8006f98 <__lshift>
 8006720:	0007      	movs	r7, r0
 8006722:	0038      	movs	r0, r7
 8006724:	2d00      	cmp	r5, #0
 8006726:	d018      	beq.n	800675a <_dtoa_r+0x9fa>
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	9803      	ldr	r0, [sp, #12]
 800672c:	f000 fa12 	bl	8006b54 <_Balloc>
 8006730:	1e04      	subs	r4, r0, #0
 8006732:	d105      	bne.n	8006740 <_dtoa_r+0x9e0>
 8006734:	0022      	movs	r2, r4
 8006736:	4b2b      	ldr	r3, [pc, #172]	@ (80067e4 <_dtoa_r+0xa84>)
 8006738:	482b      	ldr	r0, [pc, #172]	@ (80067e8 <_dtoa_r+0xa88>)
 800673a:	492c      	ldr	r1, [pc, #176]	@ (80067ec <_dtoa_r+0xa8c>)
 800673c:	f7ff fb25 	bl	8005d8a <_dtoa_r+0x2a>
 8006740:	0039      	movs	r1, r7
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	310c      	adds	r1, #12
 8006746:	3202      	adds	r2, #2
 8006748:	0092      	lsls	r2, r2, #2
 800674a:	300c      	adds	r0, #12
 800674c:	f000 ffda 	bl	8007704 <memcpy>
 8006750:	2201      	movs	r2, #1
 8006752:	0021      	movs	r1, r4
 8006754:	9803      	ldr	r0, [sp, #12]
 8006756:	f000 fc1f 	bl	8006f98 <__lshift>
 800675a:	9b08      	ldr	r3, [sp, #32]
 800675c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800675e:	9306      	str	r3, [sp, #24]
 8006760:	3b01      	subs	r3, #1
 8006762:	189b      	adds	r3, r3, r2
 8006764:	2201      	movs	r2, #1
 8006766:	9704      	str	r7, [sp, #16]
 8006768:	0007      	movs	r7, r0
 800676a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800676c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800676e:	4013      	ands	r3, r2
 8006770:	930e      	str	r3, [sp, #56]	@ 0x38
 8006772:	0031      	movs	r1, r6
 8006774:	9805      	ldr	r0, [sp, #20]
 8006776:	f7ff fa65 	bl	8005c44 <quorem>
 800677a:	9904      	ldr	r1, [sp, #16]
 800677c:	0005      	movs	r5, r0
 800677e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006780:	9805      	ldr	r0, [sp, #20]
 8006782:	f000 fc75 	bl	8007070 <__mcmp>
 8006786:	003a      	movs	r2, r7
 8006788:	900d      	str	r0, [sp, #52]	@ 0x34
 800678a:	0031      	movs	r1, r6
 800678c:	9803      	ldr	r0, [sp, #12]
 800678e:	f000 fc8b 	bl	80070a8 <__mdiff>
 8006792:	2201      	movs	r2, #1
 8006794:	68c3      	ldr	r3, [r0, #12]
 8006796:	0004      	movs	r4, r0
 8006798:	3530      	adds	r5, #48	@ 0x30
 800679a:	9209      	str	r2, [sp, #36]	@ 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <_dtoa_r+0xa4a>
 80067a0:	0001      	movs	r1, r0
 80067a2:	9805      	ldr	r0, [sp, #20]
 80067a4:	f000 fc64 	bl	8007070 <__mcmp>
 80067a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80067aa:	0021      	movs	r1, r4
 80067ac:	9803      	ldr	r0, [sp, #12]
 80067ae:	f000 fa15 	bl	8006bdc <_Bfree>
 80067b2:	9b06      	ldr	r3, [sp, #24]
 80067b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067b6:	1c5c      	adds	r4, r3, #1
 80067b8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80067ba:	4313      	orrs	r3, r2
 80067bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067be:	4313      	orrs	r3, r2
 80067c0:	d116      	bne.n	80067f0 <_dtoa_r+0xa90>
 80067c2:	2d39      	cmp	r5, #57	@ 0x39
 80067c4:	d02f      	beq.n	8006826 <_dtoa_r+0xac6>
 80067c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	dd01      	ble.n	80067d0 <_dtoa_r+0xa70>
 80067cc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80067ce:	3531      	adds	r5, #49	@ 0x31
 80067d0:	9b06      	ldr	r3, [sp, #24]
 80067d2:	701d      	strb	r5, [r3, #0]
 80067d4:	e638      	b.n	8006448 <_dtoa_r+0x6e8>
 80067d6:	46c0      	nop			@ (mov r8, r8)
 80067d8:	40240000 	.word	0x40240000
 80067dc:	00000433 	.word	0x00000433
 80067e0:	7ff00000 	.word	0x7ff00000
 80067e4:	08007fc8 	.word	0x08007fc8
 80067e8:	08007f70 	.word	0x08007f70
 80067ec:	000002ef 	.word	0x000002ef
 80067f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	db04      	blt.n	8006800 <_dtoa_r+0xaa0>
 80067f6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80067f8:	4313      	orrs	r3, r2
 80067fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067fc:	4313      	orrs	r3, r2
 80067fe:	d11e      	bne.n	800683e <_dtoa_r+0xade>
 8006800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006802:	2b00      	cmp	r3, #0
 8006804:	dde4      	ble.n	80067d0 <_dtoa_r+0xa70>
 8006806:	9905      	ldr	r1, [sp, #20]
 8006808:	2201      	movs	r2, #1
 800680a:	9803      	ldr	r0, [sp, #12]
 800680c:	f000 fbc4 	bl	8006f98 <__lshift>
 8006810:	0031      	movs	r1, r6
 8006812:	9005      	str	r0, [sp, #20]
 8006814:	f000 fc2c 	bl	8007070 <__mcmp>
 8006818:	2800      	cmp	r0, #0
 800681a:	dc02      	bgt.n	8006822 <_dtoa_r+0xac2>
 800681c:	d1d8      	bne.n	80067d0 <_dtoa_r+0xa70>
 800681e:	07eb      	lsls	r3, r5, #31
 8006820:	d5d6      	bpl.n	80067d0 <_dtoa_r+0xa70>
 8006822:	2d39      	cmp	r5, #57	@ 0x39
 8006824:	d1d2      	bne.n	80067cc <_dtoa_r+0xa6c>
 8006826:	2339      	movs	r3, #57	@ 0x39
 8006828:	9a06      	ldr	r2, [sp, #24]
 800682a:	7013      	strb	r3, [r2, #0]
 800682c:	0023      	movs	r3, r4
 800682e:	001c      	movs	r4, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	781a      	ldrb	r2, [r3, #0]
 8006834:	2a39      	cmp	r2, #57	@ 0x39
 8006836:	d04f      	beq.n	80068d8 <_dtoa_r+0xb78>
 8006838:	3201      	adds	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	e604      	b.n	8006448 <_dtoa_r+0x6e8>
 800683e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	dd03      	ble.n	800684c <_dtoa_r+0xaec>
 8006844:	2d39      	cmp	r5, #57	@ 0x39
 8006846:	d0ee      	beq.n	8006826 <_dtoa_r+0xac6>
 8006848:	3501      	adds	r5, #1
 800684a:	e7c1      	b.n	80067d0 <_dtoa_r+0xa70>
 800684c:	9b06      	ldr	r3, [sp, #24]
 800684e:	9a06      	ldr	r2, [sp, #24]
 8006850:	701d      	strb	r5, [r3, #0]
 8006852:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006854:	4293      	cmp	r3, r2
 8006856:	d02a      	beq.n	80068ae <_dtoa_r+0xb4e>
 8006858:	2300      	movs	r3, #0
 800685a:	220a      	movs	r2, #10
 800685c:	9905      	ldr	r1, [sp, #20]
 800685e:	9803      	ldr	r0, [sp, #12]
 8006860:	f000 f9e0 	bl	8006c24 <__multadd>
 8006864:	9b04      	ldr	r3, [sp, #16]
 8006866:	9005      	str	r0, [sp, #20]
 8006868:	42bb      	cmp	r3, r7
 800686a:	d109      	bne.n	8006880 <_dtoa_r+0xb20>
 800686c:	2300      	movs	r3, #0
 800686e:	220a      	movs	r2, #10
 8006870:	9904      	ldr	r1, [sp, #16]
 8006872:	9803      	ldr	r0, [sp, #12]
 8006874:	f000 f9d6 	bl	8006c24 <__multadd>
 8006878:	9004      	str	r0, [sp, #16]
 800687a:	0007      	movs	r7, r0
 800687c:	9406      	str	r4, [sp, #24]
 800687e:	e778      	b.n	8006772 <_dtoa_r+0xa12>
 8006880:	9904      	ldr	r1, [sp, #16]
 8006882:	2300      	movs	r3, #0
 8006884:	220a      	movs	r2, #10
 8006886:	9803      	ldr	r0, [sp, #12]
 8006888:	f000 f9cc 	bl	8006c24 <__multadd>
 800688c:	2300      	movs	r3, #0
 800688e:	9004      	str	r0, [sp, #16]
 8006890:	220a      	movs	r2, #10
 8006892:	0039      	movs	r1, r7
 8006894:	9803      	ldr	r0, [sp, #12]
 8006896:	f000 f9c5 	bl	8006c24 <__multadd>
 800689a:	e7ee      	b.n	800687a <_dtoa_r+0xb1a>
 800689c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800689e:	2401      	movs	r4, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dd00      	ble.n	80068a6 <_dtoa_r+0xb46>
 80068a4:	001c      	movs	r4, r3
 80068a6:	9b08      	ldr	r3, [sp, #32]
 80068a8:	191c      	adds	r4, r3, r4
 80068aa:	2300      	movs	r3, #0
 80068ac:	9304      	str	r3, [sp, #16]
 80068ae:	9905      	ldr	r1, [sp, #20]
 80068b0:	2201      	movs	r2, #1
 80068b2:	9803      	ldr	r0, [sp, #12]
 80068b4:	f000 fb70 	bl	8006f98 <__lshift>
 80068b8:	0031      	movs	r1, r6
 80068ba:	9005      	str	r0, [sp, #20]
 80068bc:	f000 fbd8 	bl	8007070 <__mcmp>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	dcb3      	bgt.n	800682c <_dtoa_r+0xacc>
 80068c4:	d101      	bne.n	80068ca <_dtoa_r+0xb6a>
 80068c6:	07ed      	lsls	r5, r5, #31
 80068c8:	d4b0      	bmi.n	800682c <_dtoa_r+0xacc>
 80068ca:	0023      	movs	r3, r4
 80068cc:	001c      	movs	r4, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	781a      	ldrb	r2, [r3, #0]
 80068d2:	2a30      	cmp	r2, #48	@ 0x30
 80068d4:	d0fa      	beq.n	80068cc <_dtoa_r+0xb6c>
 80068d6:	e5b7      	b.n	8006448 <_dtoa_r+0x6e8>
 80068d8:	9a08      	ldr	r2, [sp, #32]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d1a7      	bne.n	800682e <_dtoa_r+0xace>
 80068de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068e0:	3301      	adds	r3, #1
 80068e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80068e4:	2331      	movs	r3, #49	@ 0x31
 80068e6:	7013      	strb	r3, [r2, #0]
 80068e8:	e5ae      	b.n	8006448 <_dtoa_r+0x6e8>
 80068ea:	4b15      	ldr	r3, [pc, #84]	@ (8006940 <_dtoa_r+0xbe0>)
 80068ec:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80068ee:	9308      	str	r3, [sp, #32]
 80068f0:	4b14      	ldr	r3, [pc, #80]	@ (8006944 <_dtoa_r+0xbe4>)
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d001      	beq.n	80068fa <_dtoa_r+0xb9a>
 80068f6:	f7ff fa7b 	bl	8005df0 <_dtoa_r+0x90>
 80068fa:	f7ff fa7b 	bl	8005df4 <_dtoa_r+0x94>
 80068fe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006900:	2b01      	cmp	r3, #1
 8006902:	dc00      	bgt.n	8006906 <_dtoa_r+0xba6>
 8006904:	e648      	b.n	8006598 <_dtoa_r+0x838>
 8006906:	2001      	movs	r0, #1
 8006908:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800690a:	e665      	b.n	80065d8 <_dtoa_r+0x878>
 800690c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800690e:	2b00      	cmp	r3, #0
 8006910:	dc00      	bgt.n	8006914 <_dtoa_r+0xbb4>
 8006912:	e6d6      	b.n	80066c2 <_dtoa_r+0x962>
 8006914:	2400      	movs	r4, #0
 8006916:	0031      	movs	r1, r6
 8006918:	9805      	ldr	r0, [sp, #20]
 800691a:	f7ff f993 	bl	8005c44 <quorem>
 800691e:	9b08      	ldr	r3, [sp, #32]
 8006920:	3030      	adds	r0, #48	@ 0x30
 8006922:	5518      	strb	r0, [r3, r4]
 8006924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006926:	3401      	adds	r4, #1
 8006928:	0005      	movs	r5, r0
 800692a:	429c      	cmp	r4, r3
 800692c:	dab6      	bge.n	800689c <_dtoa_r+0xb3c>
 800692e:	2300      	movs	r3, #0
 8006930:	220a      	movs	r2, #10
 8006932:	9905      	ldr	r1, [sp, #20]
 8006934:	9803      	ldr	r0, [sp, #12]
 8006936:	f000 f975 	bl	8006c24 <__multadd>
 800693a:	9005      	str	r0, [sp, #20]
 800693c:	e7eb      	b.n	8006916 <_dtoa_r+0xbb6>
 800693e:	46c0      	nop			@ (mov r8, r8)
 8006940:	08007f4c 	.word	0x08007f4c
 8006944:	08007f54 	.word	0x08007f54

08006948 <_free_r>:
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	0005      	movs	r5, r0
 800694c:	1e0c      	subs	r4, r1, #0
 800694e:	d010      	beq.n	8006972 <_free_r+0x2a>
 8006950:	3c04      	subs	r4, #4
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	da00      	bge.n	800695a <_free_r+0x12>
 8006958:	18e4      	adds	r4, r4, r3
 800695a:	0028      	movs	r0, r5
 800695c:	f000 f8ea 	bl	8006b34 <__malloc_lock>
 8006960:	4a1d      	ldr	r2, [pc, #116]	@ (80069d8 <_free_r+0x90>)
 8006962:	6813      	ldr	r3, [r2, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d105      	bne.n	8006974 <_free_r+0x2c>
 8006968:	6063      	str	r3, [r4, #4]
 800696a:	6014      	str	r4, [r2, #0]
 800696c:	0028      	movs	r0, r5
 800696e:	f000 f8e9 	bl	8006b44 <__malloc_unlock>
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	42a3      	cmp	r3, r4
 8006976:	d908      	bls.n	800698a <_free_r+0x42>
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	1821      	adds	r1, r4, r0
 800697c:	428b      	cmp	r3, r1
 800697e:	d1f3      	bne.n	8006968 <_free_r+0x20>
 8006980:	6819      	ldr	r1, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	1809      	adds	r1, r1, r0
 8006986:	6021      	str	r1, [r4, #0]
 8006988:	e7ee      	b.n	8006968 <_free_r+0x20>
 800698a:	001a      	movs	r2, r3
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <_free_r+0x4e>
 8006992:	42a3      	cmp	r3, r4
 8006994:	d9f9      	bls.n	800698a <_free_r+0x42>
 8006996:	6811      	ldr	r1, [r2, #0]
 8006998:	1850      	adds	r0, r2, r1
 800699a:	42a0      	cmp	r0, r4
 800699c:	d10b      	bne.n	80069b6 <_free_r+0x6e>
 800699e:	6820      	ldr	r0, [r4, #0]
 80069a0:	1809      	adds	r1, r1, r0
 80069a2:	1850      	adds	r0, r2, r1
 80069a4:	6011      	str	r1, [r2, #0]
 80069a6:	4283      	cmp	r3, r0
 80069a8:	d1e0      	bne.n	800696c <_free_r+0x24>
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	1841      	adds	r1, r0, r1
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	6053      	str	r3, [r2, #4]
 80069b4:	e7da      	b.n	800696c <_free_r+0x24>
 80069b6:	42a0      	cmp	r0, r4
 80069b8:	d902      	bls.n	80069c0 <_free_r+0x78>
 80069ba:	230c      	movs	r3, #12
 80069bc:	602b      	str	r3, [r5, #0]
 80069be:	e7d5      	b.n	800696c <_free_r+0x24>
 80069c0:	6820      	ldr	r0, [r4, #0]
 80069c2:	1821      	adds	r1, r4, r0
 80069c4:	428b      	cmp	r3, r1
 80069c6:	d103      	bne.n	80069d0 <_free_r+0x88>
 80069c8:	6819      	ldr	r1, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	1809      	adds	r1, r1, r0
 80069ce:	6021      	str	r1, [r4, #0]
 80069d0:	6063      	str	r3, [r4, #4]
 80069d2:	6054      	str	r4, [r2, #4]
 80069d4:	e7ca      	b.n	800696c <_free_r+0x24>
 80069d6:	46c0      	nop			@ (mov r8, r8)
 80069d8:	20000410 	.word	0x20000410

080069dc <malloc>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	4b03      	ldr	r3, [pc, #12]	@ (80069ec <malloc+0x10>)
 80069e0:	0001      	movs	r1, r0
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	f000 f826 	bl	8006a34 <_malloc_r>
 80069e8:	bd10      	pop	{r4, pc}
 80069ea:	46c0      	nop			@ (mov r8, r8)
 80069ec:	2000001c 	.word	0x2000001c

080069f0 <sbrk_aligned>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006a30 <sbrk_aligned+0x40>)
 80069f4:	000d      	movs	r5, r1
 80069f6:	6831      	ldr	r1, [r6, #0]
 80069f8:	0004      	movs	r4, r0
 80069fa:	2900      	cmp	r1, #0
 80069fc:	d102      	bne.n	8006a04 <sbrk_aligned+0x14>
 80069fe:	f000 fe6f 	bl	80076e0 <_sbrk_r>
 8006a02:	6030      	str	r0, [r6, #0]
 8006a04:	0029      	movs	r1, r5
 8006a06:	0020      	movs	r0, r4
 8006a08:	f000 fe6a 	bl	80076e0 <_sbrk_r>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d103      	bne.n	8006a18 <sbrk_aligned+0x28>
 8006a10:	2501      	movs	r5, #1
 8006a12:	426d      	negs	r5, r5
 8006a14:	0028      	movs	r0, r5
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
 8006a18:	2303      	movs	r3, #3
 8006a1a:	1cc5      	adds	r5, r0, #3
 8006a1c:	439d      	bics	r5, r3
 8006a1e:	42a8      	cmp	r0, r5
 8006a20:	d0f8      	beq.n	8006a14 <sbrk_aligned+0x24>
 8006a22:	1a29      	subs	r1, r5, r0
 8006a24:	0020      	movs	r0, r4
 8006a26:	f000 fe5b 	bl	80076e0 <_sbrk_r>
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d1f2      	bne.n	8006a14 <sbrk_aligned+0x24>
 8006a2e:	e7ef      	b.n	8006a10 <sbrk_aligned+0x20>
 8006a30:	2000040c 	.word	0x2000040c

08006a34 <_malloc_r>:
 8006a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a36:	2203      	movs	r2, #3
 8006a38:	1ccb      	adds	r3, r1, #3
 8006a3a:	4393      	bics	r3, r2
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	0005      	movs	r5, r0
 8006a40:	001f      	movs	r7, r3
 8006a42:	2b0c      	cmp	r3, #12
 8006a44:	d234      	bcs.n	8006ab0 <_malloc_r+0x7c>
 8006a46:	270c      	movs	r7, #12
 8006a48:	42b9      	cmp	r1, r7
 8006a4a:	d833      	bhi.n	8006ab4 <_malloc_r+0x80>
 8006a4c:	0028      	movs	r0, r5
 8006a4e:	f000 f871 	bl	8006b34 <__malloc_lock>
 8006a52:	4e37      	ldr	r6, [pc, #220]	@ (8006b30 <_malloc_r+0xfc>)
 8006a54:	6833      	ldr	r3, [r6, #0]
 8006a56:	001c      	movs	r4, r3
 8006a58:	2c00      	cmp	r4, #0
 8006a5a:	d12f      	bne.n	8006abc <_malloc_r+0x88>
 8006a5c:	0039      	movs	r1, r7
 8006a5e:	0028      	movs	r0, r5
 8006a60:	f7ff ffc6 	bl	80069f0 <sbrk_aligned>
 8006a64:	0004      	movs	r4, r0
 8006a66:	1c43      	adds	r3, r0, #1
 8006a68:	d15f      	bne.n	8006b2a <_malloc_r+0xf6>
 8006a6a:	6834      	ldr	r4, [r6, #0]
 8006a6c:	9400      	str	r4, [sp, #0]
 8006a6e:	9b00      	ldr	r3, [sp, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d14a      	bne.n	8006b0a <_malloc_r+0xd6>
 8006a74:	2c00      	cmp	r4, #0
 8006a76:	d052      	beq.n	8006b1e <_malloc_r+0xea>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	0028      	movs	r0, r5
 8006a7c:	18e3      	adds	r3, r4, r3
 8006a7e:	9900      	ldr	r1, [sp, #0]
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	f000 fe2d 	bl	80076e0 <_sbrk_r>
 8006a86:	9b01      	ldr	r3, [sp, #4]
 8006a88:	4283      	cmp	r3, r0
 8006a8a:	d148      	bne.n	8006b1e <_malloc_r+0xea>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	0028      	movs	r0, r5
 8006a90:	1aff      	subs	r7, r7, r3
 8006a92:	0039      	movs	r1, r7
 8006a94:	f7ff ffac 	bl	80069f0 <sbrk_aligned>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d040      	beq.n	8006b1e <_malloc_r+0xea>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	19db      	adds	r3, r3, r7
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	6833      	ldr	r3, [r6, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	d133      	bne.n	8006b12 <_malloc_r+0xde>
 8006aaa:	9b00      	ldr	r3, [sp, #0]
 8006aac:	6033      	str	r3, [r6, #0]
 8006aae:	e019      	b.n	8006ae4 <_malloc_r+0xb0>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dac9      	bge.n	8006a48 <_malloc_r+0x14>
 8006ab4:	230c      	movs	r3, #12
 8006ab6:	602b      	str	r3, [r5, #0]
 8006ab8:	2000      	movs	r0, #0
 8006aba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006abc:	6821      	ldr	r1, [r4, #0]
 8006abe:	1bc9      	subs	r1, r1, r7
 8006ac0:	d420      	bmi.n	8006b04 <_malloc_r+0xd0>
 8006ac2:	290b      	cmp	r1, #11
 8006ac4:	d90a      	bls.n	8006adc <_malloc_r+0xa8>
 8006ac6:	19e2      	adds	r2, r4, r7
 8006ac8:	6027      	str	r7, [r4, #0]
 8006aca:	42a3      	cmp	r3, r4
 8006acc:	d104      	bne.n	8006ad8 <_malloc_r+0xa4>
 8006ace:	6032      	str	r2, [r6, #0]
 8006ad0:	6863      	ldr	r3, [r4, #4]
 8006ad2:	6011      	str	r1, [r2, #0]
 8006ad4:	6053      	str	r3, [r2, #4]
 8006ad6:	e005      	b.n	8006ae4 <_malloc_r+0xb0>
 8006ad8:	605a      	str	r2, [r3, #4]
 8006ada:	e7f9      	b.n	8006ad0 <_malloc_r+0x9c>
 8006adc:	6862      	ldr	r2, [r4, #4]
 8006ade:	42a3      	cmp	r3, r4
 8006ae0:	d10e      	bne.n	8006b00 <_malloc_r+0xcc>
 8006ae2:	6032      	str	r2, [r6, #0]
 8006ae4:	0028      	movs	r0, r5
 8006ae6:	f000 f82d 	bl	8006b44 <__malloc_unlock>
 8006aea:	0020      	movs	r0, r4
 8006aec:	2207      	movs	r2, #7
 8006aee:	300b      	adds	r0, #11
 8006af0:	1d23      	adds	r3, r4, #4
 8006af2:	4390      	bics	r0, r2
 8006af4:	1ac2      	subs	r2, r0, r3
 8006af6:	4298      	cmp	r0, r3
 8006af8:	d0df      	beq.n	8006aba <_malloc_r+0x86>
 8006afa:	1a1b      	subs	r3, r3, r0
 8006afc:	50a3      	str	r3, [r4, r2]
 8006afe:	e7dc      	b.n	8006aba <_malloc_r+0x86>
 8006b00:	605a      	str	r2, [r3, #4]
 8006b02:	e7ef      	b.n	8006ae4 <_malloc_r+0xb0>
 8006b04:	0023      	movs	r3, r4
 8006b06:	6864      	ldr	r4, [r4, #4]
 8006b08:	e7a6      	b.n	8006a58 <_malloc_r+0x24>
 8006b0a:	9c00      	ldr	r4, [sp, #0]
 8006b0c:	6863      	ldr	r3, [r4, #4]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	e7ad      	b.n	8006a6e <_malloc_r+0x3a>
 8006b12:	001a      	movs	r2, r3
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	42a3      	cmp	r3, r4
 8006b18:	d1fb      	bne.n	8006b12 <_malloc_r+0xde>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e7da      	b.n	8006ad4 <_malloc_r+0xa0>
 8006b1e:	230c      	movs	r3, #12
 8006b20:	0028      	movs	r0, r5
 8006b22:	602b      	str	r3, [r5, #0]
 8006b24:	f000 f80e 	bl	8006b44 <__malloc_unlock>
 8006b28:	e7c6      	b.n	8006ab8 <_malloc_r+0x84>
 8006b2a:	6007      	str	r7, [r0, #0]
 8006b2c:	e7da      	b.n	8006ae4 <_malloc_r+0xb0>
 8006b2e:	46c0      	nop			@ (mov r8, r8)
 8006b30:	20000410 	.word	0x20000410

08006b34 <__malloc_lock>:
 8006b34:	b510      	push	{r4, lr}
 8006b36:	4802      	ldr	r0, [pc, #8]	@ (8006b40 <__malloc_lock+0xc>)
 8006b38:	f7ff f877 	bl	8005c2a <__retarget_lock_acquire_recursive>
 8006b3c:	bd10      	pop	{r4, pc}
 8006b3e:	46c0      	nop			@ (mov r8, r8)
 8006b40:	20000408 	.word	0x20000408

08006b44 <__malloc_unlock>:
 8006b44:	b510      	push	{r4, lr}
 8006b46:	4802      	ldr	r0, [pc, #8]	@ (8006b50 <__malloc_unlock+0xc>)
 8006b48:	f7ff f870 	bl	8005c2c <__retarget_lock_release_recursive>
 8006b4c:	bd10      	pop	{r4, pc}
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	20000408 	.word	0x20000408

08006b54 <_Balloc>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	69c5      	ldr	r5, [r0, #28]
 8006b58:	0006      	movs	r6, r0
 8006b5a:	000c      	movs	r4, r1
 8006b5c:	2d00      	cmp	r5, #0
 8006b5e:	d10e      	bne.n	8006b7e <_Balloc+0x2a>
 8006b60:	2010      	movs	r0, #16
 8006b62:	f7ff ff3b 	bl	80069dc <malloc>
 8006b66:	1e02      	subs	r2, r0, #0
 8006b68:	61f0      	str	r0, [r6, #28]
 8006b6a:	d104      	bne.n	8006b76 <_Balloc+0x22>
 8006b6c:	216b      	movs	r1, #107	@ 0x6b
 8006b6e:	4b19      	ldr	r3, [pc, #100]	@ (8006bd4 <_Balloc+0x80>)
 8006b70:	4819      	ldr	r0, [pc, #100]	@ (8006bd8 <_Balloc+0x84>)
 8006b72:	f000 fdd1 	bl	8007718 <__assert_func>
 8006b76:	6045      	str	r5, [r0, #4]
 8006b78:	6085      	str	r5, [r0, #8]
 8006b7a:	6005      	str	r5, [r0, #0]
 8006b7c:	60c5      	str	r5, [r0, #12]
 8006b7e:	69f5      	ldr	r5, [r6, #28]
 8006b80:	68eb      	ldr	r3, [r5, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d013      	beq.n	8006bae <_Balloc+0x5a>
 8006b86:	69f3      	ldr	r3, [r6, #28]
 8006b88:	00a2      	lsls	r2, r4, #2
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	189b      	adds	r3, r3, r2
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d118      	bne.n	8006bc6 <_Balloc+0x72>
 8006b94:	2101      	movs	r1, #1
 8006b96:	000d      	movs	r5, r1
 8006b98:	40a5      	lsls	r5, r4
 8006b9a:	1d6a      	adds	r2, r5, #5
 8006b9c:	0030      	movs	r0, r6
 8006b9e:	0092      	lsls	r2, r2, #2
 8006ba0:	f000 fdd8 	bl	8007754 <_calloc_r>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d00c      	beq.n	8006bc2 <_Balloc+0x6e>
 8006ba8:	6044      	str	r4, [r0, #4]
 8006baa:	6085      	str	r5, [r0, #8]
 8006bac:	e00d      	b.n	8006bca <_Balloc+0x76>
 8006bae:	2221      	movs	r2, #33	@ 0x21
 8006bb0:	2104      	movs	r1, #4
 8006bb2:	0030      	movs	r0, r6
 8006bb4:	f000 fdce 	bl	8007754 <_calloc_r>
 8006bb8:	69f3      	ldr	r3, [r6, #28]
 8006bba:	60e8      	str	r0, [r5, #12]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e1      	bne.n	8006b86 <_Balloc+0x32>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
 8006bc6:	6802      	ldr	r2, [r0, #0]
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	6103      	str	r3, [r0, #16]
 8006bce:	60c3      	str	r3, [r0, #12]
 8006bd0:	e7f8      	b.n	8006bc4 <_Balloc+0x70>
 8006bd2:	46c0      	nop			@ (mov r8, r8)
 8006bd4:	08007f59 	.word	0x08007f59
 8006bd8:	08007fd9 	.word	0x08007fd9

08006bdc <_Bfree>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	69c6      	ldr	r6, [r0, #28]
 8006be0:	0005      	movs	r5, r0
 8006be2:	000c      	movs	r4, r1
 8006be4:	2e00      	cmp	r6, #0
 8006be6:	d10e      	bne.n	8006c06 <_Bfree+0x2a>
 8006be8:	2010      	movs	r0, #16
 8006bea:	f7ff fef7 	bl	80069dc <malloc>
 8006bee:	1e02      	subs	r2, r0, #0
 8006bf0:	61e8      	str	r0, [r5, #28]
 8006bf2:	d104      	bne.n	8006bfe <_Bfree+0x22>
 8006bf4:	218f      	movs	r1, #143	@ 0x8f
 8006bf6:	4b09      	ldr	r3, [pc, #36]	@ (8006c1c <_Bfree+0x40>)
 8006bf8:	4809      	ldr	r0, [pc, #36]	@ (8006c20 <_Bfree+0x44>)
 8006bfa:	f000 fd8d 	bl	8007718 <__assert_func>
 8006bfe:	6046      	str	r6, [r0, #4]
 8006c00:	6086      	str	r6, [r0, #8]
 8006c02:	6006      	str	r6, [r0, #0]
 8006c04:	60c6      	str	r6, [r0, #12]
 8006c06:	2c00      	cmp	r4, #0
 8006c08:	d007      	beq.n	8006c1a <_Bfree+0x3e>
 8006c0a:	69eb      	ldr	r3, [r5, #28]
 8006c0c:	6862      	ldr	r2, [r4, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	0092      	lsls	r2, r2, #2
 8006c12:	189b      	adds	r3, r3, r2
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	6022      	str	r2, [r4, #0]
 8006c18:	601c      	str	r4, [r3, #0]
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	08007f59 	.word	0x08007f59
 8006c20:	08007fd9 	.word	0x08007fd9

08006c24 <__multadd>:
 8006c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c26:	000f      	movs	r7, r1
 8006c28:	9001      	str	r0, [sp, #4]
 8006c2a:	000c      	movs	r4, r1
 8006c2c:	001e      	movs	r6, r3
 8006c2e:	2000      	movs	r0, #0
 8006c30:	690d      	ldr	r5, [r1, #16]
 8006c32:	3714      	adds	r7, #20
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	3001      	adds	r0, #1
 8006c38:	b299      	uxth	r1, r3
 8006c3a:	4351      	muls	r1, r2
 8006c3c:	0c1b      	lsrs	r3, r3, #16
 8006c3e:	4353      	muls	r3, r2
 8006c40:	1989      	adds	r1, r1, r6
 8006c42:	0c0e      	lsrs	r6, r1, #16
 8006c44:	199b      	adds	r3, r3, r6
 8006c46:	0c1e      	lsrs	r6, r3, #16
 8006c48:	b289      	uxth	r1, r1
 8006c4a:	041b      	lsls	r3, r3, #16
 8006c4c:	185b      	adds	r3, r3, r1
 8006c4e:	c708      	stmia	r7!, {r3}
 8006c50:	4285      	cmp	r5, r0
 8006c52:	dcef      	bgt.n	8006c34 <__multadd+0x10>
 8006c54:	2e00      	cmp	r6, #0
 8006c56:	d022      	beq.n	8006c9e <__multadd+0x7a>
 8006c58:	68a3      	ldr	r3, [r4, #8]
 8006c5a:	42ab      	cmp	r3, r5
 8006c5c:	dc19      	bgt.n	8006c92 <__multadd+0x6e>
 8006c5e:	6861      	ldr	r1, [r4, #4]
 8006c60:	9801      	ldr	r0, [sp, #4]
 8006c62:	3101      	adds	r1, #1
 8006c64:	f7ff ff76 	bl	8006b54 <_Balloc>
 8006c68:	1e07      	subs	r7, r0, #0
 8006c6a:	d105      	bne.n	8006c78 <__multadd+0x54>
 8006c6c:	003a      	movs	r2, r7
 8006c6e:	21ba      	movs	r1, #186	@ 0xba
 8006c70:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca4 <__multadd+0x80>)
 8006c72:	480d      	ldr	r0, [pc, #52]	@ (8006ca8 <__multadd+0x84>)
 8006c74:	f000 fd50 	bl	8007718 <__assert_func>
 8006c78:	0021      	movs	r1, r4
 8006c7a:	6922      	ldr	r2, [r4, #16]
 8006c7c:	310c      	adds	r1, #12
 8006c7e:	3202      	adds	r2, #2
 8006c80:	0092      	lsls	r2, r2, #2
 8006c82:	300c      	adds	r0, #12
 8006c84:	f000 fd3e 	bl	8007704 <memcpy>
 8006c88:	0021      	movs	r1, r4
 8006c8a:	9801      	ldr	r0, [sp, #4]
 8006c8c:	f7ff ffa6 	bl	8006bdc <_Bfree>
 8006c90:	003c      	movs	r4, r7
 8006c92:	1d2b      	adds	r3, r5, #4
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	18e3      	adds	r3, r4, r3
 8006c98:	3501      	adds	r5, #1
 8006c9a:	605e      	str	r6, [r3, #4]
 8006c9c:	6125      	str	r5, [r4, #16]
 8006c9e:	0020      	movs	r0, r4
 8006ca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ca2:	46c0      	nop			@ (mov r8, r8)
 8006ca4:	08007fc8 	.word	0x08007fc8
 8006ca8:	08007fd9 	.word	0x08007fd9

08006cac <__hi0bits>:
 8006cac:	2280      	movs	r2, #128	@ 0x80
 8006cae:	0003      	movs	r3, r0
 8006cb0:	0252      	lsls	r2, r2, #9
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d201      	bcs.n	8006cbc <__hi0bits+0x10>
 8006cb8:	041b      	lsls	r3, r3, #16
 8006cba:	3010      	adds	r0, #16
 8006cbc:	2280      	movs	r2, #128	@ 0x80
 8006cbe:	0452      	lsls	r2, r2, #17
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d201      	bcs.n	8006cc8 <__hi0bits+0x1c>
 8006cc4:	3008      	adds	r0, #8
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	2280      	movs	r2, #128	@ 0x80
 8006cca:	0552      	lsls	r2, r2, #21
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d201      	bcs.n	8006cd4 <__hi0bits+0x28>
 8006cd0:	3004      	adds	r0, #4
 8006cd2:	011b      	lsls	r3, r3, #4
 8006cd4:	2280      	movs	r2, #128	@ 0x80
 8006cd6:	05d2      	lsls	r2, r2, #23
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d201      	bcs.n	8006ce0 <__hi0bits+0x34>
 8006cdc:	3002      	adds	r0, #2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	db03      	blt.n	8006cec <__hi0bits+0x40>
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	4213      	tst	r3, r2
 8006ce8:	d100      	bne.n	8006cec <__hi0bits+0x40>
 8006cea:	2020      	movs	r0, #32
 8006cec:	4770      	bx	lr

08006cee <__lo0bits>:
 8006cee:	6803      	ldr	r3, [r0, #0]
 8006cf0:	0001      	movs	r1, r0
 8006cf2:	2207      	movs	r2, #7
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	4010      	ands	r0, r2
 8006cf8:	4213      	tst	r3, r2
 8006cfa:	d00d      	beq.n	8006d18 <__lo0bits+0x2a>
 8006cfc:	3a06      	subs	r2, #6
 8006cfe:	2000      	movs	r0, #0
 8006d00:	4213      	tst	r3, r2
 8006d02:	d105      	bne.n	8006d10 <__lo0bits+0x22>
 8006d04:	3002      	adds	r0, #2
 8006d06:	4203      	tst	r3, r0
 8006d08:	d003      	beq.n	8006d12 <__lo0bits+0x24>
 8006d0a:	40d3      	lsrs	r3, r2
 8006d0c:	0010      	movs	r0, r2
 8006d0e:	600b      	str	r3, [r1, #0]
 8006d10:	4770      	bx	lr
 8006d12:	089b      	lsrs	r3, r3, #2
 8006d14:	600b      	str	r3, [r1, #0]
 8006d16:	e7fb      	b.n	8006d10 <__lo0bits+0x22>
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	2a00      	cmp	r2, #0
 8006d1c:	d101      	bne.n	8006d22 <__lo0bits+0x34>
 8006d1e:	2010      	movs	r0, #16
 8006d20:	0c1b      	lsrs	r3, r3, #16
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	d101      	bne.n	8006d2c <__lo0bits+0x3e>
 8006d28:	3008      	adds	r0, #8
 8006d2a:	0a1b      	lsrs	r3, r3, #8
 8006d2c:	071a      	lsls	r2, r3, #28
 8006d2e:	d101      	bne.n	8006d34 <__lo0bits+0x46>
 8006d30:	3004      	adds	r0, #4
 8006d32:	091b      	lsrs	r3, r3, #4
 8006d34:	079a      	lsls	r2, r3, #30
 8006d36:	d101      	bne.n	8006d3c <__lo0bits+0x4e>
 8006d38:	3002      	adds	r0, #2
 8006d3a:	089b      	lsrs	r3, r3, #2
 8006d3c:	07da      	lsls	r2, r3, #31
 8006d3e:	d4e9      	bmi.n	8006d14 <__lo0bits+0x26>
 8006d40:	3001      	adds	r0, #1
 8006d42:	085b      	lsrs	r3, r3, #1
 8006d44:	d1e6      	bne.n	8006d14 <__lo0bits+0x26>
 8006d46:	2020      	movs	r0, #32
 8006d48:	e7e2      	b.n	8006d10 <__lo0bits+0x22>
	...

08006d4c <__i2b>:
 8006d4c:	b510      	push	{r4, lr}
 8006d4e:	000c      	movs	r4, r1
 8006d50:	2101      	movs	r1, #1
 8006d52:	f7ff feff 	bl	8006b54 <_Balloc>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d107      	bne.n	8006d6a <__i2b+0x1e>
 8006d5a:	2146      	movs	r1, #70	@ 0x46
 8006d5c:	4c05      	ldr	r4, [pc, #20]	@ (8006d74 <__i2b+0x28>)
 8006d5e:	0002      	movs	r2, r0
 8006d60:	4b05      	ldr	r3, [pc, #20]	@ (8006d78 <__i2b+0x2c>)
 8006d62:	0020      	movs	r0, r4
 8006d64:	31ff      	adds	r1, #255	@ 0xff
 8006d66:	f000 fcd7 	bl	8007718 <__assert_func>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	6144      	str	r4, [r0, #20]
 8006d6e:	6103      	str	r3, [r0, #16]
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	46c0      	nop			@ (mov r8, r8)
 8006d74:	08007fd9 	.word	0x08007fd9
 8006d78:	08007fc8 	.word	0x08007fc8

08006d7c <__multiply>:
 8006d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d7e:	0014      	movs	r4, r2
 8006d80:	690a      	ldr	r2, [r1, #16]
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	000d      	movs	r5, r1
 8006d86:	b08b      	sub	sp, #44	@ 0x2c
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	db02      	blt.n	8006d92 <__multiply+0x16>
 8006d8c:	0023      	movs	r3, r4
 8006d8e:	000c      	movs	r4, r1
 8006d90:	001d      	movs	r5, r3
 8006d92:	6927      	ldr	r7, [r4, #16]
 8006d94:	692e      	ldr	r6, [r5, #16]
 8006d96:	6861      	ldr	r1, [r4, #4]
 8006d98:	19bb      	adds	r3, r7, r6
 8006d9a:	9303      	str	r3, [sp, #12]
 8006d9c:	68a3      	ldr	r3, [r4, #8]
 8006d9e:	19ba      	adds	r2, r7, r6
 8006da0:	4293      	cmp	r3, r2
 8006da2:	da00      	bge.n	8006da6 <__multiply+0x2a>
 8006da4:	3101      	adds	r1, #1
 8006da6:	f7ff fed5 	bl	8006b54 <_Balloc>
 8006daa:	9002      	str	r0, [sp, #8]
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d106      	bne.n	8006dbe <__multiply+0x42>
 8006db0:	21b1      	movs	r1, #177	@ 0xb1
 8006db2:	4b49      	ldr	r3, [pc, #292]	@ (8006ed8 <__multiply+0x15c>)
 8006db4:	4849      	ldr	r0, [pc, #292]	@ (8006edc <__multiply+0x160>)
 8006db6:	9a02      	ldr	r2, [sp, #8]
 8006db8:	0049      	lsls	r1, r1, #1
 8006dba:	f000 fcad 	bl	8007718 <__assert_func>
 8006dbe:	9b02      	ldr	r3, [sp, #8]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	3314      	adds	r3, #20
 8006dc4:	469c      	mov	ip, r3
 8006dc6:	19bb      	adds	r3, r7, r6
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4463      	add	r3, ip
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	4663      	mov	r3, ip
 8006dd0:	9904      	ldr	r1, [sp, #16]
 8006dd2:	428b      	cmp	r3, r1
 8006dd4:	d32a      	bcc.n	8006e2c <__multiply+0xb0>
 8006dd6:	0023      	movs	r3, r4
 8006dd8:	00bf      	lsls	r7, r7, #2
 8006dda:	3314      	adds	r3, #20
 8006ddc:	3514      	adds	r5, #20
 8006dde:	9308      	str	r3, [sp, #32]
 8006de0:	00b6      	lsls	r6, r6, #2
 8006de2:	19db      	adds	r3, r3, r7
 8006de4:	9305      	str	r3, [sp, #20]
 8006de6:	19ab      	adds	r3, r5, r6
 8006de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dea:	2304      	movs	r3, #4
 8006dec:	9306      	str	r3, [sp, #24]
 8006dee:	0023      	movs	r3, r4
 8006df0:	9a05      	ldr	r2, [sp, #20]
 8006df2:	3315      	adds	r3, #21
 8006df4:	9501      	str	r5, [sp, #4]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d305      	bcc.n	8006e06 <__multiply+0x8a>
 8006dfa:	1b13      	subs	r3, r2, r4
 8006dfc:	3b15      	subs	r3, #21
 8006dfe:	089b      	lsrs	r3, r3, #2
 8006e00:	3301      	adds	r3, #1
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	9306      	str	r3, [sp, #24]
 8006e06:	9b01      	ldr	r3, [sp, #4]
 8006e08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d310      	bcc.n	8006e30 <__multiply+0xb4>
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	dd05      	ble.n	8006e20 <__multiply+0xa4>
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	3b04      	subs	r3, #4
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d056      	beq.n	8006ece <__multiply+0x152>
 8006e20:	9b02      	ldr	r3, [sp, #8]
 8006e22:	9a03      	ldr	r2, [sp, #12]
 8006e24:	0018      	movs	r0, r3
 8006e26:	611a      	str	r2, [r3, #16]
 8006e28:	b00b      	add	sp, #44	@ 0x2c
 8006e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e2c:	c304      	stmia	r3!, {r2}
 8006e2e:	e7cf      	b.n	8006dd0 <__multiply+0x54>
 8006e30:	9b01      	ldr	r3, [sp, #4]
 8006e32:	6818      	ldr	r0, [r3, #0]
 8006e34:	b280      	uxth	r0, r0
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d01e      	beq.n	8006e78 <__multiply+0xfc>
 8006e3a:	4667      	mov	r7, ip
 8006e3c:	2500      	movs	r5, #0
 8006e3e:	9e08      	ldr	r6, [sp, #32]
 8006e40:	ce02      	ldmia	r6!, {r1}
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	9307      	str	r3, [sp, #28]
 8006e46:	b28b      	uxth	r3, r1
 8006e48:	4343      	muls	r3, r0
 8006e4a:	001a      	movs	r2, r3
 8006e4c:	466b      	mov	r3, sp
 8006e4e:	0c09      	lsrs	r1, r1, #16
 8006e50:	8b9b      	ldrh	r3, [r3, #28]
 8006e52:	4341      	muls	r1, r0
 8006e54:	18d3      	adds	r3, r2, r3
 8006e56:	9a07      	ldr	r2, [sp, #28]
 8006e58:	195b      	adds	r3, r3, r5
 8006e5a:	0c12      	lsrs	r2, r2, #16
 8006e5c:	1889      	adds	r1, r1, r2
 8006e5e:	0c1a      	lsrs	r2, r3, #16
 8006e60:	188a      	adds	r2, r1, r2
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	0c15      	lsrs	r5, r2, #16
 8006e66:	0412      	lsls	r2, r2, #16
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	9b05      	ldr	r3, [sp, #20]
 8006e6c:	c704      	stmia	r7!, {r2}
 8006e6e:	42b3      	cmp	r3, r6
 8006e70:	d8e6      	bhi.n	8006e40 <__multiply+0xc4>
 8006e72:	4663      	mov	r3, ip
 8006e74:	9a06      	ldr	r2, [sp, #24]
 8006e76:	509d      	str	r5, [r3, r2]
 8006e78:	9b01      	ldr	r3, [sp, #4]
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	0c00      	lsrs	r0, r0, #16
 8006e7e:	d020      	beq.n	8006ec2 <__multiply+0x146>
 8006e80:	4663      	mov	r3, ip
 8006e82:	0025      	movs	r5, r4
 8006e84:	4661      	mov	r1, ip
 8006e86:	2700      	movs	r7, #0
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3514      	adds	r5, #20
 8006e8c:	682a      	ldr	r2, [r5, #0]
 8006e8e:	680e      	ldr	r6, [r1, #0]
 8006e90:	b292      	uxth	r2, r2
 8006e92:	4342      	muls	r2, r0
 8006e94:	0c36      	lsrs	r6, r6, #16
 8006e96:	1992      	adds	r2, r2, r6
 8006e98:	19d2      	adds	r2, r2, r7
 8006e9a:	0416      	lsls	r6, r2, #16
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	431e      	orrs	r6, r3
 8006ea0:	600e      	str	r6, [r1, #0]
 8006ea2:	cd40      	ldmia	r5!, {r6}
 8006ea4:	684b      	ldr	r3, [r1, #4]
 8006ea6:	0c36      	lsrs	r6, r6, #16
 8006ea8:	4346      	muls	r6, r0
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	0c12      	lsrs	r2, r2, #16
 8006eae:	18f3      	adds	r3, r6, r3
 8006eb0:	189b      	adds	r3, r3, r2
 8006eb2:	9a05      	ldr	r2, [sp, #20]
 8006eb4:	0c1f      	lsrs	r7, r3, #16
 8006eb6:	3104      	adds	r1, #4
 8006eb8:	42aa      	cmp	r2, r5
 8006eba:	d8e7      	bhi.n	8006e8c <__multiply+0x110>
 8006ebc:	4662      	mov	r2, ip
 8006ebe:	9906      	ldr	r1, [sp, #24]
 8006ec0:	5053      	str	r3, [r2, r1]
 8006ec2:	9b01      	ldr	r3, [sp, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	9301      	str	r3, [sp, #4]
 8006ec8:	2304      	movs	r3, #4
 8006eca:	449c      	add	ip, r3
 8006ecc:	e79b      	b.n	8006e06 <__multiply+0x8a>
 8006ece:	9b03      	ldr	r3, [sp, #12]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	e79b      	b.n	8006e0e <__multiply+0x92>
 8006ed6:	46c0      	nop			@ (mov r8, r8)
 8006ed8:	08007fc8 	.word	0x08007fc8
 8006edc:	08007fd9 	.word	0x08007fd9

08006ee0 <__pow5mult>:
 8006ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	0015      	movs	r5, r2
 8006ee6:	0007      	movs	r7, r0
 8006ee8:	000e      	movs	r6, r1
 8006eea:	401a      	ands	r2, r3
 8006eec:	421d      	tst	r5, r3
 8006eee:	d008      	beq.n	8006f02 <__pow5mult+0x22>
 8006ef0:	4925      	ldr	r1, [pc, #148]	@ (8006f88 <__pow5mult+0xa8>)
 8006ef2:	3a01      	subs	r2, #1
 8006ef4:	0092      	lsls	r2, r2, #2
 8006ef6:	5852      	ldr	r2, [r2, r1]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	0031      	movs	r1, r6
 8006efc:	f7ff fe92 	bl	8006c24 <__multadd>
 8006f00:	0006      	movs	r6, r0
 8006f02:	10ad      	asrs	r5, r5, #2
 8006f04:	d03d      	beq.n	8006f82 <__pow5mult+0xa2>
 8006f06:	69fc      	ldr	r4, [r7, #28]
 8006f08:	2c00      	cmp	r4, #0
 8006f0a:	d10f      	bne.n	8006f2c <__pow5mult+0x4c>
 8006f0c:	2010      	movs	r0, #16
 8006f0e:	f7ff fd65 	bl	80069dc <malloc>
 8006f12:	1e02      	subs	r2, r0, #0
 8006f14:	61f8      	str	r0, [r7, #28]
 8006f16:	d105      	bne.n	8006f24 <__pow5mult+0x44>
 8006f18:	21b4      	movs	r1, #180	@ 0xb4
 8006f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006f8c <__pow5mult+0xac>)
 8006f1c:	481c      	ldr	r0, [pc, #112]	@ (8006f90 <__pow5mult+0xb0>)
 8006f1e:	31ff      	adds	r1, #255	@ 0xff
 8006f20:	f000 fbfa 	bl	8007718 <__assert_func>
 8006f24:	6044      	str	r4, [r0, #4]
 8006f26:	6084      	str	r4, [r0, #8]
 8006f28:	6004      	str	r4, [r0, #0]
 8006f2a:	60c4      	str	r4, [r0, #12]
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	689c      	ldr	r4, [r3, #8]
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	2c00      	cmp	r4, #0
 8006f34:	d108      	bne.n	8006f48 <__pow5mult+0x68>
 8006f36:	0038      	movs	r0, r7
 8006f38:	4916      	ldr	r1, [pc, #88]	@ (8006f94 <__pow5mult+0xb4>)
 8006f3a:	f7ff ff07 	bl	8006d4c <__i2b>
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	0004      	movs	r4, r0
 8006f42:	6098      	str	r0, [r3, #8]
 8006f44:	2300      	movs	r3, #0
 8006f46:	6003      	str	r3, [r0, #0]
 8006f48:	2301      	movs	r3, #1
 8006f4a:	421d      	tst	r5, r3
 8006f4c:	d00a      	beq.n	8006f64 <__pow5mult+0x84>
 8006f4e:	0031      	movs	r1, r6
 8006f50:	0022      	movs	r2, r4
 8006f52:	0038      	movs	r0, r7
 8006f54:	f7ff ff12 	bl	8006d7c <__multiply>
 8006f58:	0031      	movs	r1, r6
 8006f5a:	9001      	str	r0, [sp, #4]
 8006f5c:	0038      	movs	r0, r7
 8006f5e:	f7ff fe3d 	bl	8006bdc <_Bfree>
 8006f62:	9e01      	ldr	r6, [sp, #4]
 8006f64:	106d      	asrs	r5, r5, #1
 8006f66:	d00c      	beq.n	8006f82 <__pow5mult+0xa2>
 8006f68:	6820      	ldr	r0, [r4, #0]
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d107      	bne.n	8006f7e <__pow5mult+0x9e>
 8006f6e:	0022      	movs	r2, r4
 8006f70:	0021      	movs	r1, r4
 8006f72:	0038      	movs	r0, r7
 8006f74:	f7ff ff02 	bl	8006d7c <__multiply>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6020      	str	r0, [r4, #0]
 8006f7c:	6003      	str	r3, [r0, #0]
 8006f7e:	0004      	movs	r4, r0
 8006f80:	e7e2      	b.n	8006f48 <__pow5mult+0x68>
 8006f82:	0030      	movs	r0, r6
 8006f84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f86:	46c0      	nop			@ (mov r8, r8)
 8006f88:	08008034 	.word	0x08008034
 8006f8c:	08007f59 	.word	0x08007f59
 8006f90:	08007fd9 	.word	0x08007fd9
 8006f94:	00000271 	.word	0x00000271

08006f98 <__lshift>:
 8006f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f9a:	000c      	movs	r4, r1
 8006f9c:	0016      	movs	r6, r2
 8006f9e:	6923      	ldr	r3, [r4, #16]
 8006fa0:	1157      	asrs	r7, r2, #5
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	18fb      	adds	r3, r7, r3
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	6849      	ldr	r1, [r1, #4]
 8006fae:	68a3      	ldr	r3, [r4, #8]
 8006fb0:	9002      	str	r0, [sp, #8]
 8006fb2:	9a00      	ldr	r2, [sp, #0]
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	db10      	blt.n	8006fda <__lshift+0x42>
 8006fb8:	9802      	ldr	r0, [sp, #8]
 8006fba:	f7ff fdcb 	bl	8006b54 <_Balloc>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	0001      	movs	r1, r0
 8006fc2:	0005      	movs	r5, r0
 8006fc4:	001a      	movs	r2, r3
 8006fc6:	3114      	adds	r1, #20
 8006fc8:	4298      	cmp	r0, r3
 8006fca:	d10c      	bne.n	8006fe6 <__lshift+0x4e>
 8006fcc:	21ef      	movs	r1, #239	@ 0xef
 8006fce:	002a      	movs	r2, r5
 8006fd0:	4b25      	ldr	r3, [pc, #148]	@ (8007068 <__lshift+0xd0>)
 8006fd2:	4826      	ldr	r0, [pc, #152]	@ (800706c <__lshift+0xd4>)
 8006fd4:	0049      	lsls	r1, r1, #1
 8006fd6:	f000 fb9f 	bl	8007718 <__assert_func>
 8006fda:	3101      	adds	r1, #1
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	e7e8      	b.n	8006fb2 <__lshift+0x1a>
 8006fe0:	0098      	lsls	r0, r3, #2
 8006fe2:	500a      	str	r2, [r1, r0]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	42bb      	cmp	r3, r7
 8006fe8:	dbfa      	blt.n	8006fe0 <__lshift+0x48>
 8006fea:	43fb      	mvns	r3, r7
 8006fec:	17db      	asrs	r3, r3, #31
 8006fee:	401f      	ands	r7, r3
 8006ff0:	00bf      	lsls	r7, r7, #2
 8006ff2:	0023      	movs	r3, r4
 8006ff4:	201f      	movs	r0, #31
 8006ff6:	19c9      	adds	r1, r1, r7
 8006ff8:	0037      	movs	r7, r6
 8006ffa:	6922      	ldr	r2, [r4, #16]
 8006ffc:	3314      	adds	r3, #20
 8006ffe:	0092      	lsls	r2, r2, #2
 8007000:	189a      	adds	r2, r3, r2
 8007002:	4007      	ands	r7, r0
 8007004:	4206      	tst	r6, r0
 8007006:	d029      	beq.n	800705c <__lshift+0xc4>
 8007008:	3001      	adds	r0, #1
 800700a:	1bc0      	subs	r0, r0, r7
 800700c:	9003      	str	r0, [sp, #12]
 800700e:	468c      	mov	ip, r1
 8007010:	2000      	movs	r0, #0
 8007012:	681e      	ldr	r6, [r3, #0]
 8007014:	40be      	lsls	r6, r7
 8007016:	4306      	orrs	r6, r0
 8007018:	4660      	mov	r0, ip
 800701a:	c040      	stmia	r0!, {r6}
 800701c:	4684      	mov	ip, r0
 800701e:	9e03      	ldr	r6, [sp, #12]
 8007020:	cb01      	ldmia	r3!, {r0}
 8007022:	40f0      	lsrs	r0, r6
 8007024:	429a      	cmp	r2, r3
 8007026:	d8f4      	bhi.n	8007012 <__lshift+0x7a>
 8007028:	0026      	movs	r6, r4
 800702a:	3615      	adds	r6, #21
 800702c:	2304      	movs	r3, #4
 800702e:	42b2      	cmp	r2, r6
 8007030:	d304      	bcc.n	800703c <__lshift+0xa4>
 8007032:	1b13      	subs	r3, r2, r4
 8007034:	3b15      	subs	r3, #21
 8007036:	089b      	lsrs	r3, r3, #2
 8007038:	3301      	adds	r3, #1
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	50c8      	str	r0, [r1, r3]
 800703e:	2800      	cmp	r0, #0
 8007040:	d002      	beq.n	8007048 <__lshift+0xb0>
 8007042:	9b01      	ldr	r3, [sp, #4]
 8007044:	3302      	adds	r3, #2
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	9b00      	ldr	r3, [sp, #0]
 800704a:	9802      	ldr	r0, [sp, #8]
 800704c:	3b01      	subs	r3, #1
 800704e:	0021      	movs	r1, r4
 8007050:	612b      	str	r3, [r5, #16]
 8007052:	f7ff fdc3 	bl	8006bdc <_Bfree>
 8007056:	0028      	movs	r0, r5
 8007058:	b005      	add	sp, #20
 800705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705c:	cb01      	ldmia	r3!, {r0}
 800705e:	c101      	stmia	r1!, {r0}
 8007060:	429a      	cmp	r2, r3
 8007062:	d8fb      	bhi.n	800705c <__lshift+0xc4>
 8007064:	e7f0      	b.n	8007048 <__lshift+0xb0>
 8007066:	46c0      	nop			@ (mov r8, r8)
 8007068:	08007fc8 	.word	0x08007fc8
 800706c:	08007fd9 	.word	0x08007fd9

08007070 <__mcmp>:
 8007070:	b530      	push	{r4, r5, lr}
 8007072:	690b      	ldr	r3, [r1, #16]
 8007074:	6904      	ldr	r4, [r0, #16]
 8007076:	0002      	movs	r2, r0
 8007078:	1ae0      	subs	r0, r4, r3
 800707a:	429c      	cmp	r4, r3
 800707c:	d10f      	bne.n	800709e <__mcmp+0x2e>
 800707e:	3214      	adds	r2, #20
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	3114      	adds	r1, #20
 8007084:	0014      	movs	r4, r2
 8007086:	18c9      	adds	r1, r1, r3
 8007088:	18d2      	adds	r2, r2, r3
 800708a:	3a04      	subs	r2, #4
 800708c:	3904      	subs	r1, #4
 800708e:	6815      	ldr	r5, [r2, #0]
 8007090:	680b      	ldr	r3, [r1, #0]
 8007092:	429d      	cmp	r5, r3
 8007094:	d004      	beq.n	80070a0 <__mcmp+0x30>
 8007096:	2001      	movs	r0, #1
 8007098:	429d      	cmp	r5, r3
 800709a:	d200      	bcs.n	800709e <__mcmp+0x2e>
 800709c:	3802      	subs	r0, #2
 800709e:	bd30      	pop	{r4, r5, pc}
 80070a0:	4294      	cmp	r4, r2
 80070a2:	d3f2      	bcc.n	800708a <__mcmp+0x1a>
 80070a4:	e7fb      	b.n	800709e <__mcmp+0x2e>
	...

080070a8 <__mdiff>:
 80070a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070aa:	000c      	movs	r4, r1
 80070ac:	b087      	sub	sp, #28
 80070ae:	9000      	str	r0, [sp, #0]
 80070b0:	0011      	movs	r1, r2
 80070b2:	0020      	movs	r0, r4
 80070b4:	0017      	movs	r7, r2
 80070b6:	f7ff ffdb 	bl	8007070 <__mcmp>
 80070ba:	1e05      	subs	r5, r0, #0
 80070bc:	d110      	bne.n	80070e0 <__mdiff+0x38>
 80070be:	0001      	movs	r1, r0
 80070c0:	9800      	ldr	r0, [sp, #0]
 80070c2:	f7ff fd47 	bl	8006b54 <_Balloc>
 80070c6:	1e02      	subs	r2, r0, #0
 80070c8:	d104      	bne.n	80070d4 <__mdiff+0x2c>
 80070ca:	4b40      	ldr	r3, [pc, #256]	@ (80071cc <__mdiff+0x124>)
 80070cc:	4840      	ldr	r0, [pc, #256]	@ (80071d0 <__mdiff+0x128>)
 80070ce:	4941      	ldr	r1, [pc, #260]	@ (80071d4 <__mdiff+0x12c>)
 80070d0:	f000 fb22 	bl	8007718 <__assert_func>
 80070d4:	2301      	movs	r3, #1
 80070d6:	6145      	str	r5, [r0, #20]
 80070d8:	6103      	str	r3, [r0, #16]
 80070da:	0010      	movs	r0, r2
 80070dc:	b007      	add	sp, #28
 80070de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070e0:	2600      	movs	r6, #0
 80070e2:	42b0      	cmp	r0, r6
 80070e4:	da03      	bge.n	80070ee <__mdiff+0x46>
 80070e6:	0023      	movs	r3, r4
 80070e8:	003c      	movs	r4, r7
 80070ea:	001f      	movs	r7, r3
 80070ec:	3601      	adds	r6, #1
 80070ee:	6861      	ldr	r1, [r4, #4]
 80070f0:	9800      	ldr	r0, [sp, #0]
 80070f2:	f7ff fd2f 	bl	8006b54 <_Balloc>
 80070f6:	1e02      	subs	r2, r0, #0
 80070f8:	d103      	bne.n	8007102 <__mdiff+0x5a>
 80070fa:	4b34      	ldr	r3, [pc, #208]	@ (80071cc <__mdiff+0x124>)
 80070fc:	4834      	ldr	r0, [pc, #208]	@ (80071d0 <__mdiff+0x128>)
 80070fe:	4936      	ldr	r1, [pc, #216]	@ (80071d8 <__mdiff+0x130>)
 8007100:	e7e6      	b.n	80070d0 <__mdiff+0x28>
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	3414      	adds	r4, #20
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	18e3      	adds	r3, r4, r3
 800710c:	0021      	movs	r1, r4
 800710e:	9401      	str	r4, [sp, #4]
 8007110:	003c      	movs	r4, r7
 8007112:	9302      	str	r3, [sp, #8]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	3414      	adds	r4, #20
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	18e3      	adds	r3, r4, r3
 800711c:	9303      	str	r3, [sp, #12]
 800711e:	0003      	movs	r3, r0
 8007120:	60c6      	str	r6, [r0, #12]
 8007122:	468c      	mov	ip, r1
 8007124:	2000      	movs	r0, #0
 8007126:	3314      	adds	r3, #20
 8007128:	9304      	str	r3, [sp, #16]
 800712a:	9305      	str	r3, [sp, #20]
 800712c:	4663      	mov	r3, ip
 800712e:	cb20      	ldmia	r3!, {r5}
 8007130:	b2a9      	uxth	r1, r5
 8007132:	000e      	movs	r6, r1
 8007134:	469c      	mov	ip, r3
 8007136:	cc08      	ldmia	r4!, {r3}
 8007138:	0c2d      	lsrs	r5, r5, #16
 800713a:	b299      	uxth	r1, r3
 800713c:	1a71      	subs	r1, r6, r1
 800713e:	1809      	adds	r1, r1, r0
 8007140:	0c1b      	lsrs	r3, r3, #16
 8007142:	1408      	asrs	r0, r1, #16
 8007144:	1aeb      	subs	r3, r5, r3
 8007146:	181b      	adds	r3, r3, r0
 8007148:	1418      	asrs	r0, r3, #16
 800714a:	b289      	uxth	r1, r1
 800714c:	041b      	lsls	r3, r3, #16
 800714e:	4319      	orrs	r1, r3
 8007150:	9b05      	ldr	r3, [sp, #20]
 8007152:	c302      	stmia	r3!, {r1}
 8007154:	9305      	str	r3, [sp, #20]
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	42a3      	cmp	r3, r4
 800715a:	d8e7      	bhi.n	800712c <__mdiff+0x84>
 800715c:	0039      	movs	r1, r7
 800715e:	9c03      	ldr	r4, [sp, #12]
 8007160:	3115      	adds	r1, #21
 8007162:	2304      	movs	r3, #4
 8007164:	428c      	cmp	r4, r1
 8007166:	d304      	bcc.n	8007172 <__mdiff+0xca>
 8007168:	1be3      	subs	r3, r4, r7
 800716a:	3b15      	subs	r3, #21
 800716c:	089b      	lsrs	r3, r3, #2
 800716e:	3301      	adds	r3, #1
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	9901      	ldr	r1, [sp, #4]
 8007174:	18cd      	adds	r5, r1, r3
 8007176:	9904      	ldr	r1, [sp, #16]
 8007178:	002e      	movs	r6, r5
 800717a:	18cb      	adds	r3, r1, r3
 800717c:	001f      	movs	r7, r3
 800717e:	9902      	ldr	r1, [sp, #8]
 8007180:	428e      	cmp	r6, r1
 8007182:	d311      	bcc.n	80071a8 <__mdiff+0x100>
 8007184:	9c02      	ldr	r4, [sp, #8]
 8007186:	1ee9      	subs	r1, r5, #3
 8007188:	2000      	movs	r0, #0
 800718a:	428c      	cmp	r4, r1
 800718c:	d304      	bcc.n	8007198 <__mdiff+0xf0>
 800718e:	0021      	movs	r1, r4
 8007190:	3103      	adds	r1, #3
 8007192:	1b49      	subs	r1, r1, r5
 8007194:	0889      	lsrs	r1, r1, #2
 8007196:	0088      	lsls	r0, r1, #2
 8007198:	181b      	adds	r3, r3, r0
 800719a:	3b04      	subs	r3, #4
 800719c:	6819      	ldr	r1, [r3, #0]
 800719e:	2900      	cmp	r1, #0
 80071a0:	d010      	beq.n	80071c4 <__mdiff+0x11c>
 80071a2:	9b00      	ldr	r3, [sp, #0]
 80071a4:	6113      	str	r3, [r2, #16]
 80071a6:	e798      	b.n	80070da <__mdiff+0x32>
 80071a8:	4684      	mov	ip, r0
 80071aa:	ce02      	ldmia	r6!, {r1}
 80071ac:	b288      	uxth	r0, r1
 80071ae:	4460      	add	r0, ip
 80071b0:	1400      	asrs	r0, r0, #16
 80071b2:	0c0c      	lsrs	r4, r1, #16
 80071b4:	1904      	adds	r4, r0, r4
 80071b6:	4461      	add	r1, ip
 80071b8:	1420      	asrs	r0, r4, #16
 80071ba:	b289      	uxth	r1, r1
 80071bc:	0424      	lsls	r4, r4, #16
 80071be:	4321      	orrs	r1, r4
 80071c0:	c702      	stmia	r7!, {r1}
 80071c2:	e7dc      	b.n	800717e <__mdiff+0xd6>
 80071c4:	9900      	ldr	r1, [sp, #0]
 80071c6:	3901      	subs	r1, #1
 80071c8:	9100      	str	r1, [sp, #0]
 80071ca:	e7e6      	b.n	800719a <__mdiff+0xf2>
 80071cc:	08007fc8 	.word	0x08007fc8
 80071d0:	08007fd9 	.word	0x08007fd9
 80071d4:	00000237 	.word	0x00000237
 80071d8:	00000245 	.word	0x00000245

080071dc <__d2b>:
 80071dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071de:	2101      	movs	r1, #1
 80071e0:	0016      	movs	r6, r2
 80071e2:	001f      	movs	r7, r3
 80071e4:	f7ff fcb6 	bl	8006b54 <_Balloc>
 80071e8:	1e04      	subs	r4, r0, #0
 80071ea:	d105      	bne.n	80071f8 <__d2b+0x1c>
 80071ec:	0022      	movs	r2, r4
 80071ee:	4b25      	ldr	r3, [pc, #148]	@ (8007284 <__d2b+0xa8>)
 80071f0:	4825      	ldr	r0, [pc, #148]	@ (8007288 <__d2b+0xac>)
 80071f2:	4926      	ldr	r1, [pc, #152]	@ (800728c <__d2b+0xb0>)
 80071f4:	f000 fa90 	bl	8007718 <__assert_func>
 80071f8:	033b      	lsls	r3, r7, #12
 80071fa:	007d      	lsls	r5, r7, #1
 80071fc:	0b1b      	lsrs	r3, r3, #12
 80071fe:	0d6d      	lsrs	r5, r5, #21
 8007200:	d002      	beq.n	8007208 <__d2b+0x2c>
 8007202:	2280      	movs	r2, #128	@ 0x80
 8007204:	0352      	lsls	r2, r2, #13
 8007206:	4313      	orrs	r3, r2
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	2e00      	cmp	r6, #0
 800720c:	d025      	beq.n	800725a <__d2b+0x7e>
 800720e:	4668      	mov	r0, sp
 8007210:	9600      	str	r6, [sp, #0]
 8007212:	f7ff fd6c 	bl	8006cee <__lo0bits>
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	9900      	ldr	r1, [sp, #0]
 800721a:	2800      	cmp	r0, #0
 800721c:	d01b      	beq.n	8007256 <__d2b+0x7a>
 800721e:	2220      	movs	r2, #32
 8007220:	001e      	movs	r6, r3
 8007222:	1a12      	subs	r2, r2, r0
 8007224:	4096      	lsls	r6, r2
 8007226:	0032      	movs	r2, r6
 8007228:	40c3      	lsrs	r3, r0
 800722a:	430a      	orrs	r2, r1
 800722c:	6162      	str	r2, [r4, #20]
 800722e:	9301      	str	r3, [sp, #4]
 8007230:	9e01      	ldr	r6, [sp, #4]
 8007232:	61a6      	str	r6, [r4, #24]
 8007234:	1e73      	subs	r3, r6, #1
 8007236:	419e      	sbcs	r6, r3
 8007238:	3601      	adds	r6, #1
 800723a:	6126      	str	r6, [r4, #16]
 800723c:	2d00      	cmp	r5, #0
 800723e:	d014      	beq.n	800726a <__d2b+0x8e>
 8007240:	2635      	movs	r6, #53	@ 0x35
 8007242:	4b13      	ldr	r3, [pc, #76]	@ (8007290 <__d2b+0xb4>)
 8007244:	18ed      	adds	r5, r5, r3
 8007246:	9b08      	ldr	r3, [sp, #32]
 8007248:	182d      	adds	r5, r5, r0
 800724a:	601d      	str	r5, [r3, #0]
 800724c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724e:	1a36      	subs	r6, r6, r0
 8007250:	601e      	str	r6, [r3, #0]
 8007252:	0020      	movs	r0, r4
 8007254:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007256:	6161      	str	r1, [r4, #20]
 8007258:	e7ea      	b.n	8007230 <__d2b+0x54>
 800725a:	a801      	add	r0, sp, #4
 800725c:	f7ff fd47 	bl	8006cee <__lo0bits>
 8007260:	9b01      	ldr	r3, [sp, #4]
 8007262:	2601      	movs	r6, #1
 8007264:	6163      	str	r3, [r4, #20]
 8007266:	3020      	adds	r0, #32
 8007268:	e7e7      	b.n	800723a <__d2b+0x5e>
 800726a:	4b0a      	ldr	r3, [pc, #40]	@ (8007294 <__d2b+0xb8>)
 800726c:	18c0      	adds	r0, r0, r3
 800726e:	9b08      	ldr	r3, [sp, #32]
 8007270:	6018      	str	r0, [r3, #0]
 8007272:	4b09      	ldr	r3, [pc, #36]	@ (8007298 <__d2b+0xbc>)
 8007274:	18f3      	adds	r3, r6, r3
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	18e3      	adds	r3, r4, r3
 800727a:	6958      	ldr	r0, [r3, #20]
 800727c:	f7ff fd16 	bl	8006cac <__hi0bits>
 8007280:	0176      	lsls	r6, r6, #5
 8007282:	e7e3      	b.n	800724c <__d2b+0x70>
 8007284:	08007fc8 	.word	0x08007fc8
 8007288:	08007fd9 	.word	0x08007fd9
 800728c:	0000030f 	.word	0x0000030f
 8007290:	fffffbcd 	.word	0xfffffbcd
 8007294:	fffffbce 	.word	0xfffffbce
 8007298:	3fffffff 	.word	0x3fffffff

0800729c <__ssputs_r>:
 800729c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800729e:	688e      	ldr	r6, [r1, #8]
 80072a0:	b085      	sub	sp, #20
 80072a2:	001f      	movs	r7, r3
 80072a4:	000c      	movs	r4, r1
 80072a6:	680b      	ldr	r3, [r1, #0]
 80072a8:	9002      	str	r0, [sp, #8]
 80072aa:	9203      	str	r2, [sp, #12]
 80072ac:	42be      	cmp	r6, r7
 80072ae:	d830      	bhi.n	8007312 <__ssputs_r+0x76>
 80072b0:	210c      	movs	r1, #12
 80072b2:	5e62      	ldrsh	r2, [r4, r1]
 80072b4:	2190      	movs	r1, #144	@ 0x90
 80072b6:	00c9      	lsls	r1, r1, #3
 80072b8:	420a      	tst	r2, r1
 80072ba:	d028      	beq.n	800730e <__ssputs_r+0x72>
 80072bc:	2003      	movs	r0, #3
 80072be:	6921      	ldr	r1, [r4, #16]
 80072c0:	1a5b      	subs	r3, r3, r1
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	6963      	ldr	r3, [r4, #20]
 80072c6:	4343      	muls	r3, r0
 80072c8:	9801      	ldr	r0, [sp, #4]
 80072ca:	0fdd      	lsrs	r5, r3, #31
 80072cc:	18ed      	adds	r5, r5, r3
 80072ce:	1c7b      	adds	r3, r7, #1
 80072d0:	181b      	adds	r3, r3, r0
 80072d2:	106d      	asrs	r5, r5, #1
 80072d4:	42ab      	cmp	r3, r5
 80072d6:	d900      	bls.n	80072da <__ssputs_r+0x3e>
 80072d8:	001d      	movs	r5, r3
 80072da:	0552      	lsls	r2, r2, #21
 80072dc:	d528      	bpl.n	8007330 <__ssputs_r+0x94>
 80072de:	0029      	movs	r1, r5
 80072e0:	9802      	ldr	r0, [sp, #8]
 80072e2:	f7ff fba7 	bl	8006a34 <_malloc_r>
 80072e6:	1e06      	subs	r6, r0, #0
 80072e8:	d02c      	beq.n	8007344 <__ssputs_r+0xa8>
 80072ea:	9a01      	ldr	r2, [sp, #4]
 80072ec:	6921      	ldr	r1, [r4, #16]
 80072ee:	f000 fa09 	bl	8007704 <memcpy>
 80072f2:	89a2      	ldrh	r2, [r4, #12]
 80072f4:	4b18      	ldr	r3, [pc, #96]	@ (8007358 <__ssputs_r+0xbc>)
 80072f6:	401a      	ands	r2, r3
 80072f8:	2380      	movs	r3, #128	@ 0x80
 80072fa:	4313      	orrs	r3, r2
 80072fc:	81a3      	strh	r3, [r4, #12]
 80072fe:	9b01      	ldr	r3, [sp, #4]
 8007300:	6126      	str	r6, [r4, #16]
 8007302:	18f6      	adds	r6, r6, r3
 8007304:	6026      	str	r6, [r4, #0]
 8007306:	003e      	movs	r6, r7
 8007308:	6165      	str	r5, [r4, #20]
 800730a:	1aed      	subs	r5, r5, r3
 800730c:	60a5      	str	r5, [r4, #8]
 800730e:	42be      	cmp	r6, r7
 8007310:	d900      	bls.n	8007314 <__ssputs_r+0x78>
 8007312:	003e      	movs	r6, r7
 8007314:	0032      	movs	r2, r6
 8007316:	9903      	ldr	r1, [sp, #12]
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	f000 f9ce 	bl	80076ba <memmove>
 800731e:	2000      	movs	r0, #0
 8007320:	68a3      	ldr	r3, [r4, #8]
 8007322:	1b9b      	subs	r3, r3, r6
 8007324:	60a3      	str	r3, [r4, #8]
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	199b      	adds	r3, r3, r6
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	b005      	add	sp, #20
 800732e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007330:	002a      	movs	r2, r5
 8007332:	9802      	ldr	r0, [sp, #8]
 8007334:	f000 fa4d 	bl	80077d2 <_realloc_r>
 8007338:	1e06      	subs	r6, r0, #0
 800733a:	d1e0      	bne.n	80072fe <__ssputs_r+0x62>
 800733c:	6921      	ldr	r1, [r4, #16]
 800733e:	9802      	ldr	r0, [sp, #8]
 8007340:	f7ff fb02 	bl	8006948 <_free_r>
 8007344:	230c      	movs	r3, #12
 8007346:	2001      	movs	r0, #1
 8007348:	9a02      	ldr	r2, [sp, #8]
 800734a:	4240      	negs	r0, r0
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	89a2      	ldrh	r2, [r4, #12]
 8007350:	3334      	adds	r3, #52	@ 0x34
 8007352:	4313      	orrs	r3, r2
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	e7e9      	b.n	800732c <__ssputs_r+0x90>
 8007358:	fffffb7f 	.word	0xfffffb7f

0800735c <_svfiprintf_r>:
 800735c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800735e:	b0a1      	sub	sp, #132	@ 0x84
 8007360:	9003      	str	r0, [sp, #12]
 8007362:	001d      	movs	r5, r3
 8007364:	898b      	ldrh	r3, [r1, #12]
 8007366:	000f      	movs	r7, r1
 8007368:	0016      	movs	r6, r2
 800736a:	061b      	lsls	r3, r3, #24
 800736c:	d511      	bpl.n	8007392 <_svfiprintf_r+0x36>
 800736e:	690b      	ldr	r3, [r1, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10e      	bne.n	8007392 <_svfiprintf_r+0x36>
 8007374:	2140      	movs	r1, #64	@ 0x40
 8007376:	f7ff fb5d 	bl	8006a34 <_malloc_r>
 800737a:	6038      	str	r0, [r7, #0]
 800737c:	6138      	str	r0, [r7, #16]
 800737e:	2800      	cmp	r0, #0
 8007380:	d105      	bne.n	800738e <_svfiprintf_r+0x32>
 8007382:	230c      	movs	r3, #12
 8007384:	9a03      	ldr	r2, [sp, #12]
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	2001      	movs	r0, #1
 800738a:	4240      	negs	r0, r0
 800738c:	e0cf      	b.n	800752e <_svfiprintf_r+0x1d2>
 800738e:	2340      	movs	r3, #64	@ 0x40
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	2300      	movs	r3, #0
 8007394:	ac08      	add	r4, sp, #32
 8007396:	6163      	str	r3, [r4, #20]
 8007398:	3320      	adds	r3, #32
 800739a:	7663      	strb	r3, [r4, #25]
 800739c:	3310      	adds	r3, #16
 800739e:	76a3      	strb	r3, [r4, #26]
 80073a0:	9507      	str	r5, [sp, #28]
 80073a2:	0035      	movs	r5, r6
 80073a4:	782b      	ldrb	r3, [r5, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <_svfiprintf_r+0x52>
 80073aa:	2b25      	cmp	r3, #37	@ 0x25
 80073ac:	d148      	bne.n	8007440 <_svfiprintf_r+0xe4>
 80073ae:	1bab      	subs	r3, r5, r6
 80073b0:	9305      	str	r3, [sp, #20]
 80073b2:	42b5      	cmp	r5, r6
 80073b4:	d00b      	beq.n	80073ce <_svfiprintf_r+0x72>
 80073b6:	0032      	movs	r2, r6
 80073b8:	0039      	movs	r1, r7
 80073ba:	9803      	ldr	r0, [sp, #12]
 80073bc:	f7ff ff6e 	bl	800729c <__ssputs_r>
 80073c0:	3001      	adds	r0, #1
 80073c2:	d100      	bne.n	80073c6 <_svfiprintf_r+0x6a>
 80073c4:	e0ae      	b.n	8007524 <_svfiprintf_r+0x1c8>
 80073c6:	6963      	ldr	r3, [r4, #20]
 80073c8:	9a05      	ldr	r2, [sp, #20]
 80073ca:	189b      	adds	r3, r3, r2
 80073cc:	6163      	str	r3, [r4, #20]
 80073ce:	782b      	ldrb	r3, [r5, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d100      	bne.n	80073d6 <_svfiprintf_r+0x7a>
 80073d4:	e0a6      	b.n	8007524 <_svfiprintf_r+0x1c8>
 80073d6:	2201      	movs	r2, #1
 80073d8:	2300      	movs	r3, #0
 80073da:	4252      	negs	r2, r2
 80073dc:	6062      	str	r2, [r4, #4]
 80073de:	a904      	add	r1, sp, #16
 80073e0:	3254      	adds	r2, #84	@ 0x54
 80073e2:	1852      	adds	r2, r2, r1
 80073e4:	1c6e      	adds	r6, r5, #1
 80073e6:	6023      	str	r3, [r4, #0]
 80073e8:	60e3      	str	r3, [r4, #12]
 80073ea:	60a3      	str	r3, [r4, #8]
 80073ec:	7013      	strb	r3, [r2, #0]
 80073ee:	65a3      	str	r3, [r4, #88]	@ 0x58
 80073f0:	4b54      	ldr	r3, [pc, #336]	@ (8007544 <_svfiprintf_r+0x1e8>)
 80073f2:	2205      	movs	r2, #5
 80073f4:	0018      	movs	r0, r3
 80073f6:	7831      	ldrb	r1, [r6, #0]
 80073f8:	9305      	str	r3, [sp, #20]
 80073fa:	f7fe fc18 	bl	8005c2e <memchr>
 80073fe:	1c75      	adds	r5, r6, #1
 8007400:	2800      	cmp	r0, #0
 8007402:	d11f      	bne.n	8007444 <_svfiprintf_r+0xe8>
 8007404:	6822      	ldr	r2, [r4, #0]
 8007406:	06d3      	lsls	r3, r2, #27
 8007408:	d504      	bpl.n	8007414 <_svfiprintf_r+0xb8>
 800740a:	2353      	movs	r3, #83	@ 0x53
 800740c:	a904      	add	r1, sp, #16
 800740e:	185b      	adds	r3, r3, r1
 8007410:	2120      	movs	r1, #32
 8007412:	7019      	strb	r1, [r3, #0]
 8007414:	0713      	lsls	r3, r2, #28
 8007416:	d504      	bpl.n	8007422 <_svfiprintf_r+0xc6>
 8007418:	2353      	movs	r3, #83	@ 0x53
 800741a:	a904      	add	r1, sp, #16
 800741c:	185b      	adds	r3, r3, r1
 800741e:	212b      	movs	r1, #43	@ 0x2b
 8007420:	7019      	strb	r1, [r3, #0]
 8007422:	7833      	ldrb	r3, [r6, #0]
 8007424:	2b2a      	cmp	r3, #42	@ 0x2a
 8007426:	d016      	beq.n	8007456 <_svfiprintf_r+0xfa>
 8007428:	0035      	movs	r5, r6
 800742a:	2100      	movs	r1, #0
 800742c:	200a      	movs	r0, #10
 800742e:	68e3      	ldr	r3, [r4, #12]
 8007430:	782a      	ldrb	r2, [r5, #0]
 8007432:	1c6e      	adds	r6, r5, #1
 8007434:	3a30      	subs	r2, #48	@ 0x30
 8007436:	2a09      	cmp	r2, #9
 8007438:	d950      	bls.n	80074dc <_svfiprintf_r+0x180>
 800743a:	2900      	cmp	r1, #0
 800743c:	d111      	bne.n	8007462 <_svfiprintf_r+0x106>
 800743e:	e017      	b.n	8007470 <_svfiprintf_r+0x114>
 8007440:	3501      	adds	r5, #1
 8007442:	e7af      	b.n	80073a4 <_svfiprintf_r+0x48>
 8007444:	9b05      	ldr	r3, [sp, #20]
 8007446:	6822      	ldr	r2, [r4, #0]
 8007448:	1ac0      	subs	r0, r0, r3
 800744a:	2301      	movs	r3, #1
 800744c:	4083      	lsls	r3, r0
 800744e:	4313      	orrs	r3, r2
 8007450:	002e      	movs	r6, r5
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	e7cc      	b.n	80073f0 <_svfiprintf_r+0x94>
 8007456:	9b07      	ldr	r3, [sp, #28]
 8007458:	1d19      	adds	r1, r3, #4
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	9107      	str	r1, [sp, #28]
 800745e:	2b00      	cmp	r3, #0
 8007460:	db01      	blt.n	8007466 <_svfiprintf_r+0x10a>
 8007462:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007464:	e004      	b.n	8007470 <_svfiprintf_r+0x114>
 8007466:	425b      	negs	r3, r3
 8007468:	60e3      	str	r3, [r4, #12]
 800746a:	2302      	movs	r3, #2
 800746c:	4313      	orrs	r3, r2
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	782b      	ldrb	r3, [r5, #0]
 8007472:	2b2e      	cmp	r3, #46	@ 0x2e
 8007474:	d10c      	bne.n	8007490 <_svfiprintf_r+0x134>
 8007476:	786b      	ldrb	r3, [r5, #1]
 8007478:	2b2a      	cmp	r3, #42	@ 0x2a
 800747a:	d134      	bne.n	80074e6 <_svfiprintf_r+0x18a>
 800747c:	9b07      	ldr	r3, [sp, #28]
 800747e:	3502      	adds	r5, #2
 8007480:	1d1a      	adds	r2, r3, #4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	9207      	str	r2, [sp, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	da01      	bge.n	800748e <_svfiprintf_r+0x132>
 800748a:	2301      	movs	r3, #1
 800748c:	425b      	negs	r3, r3
 800748e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007490:	4e2d      	ldr	r6, [pc, #180]	@ (8007548 <_svfiprintf_r+0x1ec>)
 8007492:	2203      	movs	r2, #3
 8007494:	0030      	movs	r0, r6
 8007496:	7829      	ldrb	r1, [r5, #0]
 8007498:	f7fe fbc9 	bl	8005c2e <memchr>
 800749c:	2800      	cmp	r0, #0
 800749e:	d006      	beq.n	80074ae <_svfiprintf_r+0x152>
 80074a0:	2340      	movs	r3, #64	@ 0x40
 80074a2:	1b80      	subs	r0, r0, r6
 80074a4:	4083      	lsls	r3, r0
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	3501      	adds	r5, #1
 80074aa:	4313      	orrs	r3, r2
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	7829      	ldrb	r1, [r5, #0]
 80074b0:	2206      	movs	r2, #6
 80074b2:	4826      	ldr	r0, [pc, #152]	@ (800754c <_svfiprintf_r+0x1f0>)
 80074b4:	1c6e      	adds	r6, r5, #1
 80074b6:	7621      	strb	r1, [r4, #24]
 80074b8:	f7fe fbb9 	bl	8005c2e <memchr>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d038      	beq.n	8007532 <_svfiprintf_r+0x1d6>
 80074c0:	4b23      	ldr	r3, [pc, #140]	@ (8007550 <_svfiprintf_r+0x1f4>)
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d122      	bne.n	800750c <_svfiprintf_r+0x1b0>
 80074c6:	2207      	movs	r2, #7
 80074c8:	9b07      	ldr	r3, [sp, #28]
 80074ca:	3307      	adds	r3, #7
 80074cc:	4393      	bics	r3, r2
 80074ce:	3308      	adds	r3, #8
 80074d0:	9307      	str	r3, [sp, #28]
 80074d2:	6963      	ldr	r3, [r4, #20]
 80074d4:	9a04      	ldr	r2, [sp, #16]
 80074d6:	189b      	adds	r3, r3, r2
 80074d8:	6163      	str	r3, [r4, #20]
 80074da:	e762      	b.n	80073a2 <_svfiprintf_r+0x46>
 80074dc:	4343      	muls	r3, r0
 80074de:	0035      	movs	r5, r6
 80074e0:	2101      	movs	r1, #1
 80074e2:	189b      	adds	r3, r3, r2
 80074e4:	e7a4      	b.n	8007430 <_svfiprintf_r+0xd4>
 80074e6:	2300      	movs	r3, #0
 80074e8:	200a      	movs	r0, #10
 80074ea:	0019      	movs	r1, r3
 80074ec:	3501      	adds	r5, #1
 80074ee:	6063      	str	r3, [r4, #4]
 80074f0:	782a      	ldrb	r2, [r5, #0]
 80074f2:	1c6e      	adds	r6, r5, #1
 80074f4:	3a30      	subs	r2, #48	@ 0x30
 80074f6:	2a09      	cmp	r2, #9
 80074f8:	d903      	bls.n	8007502 <_svfiprintf_r+0x1a6>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0c8      	beq.n	8007490 <_svfiprintf_r+0x134>
 80074fe:	9109      	str	r1, [sp, #36]	@ 0x24
 8007500:	e7c6      	b.n	8007490 <_svfiprintf_r+0x134>
 8007502:	4341      	muls	r1, r0
 8007504:	0035      	movs	r5, r6
 8007506:	2301      	movs	r3, #1
 8007508:	1889      	adds	r1, r1, r2
 800750a:	e7f1      	b.n	80074f0 <_svfiprintf_r+0x194>
 800750c:	aa07      	add	r2, sp, #28
 800750e:	9200      	str	r2, [sp, #0]
 8007510:	0021      	movs	r1, r4
 8007512:	003a      	movs	r2, r7
 8007514:	4b0f      	ldr	r3, [pc, #60]	@ (8007554 <_svfiprintf_r+0x1f8>)
 8007516:	9803      	ldr	r0, [sp, #12]
 8007518:	f7fd fde2 	bl	80050e0 <_printf_float>
 800751c:	9004      	str	r0, [sp, #16]
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	3301      	adds	r3, #1
 8007522:	d1d6      	bne.n	80074d2 <_svfiprintf_r+0x176>
 8007524:	89bb      	ldrh	r3, [r7, #12]
 8007526:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007528:	065b      	lsls	r3, r3, #25
 800752a:	d500      	bpl.n	800752e <_svfiprintf_r+0x1d2>
 800752c:	e72c      	b.n	8007388 <_svfiprintf_r+0x2c>
 800752e:	b021      	add	sp, #132	@ 0x84
 8007530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007532:	aa07      	add	r2, sp, #28
 8007534:	9200      	str	r2, [sp, #0]
 8007536:	0021      	movs	r1, r4
 8007538:	003a      	movs	r2, r7
 800753a:	4b06      	ldr	r3, [pc, #24]	@ (8007554 <_svfiprintf_r+0x1f8>)
 800753c:	9803      	ldr	r0, [sp, #12]
 800753e:	f7fe f87d 	bl	800563c <_printf_i>
 8007542:	e7eb      	b.n	800751c <_svfiprintf_r+0x1c0>
 8007544:	08008130 	.word	0x08008130
 8007548:	08008136 	.word	0x08008136
 800754c:	0800813a 	.word	0x0800813a
 8007550:	080050e1 	.word	0x080050e1
 8007554:	0800729d 	.word	0x0800729d

08007558 <__sflush_r>:
 8007558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800755a:	220c      	movs	r2, #12
 800755c:	5e8b      	ldrsh	r3, [r1, r2]
 800755e:	0005      	movs	r5, r0
 8007560:	000c      	movs	r4, r1
 8007562:	071a      	lsls	r2, r3, #28
 8007564:	d456      	bmi.n	8007614 <__sflush_r+0xbc>
 8007566:	684a      	ldr	r2, [r1, #4]
 8007568:	2a00      	cmp	r2, #0
 800756a:	dc02      	bgt.n	8007572 <__sflush_r+0x1a>
 800756c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800756e:	2a00      	cmp	r2, #0
 8007570:	dd4e      	ble.n	8007610 <__sflush_r+0xb8>
 8007572:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007574:	2f00      	cmp	r7, #0
 8007576:	d04b      	beq.n	8007610 <__sflush_r+0xb8>
 8007578:	2200      	movs	r2, #0
 800757a:	2080      	movs	r0, #128	@ 0x80
 800757c:	682e      	ldr	r6, [r5, #0]
 800757e:	602a      	str	r2, [r5, #0]
 8007580:	001a      	movs	r2, r3
 8007582:	0140      	lsls	r0, r0, #5
 8007584:	6a21      	ldr	r1, [r4, #32]
 8007586:	4002      	ands	r2, r0
 8007588:	4203      	tst	r3, r0
 800758a:	d033      	beq.n	80075f4 <__sflush_r+0x9c>
 800758c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	075b      	lsls	r3, r3, #29
 8007592:	d506      	bpl.n	80075a2 <__sflush_r+0x4a>
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	1ad2      	subs	r2, r2, r3
 8007598:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <__sflush_r+0x4a>
 800759e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075a0:	1ad2      	subs	r2, r2, r3
 80075a2:	2300      	movs	r3, #0
 80075a4:	0028      	movs	r0, r5
 80075a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80075a8:	6a21      	ldr	r1, [r4, #32]
 80075aa:	47b8      	blx	r7
 80075ac:	89a2      	ldrh	r2, [r4, #12]
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	d106      	bne.n	80075c0 <__sflush_r+0x68>
 80075b2:	6829      	ldr	r1, [r5, #0]
 80075b4:	291d      	cmp	r1, #29
 80075b6:	d846      	bhi.n	8007646 <__sflush_r+0xee>
 80075b8:	4b29      	ldr	r3, [pc, #164]	@ (8007660 <__sflush_r+0x108>)
 80075ba:	410b      	asrs	r3, r1
 80075bc:	07db      	lsls	r3, r3, #31
 80075be:	d442      	bmi.n	8007646 <__sflush_r+0xee>
 80075c0:	2300      	movs	r3, #0
 80075c2:	6063      	str	r3, [r4, #4]
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	6023      	str	r3, [r4, #0]
 80075c8:	04d2      	lsls	r2, r2, #19
 80075ca:	d505      	bpl.n	80075d8 <__sflush_r+0x80>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d102      	bne.n	80075d6 <__sflush_r+0x7e>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d100      	bne.n	80075d8 <__sflush_r+0x80>
 80075d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80075d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075da:	602e      	str	r6, [r5, #0]
 80075dc:	2900      	cmp	r1, #0
 80075de:	d017      	beq.n	8007610 <__sflush_r+0xb8>
 80075e0:	0023      	movs	r3, r4
 80075e2:	3344      	adds	r3, #68	@ 0x44
 80075e4:	4299      	cmp	r1, r3
 80075e6:	d002      	beq.n	80075ee <__sflush_r+0x96>
 80075e8:	0028      	movs	r0, r5
 80075ea:	f7ff f9ad 	bl	8006948 <_free_r>
 80075ee:	2300      	movs	r3, #0
 80075f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80075f2:	e00d      	b.n	8007610 <__sflush_r+0xb8>
 80075f4:	2301      	movs	r3, #1
 80075f6:	0028      	movs	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	0002      	movs	r2, r0
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d1c6      	bne.n	800758e <__sflush_r+0x36>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0c3      	beq.n	800758e <__sflush_r+0x36>
 8007606:	2b1d      	cmp	r3, #29
 8007608:	d001      	beq.n	800760e <__sflush_r+0xb6>
 800760a:	2b16      	cmp	r3, #22
 800760c:	d11a      	bne.n	8007644 <__sflush_r+0xec>
 800760e:	602e      	str	r6, [r5, #0]
 8007610:	2000      	movs	r0, #0
 8007612:	e01e      	b.n	8007652 <__sflush_r+0xfa>
 8007614:	690e      	ldr	r6, [r1, #16]
 8007616:	2e00      	cmp	r6, #0
 8007618:	d0fa      	beq.n	8007610 <__sflush_r+0xb8>
 800761a:	680f      	ldr	r7, [r1, #0]
 800761c:	600e      	str	r6, [r1, #0]
 800761e:	1bba      	subs	r2, r7, r6
 8007620:	9201      	str	r2, [sp, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	079b      	lsls	r3, r3, #30
 8007626:	d100      	bne.n	800762a <__sflush_r+0xd2>
 8007628:	694a      	ldr	r2, [r1, #20]
 800762a:	60a2      	str	r2, [r4, #8]
 800762c:	9b01      	ldr	r3, [sp, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	ddee      	ble.n	8007610 <__sflush_r+0xb8>
 8007632:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007634:	0032      	movs	r2, r6
 8007636:	001f      	movs	r7, r3
 8007638:	0028      	movs	r0, r5
 800763a:	9b01      	ldr	r3, [sp, #4]
 800763c:	6a21      	ldr	r1, [r4, #32]
 800763e:	47b8      	blx	r7
 8007640:	2800      	cmp	r0, #0
 8007642:	dc07      	bgt.n	8007654 <__sflush_r+0xfc>
 8007644:	89a2      	ldrh	r2, [r4, #12]
 8007646:	2340      	movs	r3, #64	@ 0x40
 8007648:	2001      	movs	r0, #1
 800764a:	4313      	orrs	r3, r2
 800764c:	b21b      	sxth	r3, r3
 800764e:	81a3      	strh	r3, [r4, #12]
 8007650:	4240      	negs	r0, r0
 8007652:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007654:	9b01      	ldr	r3, [sp, #4]
 8007656:	1836      	adds	r6, r6, r0
 8007658:	1a1b      	subs	r3, r3, r0
 800765a:	9301      	str	r3, [sp, #4]
 800765c:	e7e6      	b.n	800762c <__sflush_r+0xd4>
 800765e:	46c0      	nop			@ (mov r8, r8)
 8007660:	dfbffffe 	.word	0xdfbffffe

08007664 <_fflush_r>:
 8007664:	690b      	ldr	r3, [r1, #16]
 8007666:	b570      	push	{r4, r5, r6, lr}
 8007668:	0005      	movs	r5, r0
 800766a:	000c      	movs	r4, r1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <_fflush_r+0x12>
 8007670:	2500      	movs	r5, #0
 8007672:	0028      	movs	r0, r5
 8007674:	bd70      	pop	{r4, r5, r6, pc}
 8007676:	2800      	cmp	r0, #0
 8007678:	d004      	beq.n	8007684 <_fflush_r+0x20>
 800767a:	6a03      	ldr	r3, [r0, #32]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <_fflush_r+0x20>
 8007680:	f7fe f97a 	bl	8005978 <__sinit>
 8007684:	220c      	movs	r2, #12
 8007686:	5ea3      	ldrsh	r3, [r4, r2]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0f1      	beq.n	8007670 <_fflush_r+0xc>
 800768c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800768e:	07d2      	lsls	r2, r2, #31
 8007690:	d404      	bmi.n	800769c <_fflush_r+0x38>
 8007692:	059b      	lsls	r3, r3, #22
 8007694:	d402      	bmi.n	800769c <_fflush_r+0x38>
 8007696:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007698:	f7fe fac7 	bl	8005c2a <__retarget_lock_acquire_recursive>
 800769c:	0028      	movs	r0, r5
 800769e:	0021      	movs	r1, r4
 80076a0:	f7ff ff5a 	bl	8007558 <__sflush_r>
 80076a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076a6:	0005      	movs	r5, r0
 80076a8:	07db      	lsls	r3, r3, #31
 80076aa:	d4e2      	bmi.n	8007672 <_fflush_r+0xe>
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	059b      	lsls	r3, r3, #22
 80076b0:	d4df      	bmi.n	8007672 <_fflush_r+0xe>
 80076b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076b4:	f7fe faba 	bl	8005c2c <__retarget_lock_release_recursive>
 80076b8:	e7db      	b.n	8007672 <_fflush_r+0xe>

080076ba <memmove>:
 80076ba:	b510      	push	{r4, lr}
 80076bc:	4288      	cmp	r0, r1
 80076be:	d806      	bhi.n	80076ce <memmove+0x14>
 80076c0:	2300      	movs	r3, #0
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d008      	beq.n	80076d8 <memmove+0x1e>
 80076c6:	5ccc      	ldrb	r4, [r1, r3]
 80076c8:	54c4      	strb	r4, [r0, r3]
 80076ca:	3301      	adds	r3, #1
 80076cc:	e7f9      	b.n	80076c2 <memmove+0x8>
 80076ce:	188b      	adds	r3, r1, r2
 80076d0:	4298      	cmp	r0, r3
 80076d2:	d2f5      	bcs.n	80076c0 <memmove+0x6>
 80076d4:	3a01      	subs	r2, #1
 80076d6:	d200      	bcs.n	80076da <memmove+0x20>
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	5c8b      	ldrb	r3, [r1, r2]
 80076dc:	5483      	strb	r3, [r0, r2]
 80076de:	e7f9      	b.n	80076d4 <memmove+0x1a>

080076e0 <_sbrk_r>:
 80076e0:	2300      	movs	r3, #0
 80076e2:	b570      	push	{r4, r5, r6, lr}
 80076e4:	4d06      	ldr	r5, [pc, #24]	@ (8007700 <_sbrk_r+0x20>)
 80076e6:	0004      	movs	r4, r0
 80076e8:	0008      	movs	r0, r1
 80076ea:	602b      	str	r3, [r5, #0]
 80076ec:	f7fb fce4 	bl	80030b8 <_sbrk>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d103      	bne.n	80076fc <_sbrk_r+0x1c>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d000      	beq.n	80076fc <_sbrk_r+0x1c>
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	bd70      	pop	{r4, r5, r6, pc}
 80076fe:	46c0      	nop			@ (mov r8, r8)
 8007700:	20000404 	.word	0x20000404

08007704 <memcpy>:
 8007704:	2300      	movs	r3, #0
 8007706:	b510      	push	{r4, lr}
 8007708:	429a      	cmp	r2, r3
 800770a:	d100      	bne.n	800770e <memcpy+0xa>
 800770c:	bd10      	pop	{r4, pc}
 800770e:	5ccc      	ldrb	r4, [r1, r3]
 8007710:	54c4      	strb	r4, [r0, r3]
 8007712:	3301      	adds	r3, #1
 8007714:	e7f8      	b.n	8007708 <memcpy+0x4>
	...

08007718 <__assert_func>:
 8007718:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800771a:	0014      	movs	r4, r2
 800771c:	001a      	movs	r2, r3
 800771e:	4b09      	ldr	r3, [pc, #36]	@ (8007744 <__assert_func+0x2c>)
 8007720:	0005      	movs	r5, r0
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	000e      	movs	r6, r1
 8007726:	68d8      	ldr	r0, [r3, #12]
 8007728:	4b07      	ldr	r3, [pc, #28]	@ (8007748 <__assert_func+0x30>)
 800772a:	2c00      	cmp	r4, #0
 800772c:	d101      	bne.n	8007732 <__assert_func+0x1a>
 800772e:	4b07      	ldr	r3, [pc, #28]	@ (800774c <__assert_func+0x34>)
 8007730:	001c      	movs	r4, r3
 8007732:	4907      	ldr	r1, [pc, #28]	@ (8007750 <__assert_func+0x38>)
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	9402      	str	r4, [sp, #8]
 8007738:	002b      	movs	r3, r5
 800773a:	9600      	str	r6, [sp, #0]
 800773c:	f000 f886 	bl	800784c <fiprintf>
 8007740:	f000 f894 	bl	800786c <abort>
 8007744:	2000001c 	.word	0x2000001c
 8007748:	0800814b 	.word	0x0800814b
 800774c:	08008186 	.word	0x08008186
 8007750:	08008158 	.word	0x08008158

08007754 <_calloc_r>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	0c0b      	lsrs	r3, r1, #16
 8007758:	0c15      	lsrs	r5, r2, #16
 800775a:	2b00      	cmp	r3, #0
 800775c:	d11e      	bne.n	800779c <_calloc_r+0x48>
 800775e:	2d00      	cmp	r5, #0
 8007760:	d10c      	bne.n	800777c <_calloc_r+0x28>
 8007762:	b289      	uxth	r1, r1
 8007764:	b294      	uxth	r4, r2
 8007766:	434c      	muls	r4, r1
 8007768:	0021      	movs	r1, r4
 800776a:	f7ff f963 	bl	8006a34 <_malloc_r>
 800776e:	1e05      	subs	r5, r0, #0
 8007770:	d01a      	beq.n	80077a8 <_calloc_r+0x54>
 8007772:	0022      	movs	r2, r4
 8007774:	2100      	movs	r1, #0
 8007776:	f7fe f9d3 	bl	8005b20 <memset>
 800777a:	e016      	b.n	80077aa <_calloc_r+0x56>
 800777c:	1c2b      	adds	r3, r5, #0
 800777e:	1c0c      	adds	r4, r1, #0
 8007780:	b289      	uxth	r1, r1
 8007782:	b292      	uxth	r2, r2
 8007784:	434a      	muls	r2, r1
 8007786:	b29b      	uxth	r3, r3
 8007788:	b2a1      	uxth	r1, r4
 800778a:	4359      	muls	r1, r3
 800778c:	0c14      	lsrs	r4, r2, #16
 800778e:	190c      	adds	r4, r1, r4
 8007790:	0c23      	lsrs	r3, r4, #16
 8007792:	d107      	bne.n	80077a4 <_calloc_r+0x50>
 8007794:	0424      	lsls	r4, r4, #16
 8007796:	b292      	uxth	r2, r2
 8007798:	4314      	orrs	r4, r2
 800779a:	e7e5      	b.n	8007768 <_calloc_r+0x14>
 800779c:	2d00      	cmp	r5, #0
 800779e:	d101      	bne.n	80077a4 <_calloc_r+0x50>
 80077a0:	1c14      	adds	r4, r2, #0
 80077a2:	e7ed      	b.n	8007780 <_calloc_r+0x2c>
 80077a4:	230c      	movs	r3, #12
 80077a6:	6003      	str	r3, [r0, #0]
 80077a8:	2500      	movs	r5, #0
 80077aa:	0028      	movs	r0, r5
 80077ac:	bd70      	pop	{r4, r5, r6, pc}

080077ae <__ascii_mbtowc>:
 80077ae:	b082      	sub	sp, #8
 80077b0:	2900      	cmp	r1, #0
 80077b2:	d100      	bne.n	80077b6 <__ascii_mbtowc+0x8>
 80077b4:	a901      	add	r1, sp, #4
 80077b6:	1e10      	subs	r0, r2, #0
 80077b8:	d006      	beq.n	80077c8 <__ascii_mbtowc+0x1a>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d006      	beq.n	80077cc <__ascii_mbtowc+0x1e>
 80077be:	7813      	ldrb	r3, [r2, #0]
 80077c0:	600b      	str	r3, [r1, #0]
 80077c2:	7810      	ldrb	r0, [r2, #0]
 80077c4:	1e43      	subs	r3, r0, #1
 80077c6:	4198      	sbcs	r0, r3
 80077c8:	b002      	add	sp, #8
 80077ca:	4770      	bx	lr
 80077cc:	2002      	movs	r0, #2
 80077ce:	4240      	negs	r0, r0
 80077d0:	e7fa      	b.n	80077c8 <__ascii_mbtowc+0x1a>

080077d2 <_realloc_r>:
 80077d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077d4:	0006      	movs	r6, r0
 80077d6:	000c      	movs	r4, r1
 80077d8:	0015      	movs	r5, r2
 80077da:	2900      	cmp	r1, #0
 80077dc:	d105      	bne.n	80077ea <_realloc_r+0x18>
 80077de:	0011      	movs	r1, r2
 80077e0:	f7ff f928 	bl	8006a34 <_malloc_r>
 80077e4:	0004      	movs	r4, r0
 80077e6:	0020      	movs	r0, r4
 80077e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077ea:	2a00      	cmp	r2, #0
 80077ec:	d103      	bne.n	80077f6 <_realloc_r+0x24>
 80077ee:	f7ff f8ab 	bl	8006948 <_free_r>
 80077f2:	2400      	movs	r4, #0
 80077f4:	e7f7      	b.n	80077e6 <_realloc_r+0x14>
 80077f6:	f000 f840 	bl	800787a <_malloc_usable_size_r>
 80077fa:	0007      	movs	r7, r0
 80077fc:	4285      	cmp	r5, r0
 80077fe:	d802      	bhi.n	8007806 <_realloc_r+0x34>
 8007800:	0843      	lsrs	r3, r0, #1
 8007802:	42ab      	cmp	r3, r5
 8007804:	d3ef      	bcc.n	80077e6 <_realloc_r+0x14>
 8007806:	0029      	movs	r1, r5
 8007808:	0030      	movs	r0, r6
 800780a:	f7ff f913 	bl	8006a34 <_malloc_r>
 800780e:	9001      	str	r0, [sp, #4]
 8007810:	2800      	cmp	r0, #0
 8007812:	d0ee      	beq.n	80077f2 <_realloc_r+0x20>
 8007814:	002a      	movs	r2, r5
 8007816:	42bd      	cmp	r5, r7
 8007818:	d900      	bls.n	800781c <_realloc_r+0x4a>
 800781a:	003a      	movs	r2, r7
 800781c:	0021      	movs	r1, r4
 800781e:	9801      	ldr	r0, [sp, #4]
 8007820:	f7ff ff70 	bl	8007704 <memcpy>
 8007824:	0021      	movs	r1, r4
 8007826:	0030      	movs	r0, r6
 8007828:	f7ff f88e 	bl	8006948 <_free_r>
 800782c:	9c01      	ldr	r4, [sp, #4]
 800782e:	e7da      	b.n	80077e6 <_realloc_r+0x14>

08007830 <__ascii_wctomb>:
 8007830:	0003      	movs	r3, r0
 8007832:	1e08      	subs	r0, r1, #0
 8007834:	d005      	beq.n	8007842 <__ascii_wctomb+0x12>
 8007836:	2aff      	cmp	r2, #255	@ 0xff
 8007838:	d904      	bls.n	8007844 <__ascii_wctomb+0x14>
 800783a:	228a      	movs	r2, #138	@ 0x8a
 800783c:	2001      	movs	r0, #1
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	4240      	negs	r0, r0
 8007842:	4770      	bx	lr
 8007844:	2001      	movs	r0, #1
 8007846:	700a      	strb	r2, [r1, #0]
 8007848:	e7fb      	b.n	8007842 <__ascii_wctomb+0x12>
	...

0800784c <fiprintf>:
 800784c:	b40e      	push	{r1, r2, r3}
 800784e:	b517      	push	{r0, r1, r2, r4, lr}
 8007850:	4c05      	ldr	r4, [pc, #20]	@ (8007868 <fiprintf+0x1c>)
 8007852:	ab05      	add	r3, sp, #20
 8007854:	cb04      	ldmia	r3!, {r2}
 8007856:	0001      	movs	r1, r0
 8007858:	6820      	ldr	r0, [r4, #0]
 800785a:	9301      	str	r3, [sp, #4]
 800785c:	f000 f83c 	bl	80078d8 <_vfiprintf_r>
 8007860:	bc1e      	pop	{r1, r2, r3, r4}
 8007862:	bc08      	pop	{r3}
 8007864:	b003      	add	sp, #12
 8007866:	4718      	bx	r3
 8007868:	2000001c 	.word	0x2000001c

0800786c <abort>:
 800786c:	2006      	movs	r0, #6
 800786e:	b510      	push	{r4, lr}
 8007870:	f000 fa18 	bl	8007ca4 <raise>
 8007874:	2001      	movs	r0, #1
 8007876:	f7fb fbac 	bl	8002fd2 <_exit>

0800787a <_malloc_usable_size_r>:
 800787a:	1f0b      	subs	r3, r1, #4
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	1f18      	subs	r0, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	da01      	bge.n	8007888 <_malloc_usable_size_r+0xe>
 8007884:	580b      	ldr	r3, [r1, r0]
 8007886:	18c0      	adds	r0, r0, r3
 8007888:	4770      	bx	lr

0800788a <__sfputc_r>:
 800788a:	6893      	ldr	r3, [r2, #8]
 800788c:	b510      	push	{r4, lr}
 800788e:	3b01      	subs	r3, #1
 8007890:	6093      	str	r3, [r2, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	da04      	bge.n	80078a0 <__sfputc_r+0x16>
 8007896:	6994      	ldr	r4, [r2, #24]
 8007898:	42a3      	cmp	r3, r4
 800789a:	db07      	blt.n	80078ac <__sfputc_r+0x22>
 800789c:	290a      	cmp	r1, #10
 800789e:	d005      	beq.n	80078ac <__sfputc_r+0x22>
 80078a0:	6813      	ldr	r3, [r2, #0]
 80078a2:	1c58      	adds	r0, r3, #1
 80078a4:	6010      	str	r0, [r2, #0]
 80078a6:	7019      	strb	r1, [r3, #0]
 80078a8:	0008      	movs	r0, r1
 80078aa:	bd10      	pop	{r4, pc}
 80078ac:	f000 f930 	bl	8007b10 <__swbuf_r>
 80078b0:	0001      	movs	r1, r0
 80078b2:	e7f9      	b.n	80078a8 <__sfputc_r+0x1e>

080078b4 <__sfputs_r>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	0006      	movs	r6, r0
 80078b8:	000f      	movs	r7, r1
 80078ba:	0014      	movs	r4, r2
 80078bc:	18d5      	adds	r5, r2, r3
 80078be:	42ac      	cmp	r4, r5
 80078c0:	d101      	bne.n	80078c6 <__sfputs_r+0x12>
 80078c2:	2000      	movs	r0, #0
 80078c4:	e007      	b.n	80078d6 <__sfputs_r+0x22>
 80078c6:	7821      	ldrb	r1, [r4, #0]
 80078c8:	003a      	movs	r2, r7
 80078ca:	0030      	movs	r0, r6
 80078cc:	f7ff ffdd 	bl	800788a <__sfputc_r>
 80078d0:	3401      	adds	r4, #1
 80078d2:	1c43      	adds	r3, r0, #1
 80078d4:	d1f3      	bne.n	80078be <__sfputs_r+0xa>
 80078d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078d8 <_vfiprintf_r>:
 80078d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078da:	b0a1      	sub	sp, #132	@ 0x84
 80078dc:	000f      	movs	r7, r1
 80078de:	0015      	movs	r5, r2
 80078e0:	001e      	movs	r6, r3
 80078e2:	9003      	str	r0, [sp, #12]
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d004      	beq.n	80078f2 <_vfiprintf_r+0x1a>
 80078e8:	6a03      	ldr	r3, [r0, #32]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <_vfiprintf_r+0x1a>
 80078ee:	f7fe f843 	bl	8005978 <__sinit>
 80078f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078f4:	07db      	lsls	r3, r3, #31
 80078f6:	d405      	bmi.n	8007904 <_vfiprintf_r+0x2c>
 80078f8:	89bb      	ldrh	r3, [r7, #12]
 80078fa:	059b      	lsls	r3, r3, #22
 80078fc:	d402      	bmi.n	8007904 <_vfiprintf_r+0x2c>
 80078fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007900:	f7fe f993 	bl	8005c2a <__retarget_lock_acquire_recursive>
 8007904:	89bb      	ldrh	r3, [r7, #12]
 8007906:	071b      	lsls	r3, r3, #28
 8007908:	d502      	bpl.n	8007910 <_vfiprintf_r+0x38>
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d113      	bne.n	8007938 <_vfiprintf_r+0x60>
 8007910:	0039      	movs	r1, r7
 8007912:	9803      	ldr	r0, [sp, #12]
 8007914:	f000 f93e 	bl	8007b94 <__swsetup_r>
 8007918:	2800      	cmp	r0, #0
 800791a:	d00d      	beq.n	8007938 <_vfiprintf_r+0x60>
 800791c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800791e:	07db      	lsls	r3, r3, #31
 8007920:	d503      	bpl.n	800792a <_vfiprintf_r+0x52>
 8007922:	2001      	movs	r0, #1
 8007924:	4240      	negs	r0, r0
 8007926:	b021      	add	sp, #132	@ 0x84
 8007928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800792a:	89bb      	ldrh	r3, [r7, #12]
 800792c:	059b      	lsls	r3, r3, #22
 800792e:	d4f8      	bmi.n	8007922 <_vfiprintf_r+0x4a>
 8007930:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007932:	f7fe f97b 	bl	8005c2c <__retarget_lock_release_recursive>
 8007936:	e7f4      	b.n	8007922 <_vfiprintf_r+0x4a>
 8007938:	2300      	movs	r3, #0
 800793a:	ac08      	add	r4, sp, #32
 800793c:	6163      	str	r3, [r4, #20]
 800793e:	3320      	adds	r3, #32
 8007940:	7663      	strb	r3, [r4, #25]
 8007942:	3310      	adds	r3, #16
 8007944:	76a3      	strb	r3, [r4, #26]
 8007946:	9607      	str	r6, [sp, #28]
 8007948:	002e      	movs	r6, r5
 800794a:	7833      	ldrb	r3, [r6, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <_vfiprintf_r+0x7c>
 8007950:	2b25      	cmp	r3, #37	@ 0x25
 8007952:	d148      	bne.n	80079e6 <_vfiprintf_r+0x10e>
 8007954:	1b73      	subs	r3, r6, r5
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	42ae      	cmp	r6, r5
 800795a:	d00b      	beq.n	8007974 <_vfiprintf_r+0x9c>
 800795c:	002a      	movs	r2, r5
 800795e:	0039      	movs	r1, r7
 8007960:	9803      	ldr	r0, [sp, #12]
 8007962:	f7ff ffa7 	bl	80078b4 <__sfputs_r>
 8007966:	3001      	adds	r0, #1
 8007968:	d100      	bne.n	800796c <_vfiprintf_r+0x94>
 800796a:	e0ae      	b.n	8007aca <_vfiprintf_r+0x1f2>
 800796c:	6963      	ldr	r3, [r4, #20]
 800796e:	9a05      	ldr	r2, [sp, #20]
 8007970:	189b      	adds	r3, r3, r2
 8007972:	6163      	str	r3, [r4, #20]
 8007974:	7833      	ldrb	r3, [r6, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d100      	bne.n	800797c <_vfiprintf_r+0xa4>
 800797a:	e0a6      	b.n	8007aca <_vfiprintf_r+0x1f2>
 800797c:	2201      	movs	r2, #1
 800797e:	2300      	movs	r3, #0
 8007980:	4252      	negs	r2, r2
 8007982:	6062      	str	r2, [r4, #4]
 8007984:	a904      	add	r1, sp, #16
 8007986:	3254      	adds	r2, #84	@ 0x54
 8007988:	1852      	adds	r2, r2, r1
 800798a:	1c75      	adds	r5, r6, #1
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	60e3      	str	r3, [r4, #12]
 8007990:	60a3      	str	r3, [r4, #8]
 8007992:	7013      	strb	r3, [r2, #0]
 8007994:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007996:	4b59      	ldr	r3, [pc, #356]	@ (8007afc <_vfiprintf_r+0x224>)
 8007998:	2205      	movs	r2, #5
 800799a:	0018      	movs	r0, r3
 800799c:	7829      	ldrb	r1, [r5, #0]
 800799e:	9305      	str	r3, [sp, #20]
 80079a0:	f7fe f945 	bl	8005c2e <memchr>
 80079a4:	1c6e      	adds	r6, r5, #1
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d11f      	bne.n	80079ea <_vfiprintf_r+0x112>
 80079aa:	6822      	ldr	r2, [r4, #0]
 80079ac:	06d3      	lsls	r3, r2, #27
 80079ae:	d504      	bpl.n	80079ba <_vfiprintf_r+0xe2>
 80079b0:	2353      	movs	r3, #83	@ 0x53
 80079b2:	a904      	add	r1, sp, #16
 80079b4:	185b      	adds	r3, r3, r1
 80079b6:	2120      	movs	r1, #32
 80079b8:	7019      	strb	r1, [r3, #0]
 80079ba:	0713      	lsls	r3, r2, #28
 80079bc:	d504      	bpl.n	80079c8 <_vfiprintf_r+0xf0>
 80079be:	2353      	movs	r3, #83	@ 0x53
 80079c0:	a904      	add	r1, sp, #16
 80079c2:	185b      	adds	r3, r3, r1
 80079c4:	212b      	movs	r1, #43	@ 0x2b
 80079c6:	7019      	strb	r1, [r3, #0]
 80079c8:	782b      	ldrb	r3, [r5, #0]
 80079ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80079cc:	d016      	beq.n	80079fc <_vfiprintf_r+0x124>
 80079ce:	002e      	movs	r6, r5
 80079d0:	2100      	movs	r1, #0
 80079d2:	200a      	movs	r0, #10
 80079d4:	68e3      	ldr	r3, [r4, #12]
 80079d6:	7832      	ldrb	r2, [r6, #0]
 80079d8:	1c75      	adds	r5, r6, #1
 80079da:	3a30      	subs	r2, #48	@ 0x30
 80079dc:	2a09      	cmp	r2, #9
 80079de:	d950      	bls.n	8007a82 <_vfiprintf_r+0x1aa>
 80079e0:	2900      	cmp	r1, #0
 80079e2:	d111      	bne.n	8007a08 <_vfiprintf_r+0x130>
 80079e4:	e017      	b.n	8007a16 <_vfiprintf_r+0x13e>
 80079e6:	3601      	adds	r6, #1
 80079e8:	e7af      	b.n	800794a <_vfiprintf_r+0x72>
 80079ea:	9b05      	ldr	r3, [sp, #20]
 80079ec:	6822      	ldr	r2, [r4, #0]
 80079ee:	1ac0      	subs	r0, r0, r3
 80079f0:	2301      	movs	r3, #1
 80079f2:	4083      	lsls	r3, r0
 80079f4:	4313      	orrs	r3, r2
 80079f6:	0035      	movs	r5, r6
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	e7cc      	b.n	8007996 <_vfiprintf_r+0xbe>
 80079fc:	9b07      	ldr	r3, [sp, #28]
 80079fe:	1d19      	adds	r1, r3, #4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	9107      	str	r1, [sp, #28]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	db01      	blt.n	8007a0c <_vfiprintf_r+0x134>
 8007a08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a0a:	e004      	b.n	8007a16 <_vfiprintf_r+0x13e>
 8007a0c:	425b      	negs	r3, r3
 8007a0e:	60e3      	str	r3, [r4, #12]
 8007a10:	2302      	movs	r3, #2
 8007a12:	4313      	orrs	r3, r2
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	7833      	ldrb	r3, [r6, #0]
 8007a18:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a1a:	d10c      	bne.n	8007a36 <_vfiprintf_r+0x15e>
 8007a1c:	7873      	ldrb	r3, [r6, #1]
 8007a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a20:	d134      	bne.n	8007a8c <_vfiprintf_r+0x1b4>
 8007a22:	9b07      	ldr	r3, [sp, #28]
 8007a24:	3602      	adds	r6, #2
 8007a26:	1d1a      	adds	r2, r3, #4
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	9207      	str	r2, [sp, #28]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	da01      	bge.n	8007a34 <_vfiprintf_r+0x15c>
 8007a30:	2301      	movs	r3, #1
 8007a32:	425b      	negs	r3, r3
 8007a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a36:	4d32      	ldr	r5, [pc, #200]	@ (8007b00 <_vfiprintf_r+0x228>)
 8007a38:	2203      	movs	r2, #3
 8007a3a:	0028      	movs	r0, r5
 8007a3c:	7831      	ldrb	r1, [r6, #0]
 8007a3e:	f7fe f8f6 	bl	8005c2e <memchr>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d006      	beq.n	8007a54 <_vfiprintf_r+0x17c>
 8007a46:	2340      	movs	r3, #64	@ 0x40
 8007a48:	1b40      	subs	r0, r0, r5
 8007a4a:	4083      	lsls	r3, r0
 8007a4c:	6822      	ldr	r2, [r4, #0]
 8007a4e:	3601      	adds	r6, #1
 8007a50:	4313      	orrs	r3, r2
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	7831      	ldrb	r1, [r6, #0]
 8007a56:	2206      	movs	r2, #6
 8007a58:	482a      	ldr	r0, [pc, #168]	@ (8007b04 <_vfiprintf_r+0x22c>)
 8007a5a:	1c75      	adds	r5, r6, #1
 8007a5c:	7621      	strb	r1, [r4, #24]
 8007a5e:	f7fe f8e6 	bl	8005c2e <memchr>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	d040      	beq.n	8007ae8 <_vfiprintf_r+0x210>
 8007a66:	4b28      	ldr	r3, [pc, #160]	@ (8007b08 <_vfiprintf_r+0x230>)
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d122      	bne.n	8007ab2 <_vfiprintf_r+0x1da>
 8007a6c:	2207      	movs	r2, #7
 8007a6e:	9b07      	ldr	r3, [sp, #28]
 8007a70:	3307      	adds	r3, #7
 8007a72:	4393      	bics	r3, r2
 8007a74:	3308      	adds	r3, #8
 8007a76:	9307      	str	r3, [sp, #28]
 8007a78:	6963      	ldr	r3, [r4, #20]
 8007a7a:	9a04      	ldr	r2, [sp, #16]
 8007a7c:	189b      	adds	r3, r3, r2
 8007a7e:	6163      	str	r3, [r4, #20]
 8007a80:	e762      	b.n	8007948 <_vfiprintf_r+0x70>
 8007a82:	4343      	muls	r3, r0
 8007a84:	002e      	movs	r6, r5
 8007a86:	2101      	movs	r1, #1
 8007a88:	189b      	adds	r3, r3, r2
 8007a8a:	e7a4      	b.n	80079d6 <_vfiprintf_r+0xfe>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	200a      	movs	r0, #10
 8007a90:	0019      	movs	r1, r3
 8007a92:	3601      	adds	r6, #1
 8007a94:	6063      	str	r3, [r4, #4]
 8007a96:	7832      	ldrb	r2, [r6, #0]
 8007a98:	1c75      	adds	r5, r6, #1
 8007a9a:	3a30      	subs	r2, #48	@ 0x30
 8007a9c:	2a09      	cmp	r2, #9
 8007a9e:	d903      	bls.n	8007aa8 <_vfiprintf_r+0x1d0>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0c8      	beq.n	8007a36 <_vfiprintf_r+0x15e>
 8007aa4:	9109      	str	r1, [sp, #36]	@ 0x24
 8007aa6:	e7c6      	b.n	8007a36 <_vfiprintf_r+0x15e>
 8007aa8:	4341      	muls	r1, r0
 8007aaa:	002e      	movs	r6, r5
 8007aac:	2301      	movs	r3, #1
 8007aae:	1889      	adds	r1, r1, r2
 8007ab0:	e7f1      	b.n	8007a96 <_vfiprintf_r+0x1be>
 8007ab2:	aa07      	add	r2, sp, #28
 8007ab4:	9200      	str	r2, [sp, #0]
 8007ab6:	0021      	movs	r1, r4
 8007ab8:	003a      	movs	r2, r7
 8007aba:	4b14      	ldr	r3, [pc, #80]	@ (8007b0c <_vfiprintf_r+0x234>)
 8007abc:	9803      	ldr	r0, [sp, #12]
 8007abe:	f7fd fb0f 	bl	80050e0 <_printf_float>
 8007ac2:	9004      	str	r0, [sp, #16]
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	d1d6      	bne.n	8007a78 <_vfiprintf_r+0x1a0>
 8007aca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007acc:	07db      	lsls	r3, r3, #31
 8007ace:	d405      	bmi.n	8007adc <_vfiprintf_r+0x204>
 8007ad0:	89bb      	ldrh	r3, [r7, #12]
 8007ad2:	059b      	lsls	r3, r3, #22
 8007ad4:	d402      	bmi.n	8007adc <_vfiprintf_r+0x204>
 8007ad6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007ad8:	f7fe f8a8 	bl	8005c2c <__retarget_lock_release_recursive>
 8007adc:	89bb      	ldrh	r3, [r7, #12]
 8007ade:	065b      	lsls	r3, r3, #25
 8007ae0:	d500      	bpl.n	8007ae4 <_vfiprintf_r+0x20c>
 8007ae2:	e71e      	b.n	8007922 <_vfiprintf_r+0x4a>
 8007ae4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007ae6:	e71e      	b.n	8007926 <_vfiprintf_r+0x4e>
 8007ae8:	aa07      	add	r2, sp, #28
 8007aea:	9200      	str	r2, [sp, #0]
 8007aec:	0021      	movs	r1, r4
 8007aee:	003a      	movs	r2, r7
 8007af0:	4b06      	ldr	r3, [pc, #24]	@ (8007b0c <_vfiprintf_r+0x234>)
 8007af2:	9803      	ldr	r0, [sp, #12]
 8007af4:	f7fd fda2 	bl	800563c <_printf_i>
 8007af8:	e7e3      	b.n	8007ac2 <_vfiprintf_r+0x1ea>
 8007afa:	46c0      	nop			@ (mov r8, r8)
 8007afc:	08008130 	.word	0x08008130
 8007b00:	08008136 	.word	0x08008136
 8007b04:	0800813a 	.word	0x0800813a
 8007b08:	080050e1 	.word	0x080050e1
 8007b0c:	080078b5 	.word	0x080078b5

08007b10 <__swbuf_r>:
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b12:	0006      	movs	r6, r0
 8007b14:	000d      	movs	r5, r1
 8007b16:	0014      	movs	r4, r2
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d004      	beq.n	8007b26 <__swbuf_r+0x16>
 8007b1c:	6a03      	ldr	r3, [r0, #32]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <__swbuf_r+0x16>
 8007b22:	f7fd ff29 	bl	8005978 <__sinit>
 8007b26:	69a3      	ldr	r3, [r4, #24]
 8007b28:	60a3      	str	r3, [r4, #8]
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	071b      	lsls	r3, r3, #28
 8007b2e:	d502      	bpl.n	8007b36 <__swbuf_r+0x26>
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d109      	bne.n	8007b4a <__swbuf_r+0x3a>
 8007b36:	0021      	movs	r1, r4
 8007b38:	0030      	movs	r0, r6
 8007b3a:	f000 f82b 	bl	8007b94 <__swsetup_r>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d003      	beq.n	8007b4a <__swbuf_r+0x3a>
 8007b42:	2501      	movs	r5, #1
 8007b44:	426d      	negs	r5, r5
 8007b46:	0028      	movs	r0, r5
 8007b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b4a:	6923      	ldr	r3, [r4, #16]
 8007b4c:	6820      	ldr	r0, [r4, #0]
 8007b4e:	b2ef      	uxtb	r7, r5
 8007b50:	1ac0      	subs	r0, r0, r3
 8007b52:	6963      	ldr	r3, [r4, #20]
 8007b54:	b2ed      	uxtb	r5, r5
 8007b56:	4283      	cmp	r3, r0
 8007b58:	dc05      	bgt.n	8007b66 <__swbuf_r+0x56>
 8007b5a:	0021      	movs	r1, r4
 8007b5c:	0030      	movs	r0, r6
 8007b5e:	f7ff fd81 	bl	8007664 <_fflush_r>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d1ed      	bne.n	8007b42 <__swbuf_r+0x32>
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	3001      	adds	r0, #1
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	60a3      	str	r3, [r4, #8]
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	6022      	str	r2, [r4, #0]
 8007b74:	701f      	strb	r7, [r3, #0]
 8007b76:	6963      	ldr	r3, [r4, #20]
 8007b78:	4283      	cmp	r3, r0
 8007b7a:	d004      	beq.n	8007b86 <__swbuf_r+0x76>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	07db      	lsls	r3, r3, #31
 8007b80:	d5e1      	bpl.n	8007b46 <__swbuf_r+0x36>
 8007b82:	2d0a      	cmp	r5, #10
 8007b84:	d1df      	bne.n	8007b46 <__swbuf_r+0x36>
 8007b86:	0021      	movs	r1, r4
 8007b88:	0030      	movs	r0, r6
 8007b8a:	f7ff fd6b 	bl	8007664 <_fflush_r>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d0d9      	beq.n	8007b46 <__swbuf_r+0x36>
 8007b92:	e7d6      	b.n	8007b42 <__swbuf_r+0x32>

08007b94 <__swsetup_r>:
 8007b94:	4b2d      	ldr	r3, [pc, #180]	@ (8007c4c <__swsetup_r+0xb8>)
 8007b96:	b570      	push	{r4, r5, r6, lr}
 8007b98:	0005      	movs	r5, r0
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	000c      	movs	r4, r1
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d004      	beq.n	8007bac <__swsetup_r+0x18>
 8007ba2:	6a03      	ldr	r3, [r0, #32]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <__swsetup_r+0x18>
 8007ba8:	f7fd fee6 	bl	8005978 <__sinit>
 8007bac:	230c      	movs	r3, #12
 8007bae:	5ee2      	ldrsh	r2, [r4, r3]
 8007bb0:	0713      	lsls	r3, r2, #28
 8007bb2:	d423      	bmi.n	8007bfc <__swsetup_r+0x68>
 8007bb4:	06d3      	lsls	r3, r2, #27
 8007bb6:	d407      	bmi.n	8007bc8 <__swsetup_r+0x34>
 8007bb8:	2309      	movs	r3, #9
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	2340      	movs	r3, #64	@ 0x40
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	4240      	negs	r0, r0
 8007bc6:	e03a      	b.n	8007c3e <__swsetup_r+0xaa>
 8007bc8:	0752      	lsls	r2, r2, #29
 8007bca:	d513      	bpl.n	8007bf4 <__swsetup_r+0x60>
 8007bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	d008      	beq.n	8007be4 <__swsetup_r+0x50>
 8007bd2:	0023      	movs	r3, r4
 8007bd4:	3344      	adds	r3, #68	@ 0x44
 8007bd6:	4299      	cmp	r1, r3
 8007bd8:	d002      	beq.n	8007be0 <__swsetup_r+0x4c>
 8007bda:	0028      	movs	r0, r5
 8007bdc:	f7fe feb4 	bl	8006948 <_free_r>
 8007be0:	2300      	movs	r3, #0
 8007be2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007be4:	2224      	movs	r2, #36	@ 0x24
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	4393      	bics	r3, r2
 8007bea:	81a3      	strh	r3, [r4, #12]
 8007bec:	2300      	movs	r3, #0
 8007bee:	6063      	str	r3, [r4, #4]
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	89a2      	ldrh	r2, [r4, #12]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10b      	bne.n	8007c1a <__swsetup_r+0x86>
 8007c02:	21a0      	movs	r1, #160	@ 0xa0
 8007c04:	2280      	movs	r2, #128	@ 0x80
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	0089      	lsls	r1, r1, #2
 8007c0a:	0092      	lsls	r2, r2, #2
 8007c0c:	400b      	ands	r3, r1
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <__swsetup_r+0x86>
 8007c12:	0021      	movs	r1, r4
 8007c14:	0028      	movs	r0, r5
 8007c16:	f000 f88f 	bl	8007d38 <__smakebuf_r>
 8007c1a:	230c      	movs	r3, #12
 8007c1c:	5ee2      	ldrsh	r2, [r4, r3]
 8007c1e:	2101      	movs	r1, #1
 8007c20:	0013      	movs	r3, r2
 8007c22:	400b      	ands	r3, r1
 8007c24:	420a      	tst	r2, r1
 8007c26:	d00b      	beq.n	8007c40 <__swsetup_r+0xac>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60a3      	str	r3, [r4, #8]
 8007c2c:	6963      	ldr	r3, [r4, #20]
 8007c2e:	425b      	negs	r3, r3
 8007c30:	61a3      	str	r3, [r4, #24]
 8007c32:	2000      	movs	r0, #0
 8007c34:	6923      	ldr	r3, [r4, #16]
 8007c36:	4283      	cmp	r3, r0
 8007c38:	d101      	bne.n	8007c3e <__swsetup_r+0xaa>
 8007c3a:	0613      	lsls	r3, r2, #24
 8007c3c:	d4be      	bmi.n	8007bbc <__swsetup_r+0x28>
 8007c3e:	bd70      	pop	{r4, r5, r6, pc}
 8007c40:	0791      	lsls	r1, r2, #30
 8007c42:	d400      	bmi.n	8007c46 <__swsetup_r+0xb2>
 8007c44:	6963      	ldr	r3, [r4, #20]
 8007c46:	60a3      	str	r3, [r4, #8]
 8007c48:	e7f3      	b.n	8007c32 <__swsetup_r+0x9e>
 8007c4a:	46c0      	nop			@ (mov r8, r8)
 8007c4c:	2000001c 	.word	0x2000001c

08007c50 <_raise_r>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	0004      	movs	r4, r0
 8007c54:	000d      	movs	r5, r1
 8007c56:	291f      	cmp	r1, #31
 8007c58:	d904      	bls.n	8007c64 <_raise_r+0x14>
 8007c5a:	2316      	movs	r3, #22
 8007c5c:	6003      	str	r3, [r0, #0]
 8007c5e:	2001      	movs	r0, #1
 8007c60:	4240      	negs	r0, r0
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <_raise_r+0x24>
 8007c6a:	008a      	lsls	r2, r1, #2
 8007c6c:	189b      	adds	r3, r3, r2
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	2a00      	cmp	r2, #0
 8007c72:	d108      	bne.n	8007c86 <_raise_r+0x36>
 8007c74:	0020      	movs	r0, r4
 8007c76:	f000 f831 	bl	8007cdc <_getpid_r>
 8007c7a:	002a      	movs	r2, r5
 8007c7c:	0001      	movs	r1, r0
 8007c7e:	0020      	movs	r0, r4
 8007c80:	f000 f81a 	bl	8007cb8 <_kill_r>
 8007c84:	e7ed      	b.n	8007c62 <_raise_r+0x12>
 8007c86:	2a01      	cmp	r2, #1
 8007c88:	d009      	beq.n	8007c9e <_raise_r+0x4e>
 8007c8a:	1c51      	adds	r1, r2, #1
 8007c8c:	d103      	bne.n	8007c96 <_raise_r+0x46>
 8007c8e:	2316      	movs	r3, #22
 8007c90:	6003      	str	r3, [r0, #0]
 8007c92:	2001      	movs	r0, #1
 8007c94:	e7e5      	b.n	8007c62 <_raise_r+0x12>
 8007c96:	2100      	movs	r1, #0
 8007c98:	0028      	movs	r0, r5
 8007c9a:	6019      	str	r1, [r3, #0]
 8007c9c:	4790      	blx	r2
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	e7df      	b.n	8007c62 <_raise_r+0x12>
	...

08007ca4 <raise>:
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	4b03      	ldr	r3, [pc, #12]	@ (8007cb4 <raise+0x10>)
 8007ca8:	0001      	movs	r1, r0
 8007caa:	6818      	ldr	r0, [r3, #0]
 8007cac:	f7ff ffd0 	bl	8007c50 <_raise_r>
 8007cb0:	bd10      	pop	{r4, pc}
 8007cb2:	46c0      	nop			@ (mov r8, r8)
 8007cb4:	2000001c 	.word	0x2000001c

08007cb8 <_kill_r>:
 8007cb8:	2300      	movs	r3, #0
 8007cba:	b570      	push	{r4, r5, r6, lr}
 8007cbc:	4d06      	ldr	r5, [pc, #24]	@ (8007cd8 <_kill_r+0x20>)
 8007cbe:	0004      	movs	r4, r0
 8007cc0:	0008      	movs	r0, r1
 8007cc2:	0011      	movs	r1, r2
 8007cc4:	602b      	str	r3, [r5, #0]
 8007cc6:	f7fb f974 	bl	8002fb2 <_kill>
 8007cca:	1c43      	adds	r3, r0, #1
 8007ccc:	d103      	bne.n	8007cd6 <_kill_r+0x1e>
 8007cce:	682b      	ldr	r3, [r5, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d000      	beq.n	8007cd6 <_kill_r+0x1e>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}
 8007cd8:	20000404 	.word	0x20000404

08007cdc <_getpid_r>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	f7fb f962 	bl	8002fa6 <_getpid>
 8007ce2:	bd10      	pop	{r4, pc}

08007ce4 <__swhatbuf_r>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	000e      	movs	r6, r1
 8007ce8:	001d      	movs	r5, r3
 8007cea:	230e      	movs	r3, #14
 8007cec:	5ec9      	ldrsh	r1, [r1, r3]
 8007cee:	0014      	movs	r4, r2
 8007cf0:	b096      	sub	sp, #88	@ 0x58
 8007cf2:	2900      	cmp	r1, #0
 8007cf4:	da0c      	bge.n	8007d10 <__swhatbuf_r+0x2c>
 8007cf6:	89b2      	ldrh	r2, [r6, #12]
 8007cf8:	2380      	movs	r3, #128	@ 0x80
 8007cfa:	0011      	movs	r1, r2
 8007cfc:	4019      	ands	r1, r3
 8007cfe:	421a      	tst	r2, r3
 8007d00:	d114      	bne.n	8007d2c <__swhatbuf_r+0x48>
 8007d02:	2380      	movs	r3, #128	@ 0x80
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	2000      	movs	r0, #0
 8007d08:	6029      	str	r1, [r5, #0]
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	b016      	add	sp, #88	@ 0x58
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	466a      	mov	r2, sp
 8007d12:	f000 f853 	bl	8007dbc <_fstat_r>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	dbed      	blt.n	8007cf6 <__swhatbuf_r+0x12>
 8007d1a:	23f0      	movs	r3, #240	@ 0xf0
 8007d1c:	9901      	ldr	r1, [sp, #4]
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	4019      	ands	r1, r3
 8007d22:	4b04      	ldr	r3, [pc, #16]	@ (8007d34 <__swhatbuf_r+0x50>)
 8007d24:	18c9      	adds	r1, r1, r3
 8007d26:	424b      	negs	r3, r1
 8007d28:	4159      	adcs	r1, r3
 8007d2a:	e7ea      	b.n	8007d02 <__swhatbuf_r+0x1e>
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	2340      	movs	r3, #64	@ 0x40
 8007d30:	e7e9      	b.n	8007d06 <__swhatbuf_r+0x22>
 8007d32:	46c0      	nop			@ (mov r8, r8)
 8007d34:	ffffe000 	.word	0xffffe000

08007d38 <__smakebuf_r>:
 8007d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d3a:	2602      	movs	r6, #2
 8007d3c:	898b      	ldrh	r3, [r1, #12]
 8007d3e:	0005      	movs	r5, r0
 8007d40:	000c      	movs	r4, r1
 8007d42:	b085      	sub	sp, #20
 8007d44:	4233      	tst	r3, r6
 8007d46:	d007      	beq.n	8007d58 <__smakebuf_r+0x20>
 8007d48:	0023      	movs	r3, r4
 8007d4a:	3347      	adds	r3, #71	@ 0x47
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	6123      	str	r3, [r4, #16]
 8007d50:	2301      	movs	r3, #1
 8007d52:	6163      	str	r3, [r4, #20]
 8007d54:	b005      	add	sp, #20
 8007d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d58:	ab03      	add	r3, sp, #12
 8007d5a:	aa02      	add	r2, sp, #8
 8007d5c:	f7ff ffc2 	bl	8007ce4 <__swhatbuf_r>
 8007d60:	9f02      	ldr	r7, [sp, #8]
 8007d62:	9001      	str	r0, [sp, #4]
 8007d64:	0039      	movs	r1, r7
 8007d66:	0028      	movs	r0, r5
 8007d68:	f7fe fe64 	bl	8006a34 <_malloc_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d108      	bne.n	8007d82 <__smakebuf_r+0x4a>
 8007d70:	220c      	movs	r2, #12
 8007d72:	5ea3      	ldrsh	r3, [r4, r2]
 8007d74:	059a      	lsls	r2, r3, #22
 8007d76:	d4ed      	bmi.n	8007d54 <__smakebuf_r+0x1c>
 8007d78:	2203      	movs	r2, #3
 8007d7a:	4393      	bics	r3, r2
 8007d7c:	431e      	orrs	r6, r3
 8007d7e:	81a6      	strh	r6, [r4, #12]
 8007d80:	e7e2      	b.n	8007d48 <__smakebuf_r+0x10>
 8007d82:	2380      	movs	r3, #128	@ 0x80
 8007d84:	89a2      	ldrh	r2, [r4, #12]
 8007d86:	6020      	str	r0, [r4, #0]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	81a3      	strh	r3, [r4, #12]
 8007d8c:	9b03      	ldr	r3, [sp, #12]
 8007d8e:	6120      	str	r0, [r4, #16]
 8007d90:	6167      	str	r7, [r4, #20]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00c      	beq.n	8007db0 <__smakebuf_r+0x78>
 8007d96:	0028      	movs	r0, r5
 8007d98:	230e      	movs	r3, #14
 8007d9a:	5ee1      	ldrsh	r1, [r4, r3]
 8007d9c:	f000 f820 	bl	8007de0 <_isatty_r>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d005      	beq.n	8007db0 <__smakebuf_r+0x78>
 8007da4:	2303      	movs	r3, #3
 8007da6:	89a2      	ldrh	r2, [r4, #12]
 8007da8:	439a      	bics	r2, r3
 8007daa:	3b02      	subs	r3, #2
 8007dac:	4313      	orrs	r3, r2
 8007dae:	81a3      	strh	r3, [r4, #12]
 8007db0:	89a3      	ldrh	r3, [r4, #12]
 8007db2:	9a01      	ldr	r2, [sp, #4]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	e7cc      	b.n	8007d54 <__smakebuf_r+0x1c>
	...

08007dbc <_fstat_r>:
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	b570      	push	{r4, r5, r6, lr}
 8007dc0:	4d06      	ldr	r5, [pc, #24]	@ (8007ddc <_fstat_r+0x20>)
 8007dc2:	0004      	movs	r4, r0
 8007dc4:	0008      	movs	r0, r1
 8007dc6:	0011      	movs	r1, r2
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	f7fb f952 	bl	8003072 <_fstat>
 8007dce:	1c43      	adds	r3, r0, #1
 8007dd0:	d103      	bne.n	8007dda <_fstat_r+0x1e>
 8007dd2:	682b      	ldr	r3, [r5, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d000      	beq.n	8007dda <_fstat_r+0x1e>
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	bd70      	pop	{r4, r5, r6, pc}
 8007ddc:	20000404 	.word	0x20000404

08007de0 <_isatty_r>:
 8007de0:	2300      	movs	r3, #0
 8007de2:	b570      	push	{r4, r5, r6, lr}
 8007de4:	4d06      	ldr	r5, [pc, #24]	@ (8007e00 <_isatty_r+0x20>)
 8007de6:	0004      	movs	r4, r0
 8007de8:	0008      	movs	r0, r1
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	f7fb f94f 	bl	800308e <_isatty>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d103      	bne.n	8007dfc <_isatty_r+0x1c>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d000      	beq.n	8007dfc <_isatty_r+0x1c>
 8007dfa:	6023      	str	r3, [r4, #0]
 8007dfc:	bd70      	pop	{r4, r5, r6, pc}
 8007dfe:	46c0      	nop			@ (mov r8, r8)
 8007e00:	20000404 	.word	0x20000404

08007e04 <_init>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	46c0      	nop			@ (mov r8, r8)
 8007e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0a:	bc08      	pop	{r3}
 8007e0c:	469e      	mov	lr, r3
 8007e0e:	4770      	bx	lr

08007e10 <_fini>:
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	46c0      	nop			@ (mov r8, r8)
 8007e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e16:	bc08      	pop	{r3}
 8007e18:	469e      	mov	lr, r3
 8007e1a:	4770      	bx	lr
